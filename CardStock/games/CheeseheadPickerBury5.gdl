;; Cheeseheads
;;
;; Brett Myers variant of Sheepshead (with simple scoring)

(game
 (setup  
  ;; Set up the players, 5 players each on their own team
  (create players 5)
  (create teams (0) (1) (2) (3) (4))
  ;; Create the deck source
  (create deck (game vloc DISCARD) (deck (RANK (ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, ELEVEN, TWELVE, THIRTEEN, FOURTEEN))
                                         (COLOR (RED))))
  (create deck (game vloc DISCARD) (deck (RANK (ONE, TWO, THREE, FOUR, FIVE, SIX))
                                         (COLOR (BLUE, GREEN, YELLOW))))
  )       
 
 ;; Stages of the game
 (do 
     (
      (repeat all
              (move (top (game vloc DISCARD)) 
                    (top (game iloc STOCK))))
      (set (game points SCORE) 
           (
            ((RANK (FOURTEEN)) 2)
            ((RANK (THIRTEEN)) 2) 
            ((RANK (TWELVE)) 2)
            ((RANK (ELEVEN)) 2)
            ((RANK (TEN)) 1)
            ((RANK (NINE)) 1)
            ((RANK (EIGHT)) 1)
            ((RANK (SEVEN)) 1)
            ((RANK (SIX)) 5)
            ((RANK (FIVE)) 4)
            ((RANK (FOUR)) 3)

            ))
      (shuffle (game iloc STOCK))
      (all player 'P
           (repeat 6
                   (move (top (game iloc STOCK))
                         (top ('P iloc HAND)))))))
        
 ;; Will anyone pick up the blind?
 (stage player
        (end
         (any player 'P (== ('P sto PICKER) 1))
         )
        (choice
         (
          
           (set ((current player) sto PICKER) 1)
           
          ((!= (game sto PASS) 4)
           (inc (game sto PASS) 1)
           )
          ))
        )

 ;; choose to discard from the blind
 (stage player
        (end 
         (== (game sto PICKED) 1))
        (do (
             ((== ((current player) sto PICKER) 1)
              (do (
                   (repeat all
                           (move (top (game iloc STOCK)) 
                                 (top ((current player) iloc HAND))))
                   (set (game sto PICKED) 1))))))
                  
                 
        (choice
         (((== ((current player) sto PICKER) 1)
           (any ((current player) iloc HAND) 'C
                (move 'C (top ((current player) iloc BLIND)))))
          ((!= ((current player) sto PICKER) 1)
           (turn pass))
          ))
        (choice
         (((== ((current player) sto PICKER) 1)
           (any ((current player) iloc HAND) 'C
                (move 'C (top ((current player) iloc BLIND)))))
          ((!= ((current player) sto PICKER) 1)
           (turn pass)))))
        
 ;; set the partner
 (do ((all player 'P
           ((and (== (size (filter ('P iloc HAND) 'H 
                                   (== (cardatt RANK 'H) 
                                       SEVEN))) 1)
                 (!= ('P sto PICKER) 1)
                 )
            (set ('P sto PARTNER) 1))
                      
           )))

 ;; players play a round 6 times     
 (stage player
        (end 
         (all player 'P 
              (== (size ('P iloc HAND)) 0)))
               
        ;; players play a hand once
        (stage player
               (end 
                (all player 'P 
                     (== (size ('P vloc TRICK)) 1)))
                      
               (choice  
                (         
                        
                 ;; if first player 
                 ;;   play any card, remember it in the lead spot, and end your turn
                 ((== (size (game mem LEAD)) 0)
                  (any ((current player) iloc HAND) 'C
                       (do 
                           (
                            (move 'C 
                                  (top ((current player) vloc TRICK)))
                            (remember (top ((current player) vloc TRICK)) 
                                      (top (game mem LEAD)))))))
                        
                 ;; if following player and cannot follow SUIT
                 ;;   play any card, and end your turn
                 ((and (== (size (game mem LEAD)) 1)
                       (== (size (filter ((current player) iloc HAND) 'H 
                                         (== (cardatt COLOR 'H) 
                                             (cardatt COLOR (top (game mem LEAD)))))) 0))
                  (any ((current player) iloc HAND) 'C
                       (move 'C 
                             (top ((current player) vloc TRICK)))))
                        
                 ;; if following player and can follow SUIT
                 ;;   play any card that follows SUIT, and end your turn
                 (any (filter ((current player) iloc HAND) 'H 
                              (== (cardatt COLOR 'H)
                                  (cardatt COLOR (top (game mem LEAD)))))
                      'C
                      ((== (size (game mem LEAD)) 1)
                       (move 'C 
                             (top ((current player) vloc TRICK))))))))
               
        ;; after players play hand, computer wraps up trick
        (do ( 
             ;; solidfy card recedence
             (set (game points PRECEDENCE) 
                  (
                   ((COLOR (cardatt COLOR (top (game mem LEAD)))) 100)
                   ((COLOR (RED)) 200)
                   ((RANK (FOURTEEN)) 14)
                   ((RANK (THIRTEEN)) 13) 
                   ((RANK (TWELVE)) 12)
                   ((RANK (ELEVEN)) 11)
                   ((RANK (TEN)) 10)
                   ((RANK (NINE)) 9)
                   ((RANK (EIGHT)) 8)
                   ((RANK (SEVEN)) 7)
                   ((RANK (SIX)) 6)
                   ((RANK (FIVE)) 5)
                   ((RANK (FOUR)) 4)
                   ((RANK (THREE)) 3)
                   ((RANK (TWO)) 2)
                   ((RANK (ONE)) 1)
                   ))
                    
             ;; determine who won the hand, set them first next time, and give them a point
             (forget (top (game mem LEAD)))
             (cycle next (owner (max (union (all player 'P 
                                                 ('P vloc TRICK))) using (game points PRECEDENCE))))
                                        
             ;; discard all the played cards
             (all player 'P
                  (move (top ('P vloc TRICK)) 
                        (top ((next player) vloc TRICKSWON))))

             ;; for Leaster, give the blind to the last trick winner
             ((and (all player 'P (== (size ('P iloc HAND)) 0))
                   (== (game sto LEASTER) 1))
              (repeat all
                      (move (top (game iloc STOCK)) 
                            (top ((next player) vloc TRICKSWON))))
              ))))
        
 ;; determine trick score
 (stage player
        (end 
         (all player 'P (== (size ('P vloc TRICKSWON)) 0)))
        (do 
            (((or (== ((current player) sto PICKER) 1)
                  (== ((current player) sto PARTNER) 1))
              (inc (game sto CALLERS) (sum ((current player) vloc TRICKSWON) using (game points SCORE))))
             ((and (!= ((current player) sto PICKER) 1)
                   (!= ((current player) sto PARTNER) 1))
              (inc (game sto OPPOSITION) (sum ((current player) vloc TRICKSWON) using (game points SCORE))))
             (set ((current player) sto TSCORE) (sum ((current player) vloc TRICKSWON) using (game points SCORE)))
             (set ((current player) sto TSUM) (size ((current player) vloc TRICKSWON)))
             
             ;; Not perfect, but ok for my scoring right now
             ((or (== ((current player) sto PICKER) 1)
                  (== ((current player) sto PARTNER) 1))
              (inc (game sto CALLERS) (sum ((current player) iloc BLIND) using (game points SCORE))))
              

             (repeat all
                     (move (top ((current player) vloc TRICKSWON))
                           (top (game vloc DISCARD)))))))

 ;; determine final score
 (stage player
        (end 
         (all player 'P (!= ('P sto SCORED) 0)))
        (do 
            (
             (set ((current player) sto SCORED) 1)
             
             ;; picker
             ((and (== ((current player) sto PICKER) 1)
                   (all player 'P (!= ('P sto PARTNER) 1))
                   (>= (game sto CALLERS) 31)
                   )
              (inc ((current player) sto SCORE) 4))
             ((and (== ((current player) sto PICKER) 1)
                   (any player 'P (== ('P sto PARTNER) 1))
                   (>= (game sto CALLERS) 31)
                   )
              (inc ((current player) sto SCORE) 2))
             ((and (== ((current player) sto PICKER) 1)
                   (any player 'P (== ('P sto PARTNER) 1))
                   (< (game sto CALLERS) 31)
                   )
              (dec ((current player) sto SCORE) 2))
             ((and (== ((current player) sto PICKER) 1)
                   (all player 'P (!= ('P sto PARTNER) 1))
                   (< (game sto CALLERS) 31)
                   )
              (dec ((current player) sto SCORE) 4))

             ;; partner
             ((and (== ((current player) sto PARTNER) 1)
                   (>= (game sto CALLERS) 31)
                   )
              (inc ((current player) sto SCORE) 1))
             ((and (== ((current player) sto PARTNER) 1)
                   (< (game sto CALLERS) 31)
                   )
              (dec ((current player) sto SCORE) 1))

             ;; others
             ((and (!= (game sto LEASTER) 1)
                   (!= ((current player) sto PICKER) 1)
                   (!= ((current player) sto PARTNER) 1)
                   (>= (game sto CALLERS) 31)
                   )
              (dec ((current player) sto SCORE) 1))
             ((and (!= (game sto LEASTER) 1)
                   (!= ((current player) sto PICKER) 1)
                   (!= ((current player) sto PARTNER) 1)
                   (< (game sto CALLERS) 31)
                   )
              (inc ((current player) sto SCORE) 1))
                
             )))
        

       
  
 (scoring max ((current player) sto SCORE)))


