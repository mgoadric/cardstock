;; Pitch
;;
;; https://www.pagat.com/allfours/pitch.html

(game
 
 (setup 
  ;; Set up the players, 4 players, in teams of 2
  (create players 4)
  (create teams (0, 2) (1, 3))
  
  ;; Create the deck source
  (create deck (game iloc STOCK) (deck (RANK (ACE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, 
                                                 EIGHT, NINE, TEN, JACK, QUEEN, KING))
                                       (COLOR (RED (SUIT (HEARTS, DIAMONDS)))
                                              (BLACK (SUIT (CLUBS, SPADES)))))))        
 
 ;; Stages of the game
 (do 
     (
      (shuffle (game iloc STOCK))
      (all player 'P
           (repeat 6
                   (move (top (game iloc STOCK))
                         (top ('P iloc HAND)))))
      (set (game points GAME)
           (
            ((RANK : ACE) 4)
            ((RANK : KING) 3) 
            ((RANK : QUEEN) 2)
            ((RANK : JACK) 1)
            ((RANK : TEN) 10)))
      ))
 
 ;; bidding time!
 (stage player 
       (end 
        (all player 'P 
          (== (game sto BIDS) 4)))

          (choice (
            ;; not the last, you can pass, or you are last and someone already bid
            ((or (!= (game sto BIDS) 3)
                 (any player 'P (== ('P str BID) MAX)))
             (inc (game sto BIDS) 1))

            ;; bid between 2 and 5, must be greater than previous
            (any (range 2..5) 'B
                  ((or (all player 'P (> 'B ('P sto BID)))
                       (and (== (game sto BIDS) 3) ;; the last player can steal earlier high bid
                            (all player 'P (> (+ 'B 1) ('P sto BID)))))
                   (do (
                        (all player 'P ((== ('P str BID) MAX)
                                        (set ('P str BID) NONE)))
                        (set ((current player) str BID) MAX)
                        (set ((current player) sto BID) 'B)
                        (set ((team (current player)) sto BID) 'B)
                        (inc (game sto BIDS) 1)))))))
      )

 ;; the highest bidder goes first
 (do (
      (all player 'P 
        ((== ('P str BID) MAX)
         (cycle current 'P)))
 ))

 ;; players play a round until their cards are gone    
 (stage player
        (end 
         (all player 'P 
              (== (size ('P iloc HAND)) 0)))
                
        ;; players play a hand once
        (stage player
               (end 
                (all player 'P
                     (> (size ('P vloc TRICK)) 0)))
               
               (choice 
                (
                 ;; if first player, play any card, remember it in the lead spot
                 ((== (size (game mem LEAD)) 0)                       
                  (any ((current player) iloc HAND) 'C
                       (do 
                           (
                            (move 'C 
                                  (top ((current player) vloc TRICK)))
                            (remember (top ((current player) vloc TRICK)) 
                                      (top (game mem LEAD)))

                            ;; if first player, then you also establish trump with your first card
                            ((== (size (game mem TRUMP)) 0)
                             (remember (top ((current player) vloc TRICK))
                                       (top (game mem TRUMP))))))))

                 ;; if following player and can follow SUIT
                 ;;   play any card that follows SUIT or TRUMP
                 ((and (== (size (game mem LEAD)) 1)
                       (>  (size (filter ((current player) iloc HAND) 'L 
                               (== (cardatt SUIT 'L)
                                   (cardatt SUIT (top (game mem LEAD))))
                        )) 0))
                  (any (filter ((current player) iloc HAND) 'L 
                               (or (== (cardatt SUIT 'L)
                                       (cardatt SUIT (top (game mem LEAD))))
                                   (== (cardatt SUIT 'L)
                                       (cardatt SUIT (top (game mem TRUMP))))
                                   ))
                       'C
                       (move 'C 
                             (top ((current player) vloc TRICK)))))
                                                         
                 ;; if following player and cannot follow SUIT
                 ;;   play any card
                 ((and (== (size (game mem LEAD)) 1)
                       (== (size (filter ((current player) iloc HAND) 'L 
                                         (== (cardatt SUIT 'L) 
                                             (cardatt SUIT (top (game mem LEAD))))                      
                        )) 0))
                  (any ((current player) iloc HAND) 'C
                       (move 'C 
                             (top ((current player) vloc TRICK)))))
                      
            )))
        
        ;; after players play hand, wrap up trick
        (do (
             ;; solidfy card recedence
             (set (game points PRECEDENCE)
                  (
                   ((SUIT : (cardatt SUIT (top (game mem TRUMP)))) 200)
                   ((SUIT : (cardatt SUIT (top (game mem LEAD)))) 100)
                   ((RANK : ACE) 14)
                   ((RANK : KING) 13) 
                   ((RANK : QUEEN) 12)
                   ((RANK : JACK) 11)
                   ((RANK : TEN) 10)
                   ((RANK : NINE) 9)
                   ((RANK : EIGHT) 8)
                   ((RANK : SEVEN) 7)
                   ((RANK : SIX) 6)
                   ((RANK : FIVE) 5)
                   ((RANK : FOUR) 4)
                   ((RANK : THREE) 3)
                   ((RANK : TWO) 2)))
             
             ;; determine who won the hand, set them first next time
             (forget (top (game mem LEAD)))
             (cycle next (owner (max (union (all player 'P 
                                                 ('P vloc TRICK))) using (game points PRECEDENCE))))
 
             ;; count the number of tricks won per team
             (inc ((team (next player)) sto SMUDGE) 1)

             ;; discard all the played cards
             (all player 'P
                  (move (top ('P vloc TRICK)) 
                        (top ((next player) vloc TRICKSWON)))))))
 
 (do 
     (
      (all player 'P
           (do 
               (
                (inc ((team 'P) sto GAMESCORE) (sum ('P vloc TRICKSWON) using (game points GAME)))
                (let (filter (union (all player 'MP ('MP vloc TRICKSWON))) 'UC 
                             (== (cardatt SUIT 'UC) (cardatt SUIT (top (game mem TRUMP))))) 'ONLYTRUMP
                  (inc ((team 'P) sto TEMPSCORE) 
                    (size (filter ('P vloc TRICKSWON) 'C 
                        (and (== (cardatt SUIT 'C)
                                 (cardatt SUIT (top (game mem TRUMP))))
                             (or (== (cardatt RANK 'C)
                                     (cardatt RANK (max 'ONLYTRUMP using (game points PRECEDENCE))))
                                 (== (cardatt RANK 'C)
                                     (cardatt RANK (min 'ONLYTRUMP using (game points PRECEDENCE))))
                                 (== (cardatt RANK 'C)
                                     JACK))))))))))))
                
 (stage team
        (end 
         (all player 'P (== (size ('P vloc TRICKSWON)) 0)))
        (do
            (
             ((> ((current team) sto GAMESCORE) ((next team) sto GAMESCORE))
              (inc ((current team) sto TEMPSCORE) 1))

             ;; nonbidding team, get any points scored
             ((all (current team) 'TP (!= ('TP str BID) MAX))
              (inc ((current team) sto SCORE) ((current team) sto TEMPSCORE)))

             ;; determine if bid was made, otherwise set back
             ((any (current team) 'TP (== ('TP str BID) MAX))
              (do (
                  ((and (<= ((current team) sto BID) 4)
                        (>= ((current team) sto BID) ((current team) sto SCORE)))
                   (inc ((current team) sto SCORE) ((current team) sto TEMPSCORE)))
                  ((and (<= ((current team) sto BID) 4)
                        (< ((current team) sto BID) ((current team) sto SCORE)))
                   (dec ((current team) sto SCORE) ((current team) sto TEMPSCORE)))

                  ;; calculate smudge
                  ((and (== ((current team) sto BID) 5)
                        (== ((current team) sto SMUDGE) 6)
                        (== ((current team) sto SCORE) 4))
                   (inc ((current team) sto SCORE) 5))
                  ((and (== ((current team) sto BID) 5)
                        (or (!= ((current team) sto SMUDGE) 6)
                            (!= ((current team) sto SCORE) 4)))
                   (dec ((current team) sto SCORE) 5))
                  )))

             ;; discard cards
             (all (current team) 'TP
                 (repeat all
                     (move (top ('TP vloc TRICKSWON))
                           (top (game vloc DISCARD))))))))
                              
                
 (scoring max ((team (current player)) sto SCORE)))



