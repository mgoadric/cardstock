;; Scopa in the GDL
;; https://www.pagat.com/fishing/scopa.html
(game
 (setup  
  ;; Set up the players, 2 players each on their own team
  (create players 2)
  
  ;; Create the deck source
  (create deck (game iloc STOCK) (deck (RANK (A, TWO, THREE, FOUR, FIVE, SIX, SEVEN, J, H, K))
                                       (SUIT (SWORDS, CUPS, COINS, BATONS)))))        
 (do 
     (

       (set (game points POINTS)
           (
            ((RANK : K) 10) 
            ((RANK : H) 9)
            ((RANK : J) 8)
            ((RANK : SEVEN) 7)
            ((RANK : SIX) 6)
            ((RANK : FIVE) 5)
            ((RANK : FOUR) 4)
            ((RANK : THREE) 3)
            ((RANK : TWO) 2)
            ((RANK : A) 1)))

       (set (game points PRIMIERA)
           (
            ((RANK : K) 10) 
            ((RANK : H) 10)
            ((RANK : J) 10)
            ((RANK : SEVEN) 21)
            ((RANK : SIX) 18)
            ((RANK : FIVE) 15)
            ((RANK : FOUR) 14)
            ((RANK : THREE) 13)
            ((RANK : TWO) 12)
            ((RANK : A) 16)))

      (shuffle (game iloc STOCK))
      (repeat 4
              (move (top (game iloc STOCK))
                    (top (game vloc POOL))))))
  
 ;; Stages of the game
 (stage player
        (end 
         (== (size (game iloc STOCK)) 0))
        
        ;; Deal the players 3 cards each
        (do 
            (
             (all player 'P
                  (repeat 3
                          (move (top (game iloc STOCK))
                                (top ('P iloc HAND)))))))
        
        
        (stage player
               (end 
                (all player 'P 
                     (== (size ('P iloc HAND)) 0)))
               
               ;; Pick a card to play to the pool
               (choice 
                (
                 (any ((current player) iloc HAND) 'AC
                      (do (
                        (move 'AC 
                            (top ((current player) vloc TRICK)))

                        ;; match one card in pool
                        (any (filter (game vloc POOL) 'PC 
                                 (== (cardatt RANK 'PC)
                                     (cardatt RANK (top ((current player) vloc TRICK)))))
                                   'PCF
                                   (do 
                                       (
                                        (move 'PCF 
                                              (top ((current player) vloc BUNDLE)))
                                        (set ((current player) sto MOVED) 1))))    

                        ;; match subsets of cards IF NO SINGLES
                        (any (filter (subsets (game vloc POOL)) 'SUB 
                            (and (!= ((current player) sto MOVED) 1)
                                (> (size 'SUB) 1)
                                (== (sum 'SUB using (game points POINTS))
                                    (score (top ((current player) vloc TRICK))
                                        using (game points POINTS))))) 'SUBMATCH
                                            (do 
                                                (
                                                    (all 'SUBMATCH 'MCARD  
                                                    (move 'MCARD 
                                                        (top ((current player) vloc BUNDLE))))
                                                    (set ((current player) sto MOVED) 1))))  
                      ))  
                 )
                ))
               
               (do 
                  (
                    ;; TODO CHECK FOR SCOPA (SWEEP OF THE POOL)
                    ;; all turns except the last one
                    ((and (== (size (game vloc POOL)) 0)
                          (or (!= (size (game iloc STOCK)) 0)
                              (any player 'P (> (size ('P iloc HAND)) 0))))
                     (inc ((current player) sto SCORE) 1))
            
                    ;; move trick card to bundle or pool depending 
                    ((== ((current player) sto MOVED) 0)
                     (move (top ((current player) vloc TRICK))
                           (top (game vloc POOL))))
                    
                    ((== ((current player) sto MOVED) 1)
                     (move (top ((current player) vloc TRICK))
                           (top ((current player) vloc BUNDLE))))
                           
                    (set ((current player) sto MOVED) 0)))))



(stage player (end (all player 'P (== ('P str SCORING) MID))) 
  (do (

      ;; scopas scored when they happen

      ;; most cards worth one point
      ((> (size ((current player) vloc BUNDLE))
          (size ((next player) vloc BUNDLE)))
         (inc ((current player) sto SCORE) 1)
      )

      ;; Most coins worth one point
      ((> (size (filter ((current player) vloc BUNDLE) 'C (== (cardatt SUIT 'C) COINS)))
          (size (filter ((next player) vloc BUNDLE) 'C (== (cardatt SUIT 'C) COINS))))
         (inc ((current player) sto SCORE) 1)
      )

      ;; 7 of coins worth one point
      ((any ((current player) vloc BUNDLE) 'C (and (== (cardatt SUIT 'C) COINS)
                                                   (== (cardatt RANK 'C) SEVEN))) 
         (inc ((current player) sto SCORE) 1))

      ;; best primiera scores 1 point, this gets a potential prime score
      (let (partition SUIT ((current player) vloc BUNDLE)) 'PART  ;; split up by suit
            ((== (size 'PART) 4)  ;; if at least one card in each suit
             (all 'PART 'PP (inc ((current player) sto PRIMIERA) ;; add up the scores
                (score (max 'PP using (game points PRIMIERA)) using (game points PRIMIERA))))) ;; find the highest, get the score
      )

      ;; mid scoring turn is done
      (set ((current player) str SCORING) MID)
  )))

(stage player (end (all player 'P (== ('P str SCORING) END))) 
  (do (

      ;; highest primiera scores one point
      ((> ((current player) sto PRIMIERA)
          ((next player) sto PRIMIERA))
         (inc ((current player) sto SCORE) 1)
      )

      ;; scoring turn is done
      (set ((current player) str SCORING) END)
  )))  

;; need a lot of scoring here... TODO
 (scoring max ((current player) sto SCORE))))