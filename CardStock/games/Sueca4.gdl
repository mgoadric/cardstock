;; Sueca
;;
;; https://www.pagat.com/aceten/sueca.html

(game
 
 (setup 
  ;; Set up the players, 2 teams of 2 players, alternating
  (create players 4)
  (create teams (0, 2) (1, 3))
  
  ;; Create the deck source
  (create deck (game iloc STOCK) (deck (RANK (A, TWO, THREE, FOUR, FIVE, SIX, SEVEN, M, H, K))
                                         (SUIT (SWORDS, CUPS, COINS, CLUBS)))
                                                ))        
 
 ;; Play one round the game
(do 
(
      (set (game points SCORE)
      (
            ((RANK (A)) 11) 
            ((RANK (SEVEN)) 10) 
            ((RANK (K)) 4) 
            ((RANK (H)) 3) 
            ((RANK (M)) 2) 
            ))

      (shuffle (game iloc STOCK))
      (all player 'P
      (repeat 10
            (move (top (game iloc STOCK))
                  (top ('P iloc HAND)))))
      (remember (top ((previous player) iloc HAND))
                (top (game mem TRUMP)))))

;; players play a round 13 times     
(stage player
      (end 
      (all player 'P 
            (== (size ('P iloc HAND)) 0)))
      
      ;; players play a hand once
      (stage player
            (end 
            (all player 'P
                  (> (size ('P vloc TRICK)) 0)))
            
            (choice 
            (
            
            ;; if following player and cannot follow SUIT
            ;;   play any card
            ((and (== (size (game mem LEAD)) 1)
                  (== (size (filter ((current player) iloc HAND) 'L 
                                    (== (cardatt SUIT 'L) 
                                        (cardatt SUIT (top (game mem LEAD)))))) 0))
                  (any ((current player) iloc HAND) 'C
                  (move 'C 
                        (top ((current player) vloc TRICK)))))
            
            ;; if following player and can follow SUIT
            ;;   play any card that follows SUIT
            ((== (size (game mem LEAD)) 1)
                  (any (filter ((current player) iloc HAND) 'L 
                              (== (cardatt SUIT 'L)
                                  (cardatt SUIT (top (game mem LEAD))))) 
                  'C
                  
                  (move 'C 
                        (top ((current player) vloc TRICK)))))
            
            ;; if first player, play any card, remember it in the lead spot
            ((== (size (game mem LEAD)) 0)                       
                  (any ((current player) iloc HAND) 'C
                  (do 
                        (
                        (move 'C 
                              (top ((current player) vloc TRICK)))
                        (remember (top ((current player) vloc TRICK)) 
                                    (top (game mem LEAD))))))))))
      
      ;; after players play hand, computer wraps up trick
      (do (
            ;; solidfy card precedence
            (set (game points PRECEDENCE)
                  (
                  ((SUIT (cardatt SUIT (top (game mem TRUMP)))) 200)
                  ((SUIT (cardatt SUIT (top (game mem LEAD)))) 100)
                  ((RANK (A)) 11)
                  ((RANK (SEVEN)) 10)
                  ((RANK (K)) 9) 
                  ((RANK (H)) 8)
                  ((RANK (M)) 7)
                  ((RANK (SIX)) 6)
                  ((RANK (FIVE)) 5)
                  ((RANK (FOUR)) 4)
                  ((RANK (THREE)) 3)
                  ((RANK (TWO)) 2)))
            
            ;; determine who won the hand, set them first next time, and give them a point
            (forget (top (game mem LEAD)))
            (cycle next (owner (max (union (all player 'P 
                                                ('P vloc TRICK))) using (game points PRECEDENCE))))
            
            ;; Move all the played cards to the winner's hand
            (all player 'P
                  (move (top ('P vloc TRICK)) 
                        (top ((next player) vloc TRICKSWON)))))))

;; determine team score
(stage team
      (end 
      (all player 'P 
            (== (size ('P vloc TRICKSWON)) 0)))
      (do 
            (
                                                
            ;; team sums up player points
            (all (current team) 'TP
                  (do 
                  (
                  (inc ((current team) sto SCORE) 
                        (sum ('TP vloc TRICKSWON) using (game points SCORE)))
                  (repeat all
                        (move (top ('TP vloc TRICKSWON))
                              (top (game vloc DISCARD))))))))))
 
 (scoring max ((team (current player)) sto SCORE)))



