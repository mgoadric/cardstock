//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/markgoadrich/Github/cardstock/CardStock/Recycle.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, BOOLOP=76, COMPOP=77, EQOP=78, UNOP=79, INTNUM=80, 
		LETT=81, OPEN=82, CLOSE=83, WS=84, ANY=85;
	public const int
		RULE_var = 0, RULE_vars = 1, RULE_varo = 2, RULE_varp = 3, RULE_vari = 4, 
		RULE_varb = 5, RULE_varc = 6, RULE_varcs = 7, RULE_varcard = 8, RULE_game = 9, 
		RULE_declare = 10, RULE_setup = 11, RULE_scoring = 12, RULE_stage = 13, 
		RULE_endcondition = 14, RULE_multiaction = 15, RULE_multiaction2 = 16, 
		RULE_condact = 17, RULE_agg = 18, RULE_let = 19, RULE_action = 20, RULE_playercreate = 21, 
		RULE_teamcreate = 22, RULE_teams = 23, RULE_deckcreate = 24, RULE_deck = 25, 
		RULE_attribute = 26, RULE_initpoints = 27, RULE_awards = 28, RULE_subaward = 29, 
		RULE_cycleaction = 30, RULE_setaction = 31, RULE_setstraction = 32, RULE_incaction = 33, 
		RULE_decaction = 34, RULE_moveaction = 35, RULE_copyaction = 36, RULE_removeaction = 37, 
		RULE_shuffleaction = 38, RULE_turnaction = 39, RULE_repeat = 40, RULE_pointstorage = 41, 
		RULE_card = 42, RULE_actual = 43, RULE_maxof = 44, RULE_minof = 45, RULE_locpre = 46, 
		RULE_locdesc = 47, RULE_who = 48, RULE_whop = 49, RULE_whot = 50, RULE_whodesc = 51, 
		RULE_owner = 52, RULE_teamp = 53, RULE_typed = 54, RULE_collection = 55, 
		RULE_strcollection = 56, RULE_range = 57, RULE_other = 58, RULE_cstorage = 59, 
		RULE_sortof = 60, RULE_unionof = 61, RULE_intersectof = 62, RULE_disjunctionof = 63, 
		RULE_filter = 64, RULE_memstorage = 65, RULE_sequence = 66, RULE_cstoragecollection = 67, 
		RULE_memset = 68, RULE_run = 69, RULE_subset = 70, RULE_tuple = 71, RULE_partition = 72, 
		RULE_aggcs = 73, RULE_boolean = 74, RULE_intop = 75, RULE_aggb = 76, RULE_int = 77, 
		RULE_sum = 78, RULE_score = 79, RULE_add = 80, RULE_mult = 81, RULE_subtract = 82, 
		RULE_mod = 83, RULE_divide = 84, RULE_exponent = 85, RULE_triangular = 86, 
		RULE_fibonacci = 87, RULE_random = 88, RULE_sizeof = 89, RULE_aggi = 90, 
		RULE_rawstorage = 91, RULE_str = 92, RULE_strstorage = 93, RULE_cardatt = 94, 
		RULE_namegr = 95;
	public static readonly string[] ruleNames = {
		"var", "vars", "varo", "varp", "vari", "varb", "varc", "varcs", "varcard", 
		"game", "declare", "setup", "scoring", "stage", "endcondition", "multiaction", 
		"multiaction2", "condact", "agg", "let", "action", "playercreate", "teamcreate", 
		"teams", "deckcreate", "deck", "attribute", "initpoints", "awards", "subaward", 
		"cycleaction", "setaction", "setstraction", "incaction", "decaction", 
		"moveaction", "copyaction", "removeaction", "shuffleaction", "turnaction", 
		"repeat", "pointstorage", "card", "actual", "maxof", "minof", "locpre", 
		"locdesc", "who", "whop", "whot", "whodesc", "owner", "teamp", "typed", 
		"collection", "strcollection", "range", "other", "cstorage", "sortof", 
		"unionof", "intersectof", "disjunctionof", "filter", "memstorage", "sequence", 
		"cstoragecollection", "memset", "run", "subset", "tuple", "partition", 
		"aggcs", "boolean", "intop", "aggb", "int", "sum", "score", "add", "mult", 
		"subtract", "mod", "divide", "exponent", "triangular", "fibonacci", "random", 
		"sizeof", "aggi", "rawstorage", "str", "strstorage", "cardatt", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'game'", "'declare'", "'setup'", "'scoring'", "'min'", "'max'", 
		"'stage'", "'player'", "'team'", "'end'", "'choice'", "'do'", "'any'", 
		"'all'", "'let'", "'create'", "'players'", "'teams'", "','", "'deck'", 
		"'set'", "':'", "'cycle'", "'next'", "'current'", "'previous'", "'inc'", 
		"'dec'", "'move'", "'remember'", "'forget'", "'shuffle'", "'faro'", "'turn'", 
		"'pass'", "'repeat'", "'points'", "'top'", "'bottom'", "'actual'", "'using'", 
		"'vloc'", "'iloc'", "'hloc'", "'oloc'", "'mem'", "'owner'", "'range'", 
		"'..'", "'other'", "'sort'", "'union'", "'intersect'", "'disjunction'", 
		"'filter'", "'runs'", "'subsets'", "'tuples'", "'partition'", "'sum'", 
		"'score'", "'+'", "'*'", "'-'", "'%'", "'//'", "'^'", "'tri'", "'fib'", 
		"'random'", "'size'", "'sto'", "'str'", "'cardatt'", null, null, null, 
		"'not'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", 
		"LETT", "OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecycleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RecycleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RecycleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(T__0);
			State = 193;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVars(this);
		}
	}

	[RuleVersion(0)]
	public VarsContext vars() {
		VarsContext _localctx = new VarsContext(Context, State);
		EnterRule(_localctx, 2, RULE_vars);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(T__0);
			State = 196;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VaroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVaro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVaro(this);
		}
	}

	[RuleVersion(0)]
	public VaroContext varo() {
		VaroContext _localctx = new VaroContext(Context, State);
		EnterRule(_localctx, 4, RULE_varo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(T__0);
			State = 199;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarp(this);
		}
	}

	[RuleVersion(0)]
	public VarpContext varp() {
		VarpContext _localctx = new VarpContext(Context, State);
		EnterRule(_localctx, 6, RULE_varp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(T__0);
			State = 202;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VariContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vari; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVari(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVari(this);
		}
	}

	[RuleVersion(0)]
	public VariContext vari() {
		VariContext _localctx = new VariContext(Context, State);
		EnterRule(_localctx, 8, RULE_vari);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(T__0);
			State = 205;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarb(this);
		}
	}

	[RuleVersion(0)]
	public VarbContext varb() {
		VarbContext _localctx = new VarbContext(Context, State);
		EnterRule(_localctx, 10, RULE_varb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(T__0);
			State = 208;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarc(this);
		}
	}

	[RuleVersion(0)]
	public VarcContext varc() {
		VarcContext _localctx = new VarcContext(Context, State);
		EnterRule(_localctx, 12, RULE_varc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(T__0);
			State = 211;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarcsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varcs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarcs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarcs(this);
		}
	}

	[RuleVersion(0)]
	public VarcsContext varcs() {
		VarcsContext _localctx = new VarcsContext(Context, State);
		EnterRule(_localctx, 14, RULE_varcs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(T__0);
			State = 214;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarcard(this);
		}
	}

	[RuleVersion(0)]
	public VarcardContext varcard() {
		VarcardContext _localctx = new VarcardContext(Context, State);
		EnterRule(_localctx, 16, RULE_varcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(T__0);
			State = 217;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 18, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			Match(OPEN);
			State = 220;
			Match(T__1);
			State = 224;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 221;
					declare();
					}
					} 
				}
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 227;
			setup();
			State = 230;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 230;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 228;
						multiaction();
						}
						break;
					case 2:
						{
						State = 229;
						stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 232;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 234;
			scoring();
			State = 235;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 20, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(OPEN);
			State = 238;
			Match(T__2);
			State = 239;
			typed();
			State = 240;
			var();
			State = 241;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 22, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(OPEN);
			State = 244;
			Match(T__3);
			State = 245;
			playercreate();
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 246;
				teamcreate();
				}
				break;
			}
			State = 256;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 249;
					Match(OPEN);
					State = 252;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__16:
						{
						State = 250;
						deckcreate();
						}
						break;
					case T__36:
						{
						State = 251;
						repeat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 254;
					Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 260;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 24, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(OPEN);
			State = 263;
			Match(T__4);
			State = 264;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__6) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 265;
			@int();
			State = 266;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 26, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(OPEN);
			State = 269;
			Match(T__7);
			State = 270;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 271;
			endcondition();
			State = 274;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 274;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 272;
						multiaction();
						}
						break;
					case 2:
						{
						State = 273;
						stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 278;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 28, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(OPEN);
			State = 281;
			Match(T__10);
			State = 282;
			boolean();
			State = 283;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 30, RULE_multiaction);
		try {
			int _alt;
			State = 309;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				Match(OPEN);
				State = 286;
				Match(T__11);
				State = 287;
				Match(OPEN);
				State = 289;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 288;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 291;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 293;
				Match(CLOSE);
				State = 294;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 296;
				Match(OPEN);
				State = 297;
				Match(T__12);
				State = 298;
				Match(OPEN);
				State = 300;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 299;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 302;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 304;
				Match(CLOSE);
				State = 305;
				Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 307;
				agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 308;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction2(this);
		}
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 32, RULE_multiaction2);
		try {
			int _alt;
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311;
				Match(OPEN);
				State = 312;
				Match(T__12);
				State = 313;
				Match(OPEN);
				State = 315;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 314;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 317;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 319;
				Match(CLOSE);
				State = 320;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322;
				agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 323;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 34, RULE_condact);
		try {
			State = 338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326;
				Match(OPEN);
				State = 327;
				boolean();
				State = 328;
				multiaction2();
				State = 329;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 332;
				Match(OPEN);
				State = 333;
				boolean();
				State = 334;
				action();
				State = 335;
				Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 337;
				action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 36, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			Match(OPEN);
			State = 341;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 342;
			collection();
			State = 343;
			var();
			State = 344;
			condact();
			State = 345;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 38, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347;
			Match(OPEN);
			State = 348;
			Match(T__15);
			State = 349;
			typed();
			State = 350;
			var();
			State = 354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 351;
				multiaction();
				}
				break;
			case 2:
				{
				State = 352;
				action();
				}
				break;
			case 3:
				{
				State = 353;
				condact();
				}
				break;
			}
			State = 356;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetstractionContext setstraction() {
			return GetRuleContext<SetstractionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 40, RULE_action);
		try {
			State = 378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358;
				Match(OPEN);
				State = 373;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 359;
					initpoints();
					}
					break;
				case 2:
					{
					State = 360;
					teamcreate();
					}
					break;
				case 3:
					{
					State = 361;
					deckcreate();
					}
					break;
				case 4:
					{
					State = 362;
					cycleaction();
					}
					break;
				case 5:
					{
					State = 363;
					setaction();
					}
					break;
				case 6:
					{
					State = 364;
					moveaction();
					}
					break;
				case 7:
					{
					State = 365;
					copyaction();
					}
					break;
				case 8:
					{
					State = 366;
					incaction();
					}
					break;
				case 9:
					{
					State = 367;
					setstraction();
					}
					break;
				case 10:
					{
					State = 368;
					decaction();
					}
					break;
				case 11:
					{
					State = 369;
					removeaction();
					}
					break;
				case 12:
					{
					State = 370;
					turnaction();
					}
					break;
				case 13:
					{
					State = 371;
					shuffleaction();
					}
					break;
				case 14:
					{
					State = 372;
					repeat();
					}
					break;
				}
				State = 375;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377;
				agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 42, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(OPEN);
			State = 381;
			Match(T__16);
			State = 382;
			Match(T__17);
			State = 383;
			@int();
			State = 384;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 44, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(OPEN);
			State = 387;
			Match(T__16);
			State = 388;
			Match(T__18);
			State = 390;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 389;
					teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 394;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 46, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			Match(OPEN);
			State = 401;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 397;
					Match(INTNUM);
					State = 398;
					Match(T__19);
					}
					} 
				}
				State = 403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 404;
			Match(INTNUM);
			State = 408;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 405;
					teams();
					}
					} 
				}
				State = 410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 411;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 48, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(T__16);
			State = 414;
			Match(T__20);
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 415;
				str();
				}
				break;
			}
			State = 418;
			cstorage();
			State = 419;
			deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 50, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(OPEN);
			State = 422;
			Match(T__20);
			State = 424;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 423;
					attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 426;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 428;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 52, RULE_attribute);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(OPEN);
			State = 436;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 431;
					namegr();
					State = 432;
					Match(T__19);
					}
					} 
				}
				State = 438;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 439;
			namegr();
			State = 443;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 440;
					attribute();
					}
					} 
				}
				State = 445;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 446;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 54, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(T__21);
			State = 449;
			pointstorage();
			State = 450;
			Match(OPEN);
			State = 452;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 451;
					awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 456;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 56, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 458;
			Match(OPEN);
			State = 460;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 459;
					subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 464;
			@int();
			State = 465;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext[] str() {
			return GetRuleContexts<StrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str(int i) {
			return GetRuleContext<StrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 58, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 467;
			Match(OPEN);
			State = 468;
			str();
			State = 469;
			Match(T__22);
			State = 470;
			str();
			State = 471;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 60, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473;
			Match(T__23);
			State = 474;
			_la = TokenStream.LA(1);
			if ( !(_la==T__24 || _la==T__25) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 480;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN:
				{
				State = 475;
				owner();
				}
				break;
			case T__25:
				{
				State = 476;
				Match(T__25);
				}
				break;
			case T__24:
				{
				State = 477;
				Match(T__24);
				}
				break;
			case T__26:
				{
				State = 478;
				Match(T__26);
				}
				break;
			case T__0:
				{
				State = 479;
				varo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 62, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(T__21);
			State = 483;
			rawstorage();
			State = 484;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetstractionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public SetstractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setstraction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetstraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetstraction(this);
		}
	}

	[RuleVersion(0)]
	public SetstractionContext setstraction() {
		SetstractionContext _localctx = new SetstractionContext(Context, State);
		EnterRule(_localctx, 64, RULE_setstraction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(T__21);
			State = 487;
			strstorage();
			State = 488;
			str();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 66, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(T__27);
			State = 491;
			rawstorage();
			State = 492;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 68, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(T__28);
			State = 495;
			rawstorage();
			State = 496;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 70, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			Match(T__29);
			State = 499;
			card();
			State = 500;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 72, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502;
			Match(T__30);
			State = 503;
			card();
			State = 504;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 74, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 506;
			Match(T__31);
			State = 507;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 76, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(T__32);
			State = 515;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case OPEN:
				{
				State = 510;
				cstorage();
				}
				break;
			case T__33:
				{
				State = 511;
				Match(T__33);
				State = 512;
				cstorage();
				State = 513;
				cstorage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 78, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 517;
			Match(T__34);
			State = 518;
			Match(T__35);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 80, RULE_repeat);
		try {
			State = 534;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				Match(T__36);
				State = 521;
				@int();
				State = 522;
				action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 524;
				Match(T__36);
				State = 525;
				Match(T__14);
				State = 526;
				Match(OPEN);
				State = 530;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__29:
					{
					State = 527;
					moveaction();
					}
					break;
				case T__31:
					{
					State = 528;
					removeaction();
					}
					break;
				case T__30:
					{
					State = 529;
					copyaction();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 532;
				Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public PointstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPointstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPointstorage(this);
		}
	}

	[RuleVersion(0)]
	public PointstorageContext pointstorage() {
		PointstorageContext _localctx = new PointstorageContext(Context, State);
		EnterRule(_localctx, 82, RULE_pointstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536;
			Match(OPEN);
			State = 540;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 537;
				varo();
				}
				break;
			case T__1:
				{
				State = 538;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 539;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 542;
			Match(T__37);
			State = 543;
			str();
			State = 544;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarcardContext varcard() {
			return GetRuleContext<VarcardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 84, RULE_card);
		try {
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 546;
				varcard();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 547;
				maxof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 548;
				minof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 549;
				actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 550;
				Match(OPEN);
				State = 554;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__38:
					{
					State = 551;
					Match(T__38);
					}
					break;
				case T__39:
					{
					State = 552;
					Match(T__39);
					}
					break;
				case T__0:
				case INTNUM:
				case OPEN:
					{
					State = 553;
					@int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 556;
				cstorage();
				State = 557;
				Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 86, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(OPEN);
			State = 562;
			Match(T__40);
			State = 563;
			card();
			State = 564;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 88, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(OPEN);
			State = 567;
			Match(T__6);
			State = 568;
			cstorage();
			State = 569;
			Match(T__41);
			State = 570;
			pointstorage();
			State = 571;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 90, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(OPEN);
			State = 574;
			Match(T__5);
			State = 575;
			cstorage();
			State = 576;
			Match(T__41);
			State = 577;
			pointstorage();
			State = 578;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarpContext varp() {
			return GetRuleContext<VarpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 92, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 580;
				Match(T__1);
				}
				break;
			case T__0:
				{
				State = 581;
				varp();
				}
				break;
			case OPEN:
				{
				State = 582;
				whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 94, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 272678883688448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 96, RULE_who);
		try {
			State = 589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 587;
				whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 588;
				whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 98, RULE_whop);
		try {
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 591;
				Match(OPEN);
				State = 592;
				whodesc();
				State = 593;
				Match(T__8);
				State = 594;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 596;
				owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 100, RULE_whot);
		try {
			State = 605;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 599;
				Match(OPEN);
				State = 600;
				whodesc();
				State = 601;
				Match(T__9);
				State = 602;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 604;
				teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 102, RULE_whodesc);
		try {
			State = 611;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 607;
				@int();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 608;
				Match(T__26);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 609;
				Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 610;
				Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 104, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			Match(OPEN);
			State = 614;
			Match(T__47);
			State = 615;
			card();
			State = 616;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarpContext varp() {
			return GetRuleContext<VarpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 106, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			Match(OPEN);
			State = 619;
			Match(T__9);
			State = 622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 620;
				varp();
				}
				break;
			case OPEN:
				{
				State = 621;
				whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 624;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 108, RULE_typed);
		try {
			State = 630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 626;
				@int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627;
				boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 628;
				str();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 629;
				collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarcContext varc() {
			return GetRuleContext<VarcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 110, RULE_collection);
		try {
			State = 642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 632;
				varc();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 633;
				filter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 634;
				cstorage();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 635;
				strcollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 636;
				cstoragecollection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 637;
				Match(T__8);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 638;
				Match(T__9);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 639;
				whot();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 640;
				other();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 641;
				range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 112, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(OPEN);
			State = 650;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 645;
					namegr();
					State = 646;
					Match(T__19);
					}
					} 
				}
				State = 652;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			State = 653;
			namegr();
			State = 654;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 114, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(OPEN);
			State = 657;
			Match(T__48);
			State = 658;
			@int();
			State = 659;
			Match(T__49);
			State = 660;
			@int();
			State = 661;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 116, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(OPEN);
			State = 664;
			Match(T__50);
			State = 665;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 666;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarcsContext varcs() {
			return GetRuleContext<VarcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntersectofContext intersectof() {
			return GetRuleContext<IntersectofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionofContext disjunctionof() {
			return GetRuleContext<DisjunctionofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortofContext sortof() {
			return GetRuleContext<SortofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceContext sequence() {
			return GetRuleContext<SequenceContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 118, RULE_cstorage);
		try {
			State = 682;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 668;
				varcs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 669;
				unionof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 670;
				intersectof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 671;
				disjunctionof();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 672;
				sortof();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 673;
				filter();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 674;
				Match(OPEN);
				State = 675;
				locpre();
				State = 676;
				locdesc();
				State = 677;
				str();
				State = 678;
				Match(CLOSE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 680;
				memstorage();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 681;
				sequence();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SortofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSortof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSortof(this);
		}
	}

	[RuleVersion(0)]
	public SortofContext sortof() {
		SortofContext _localctx = new SortofContext(Context, State);
		EnterRule(_localctx, 120, RULE_sortof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(OPEN);
			State = 685;
			Match(T__51);
			State = 686;
			cstorage();
			State = 687;
			Match(T__41);
			State = 688;
			pointstorage();
			State = 689;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 122, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(OPEN);
			State = 692;
			Match(T__52);
			State = 699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 693;
				aggcs();
				}
				break;
			case 2:
				{
				State = 695;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 694;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 697;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 701;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntersectofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public IntersectofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intersectof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntersectof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntersectof(this);
		}
	}

	[RuleVersion(0)]
	public IntersectofContext intersectof() {
		IntersectofContext _localctx = new IntersectofContext(Context, State);
		EnterRule(_localctx, 124, RULE_intersectof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(OPEN);
			State = 704;
			Match(T__53);
			State = 711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 705;
				aggcs();
				}
				break;
			case 2:
				{
				State = 707;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 706;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 709;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 713;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public DisjunctionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunctionof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDisjunctionof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDisjunctionof(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionofContext disjunctionof() {
		DisjunctionofContext _localctx = new DisjunctionofContext(Context, State);
		EnterRule(_localctx, 126, RULE_disjunctionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			Match(OPEN);
			State = 716;
			Match(T__54);
			State = 723;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 717;
				aggcs();
				}
				break;
			case 2:
				{
				State = 719;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 718;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 721;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 725;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 128, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(OPEN);
			State = 728;
			Match(T__55);
			State = 729;
			collection();
			State = 730;
			var();
			State = 731;
			boolean();
			State = 732;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 130, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			Match(OPEN);
			State = 738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__38:
				{
				State = 735;
				Match(T__38);
				}
				break;
			case T__39:
				{
				State = 736;
				Match(T__39);
				}
				break;
			case T__0:
			case INTNUM:
			case OPEN:
				{
				State = 737;
				@int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 740;
			memset();
			State = 741;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSequence(this);
		}
	}

	[RuleVersion(0)]
	public SequenceContext sequence() {
		SequenceContext _localctx = new SequenceContext(Context, State);
		EnterRule(_localctx, 132, RULE_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			Match(OPEN);
			State = 744;
			_la = TokenStream.LA(1);
			if ( !(_la==T__38 || _la==T__39) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 745;
			@int();
			State = 746;
			cstorage();
			State = 747;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 134, RULE_cstoragecollection);
		try {
			State = 752;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 749;
				memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				aggcs();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 751;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionContext partition() {
			return GetRuleContext<PartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubsetContext subset() {
			return GetRuleContext<SubsetContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 136, RULE_memset);
		try {
			State = 757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 754;
				tuple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 755;
				partition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 756;
				subset();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_run; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRun(this);
		}
	}

	[RuleVersion(0)]
	public RunContext run() {
		RunContext _localctx = new RunContext(Context, State);
		EnterRule(_localctx, 138, RULE_run);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			Match(OPEN);
			State = 760;
			Match(T__56);
			State = 761;
			cstorage();
			State = 762;
			Match(T__41);
			State = 763;
			pointstorage();
			State = 764;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubset(this);
		}
	}

	[RuleVersion(0)]
	public SubsetContext subset() {
		SubsetContext _localctx = new SubsetContext(Context, State);
		EnterRule(_localctx, 140, RULE_subset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 766;
			Match(OPEN);
			State = 767;
			Match(T__57);
			State = 768;
			cstorage();
			State = 769;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 142, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			Match(OPEN);
			State = 772;
			Match(T__58);
			State = 773;
			@int();
			State = 774;
			cstorage();
			State = 775;
			Match(T__41);
			State = 776;
			pointstorage();
			State = 777;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public PartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPartition(this);
		}
	}

	[RuleVersion(0)]
	public PartitionContext partition() {
		PartitionContext _localctx = new PartitionContext(Context, State);
		EnterRule(_localctx, 144, RULE_partition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			Match(OPEN);
			State = 780;
			Match(T__59);
			State = 802;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case LETT:
			case OPEN:
				{
				{
				State = 781;
				str();
				State = 788;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 782;
					aggcs();
					}
					break;
				case 2:
					{
					State = 784;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 783;
							cstorage();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 786;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				}
				break;
			case T__56:
				{
				{
				State = 790;
				Match(T__56);
				State = 797;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 791;
					aggcs();
					}
					break;
				case 2:
					{
					State = 793;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 792;
							cstorage();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 795;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				State = 799;
				Match(T__41);
				State = 800;
				pointstorage();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 804;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggcsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggcsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggcs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAggcs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAggcs(this);
		}
	}

	[RuleVersion(0)]
	public AggcsContext aggcs() {
		AggcsContext _localctx = new AggcsContext(Context, State);
		EnterRule(_localctx, 146, RULE_aggcs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			Match(OPEN);
			State = 807;
			Match(T__14);
			State = 808;
			collection();
			State = 809;
			var();
			State = 810;
			cstorage();
			State = 811;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext[] str() {
			return GetRuleContexts<StrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str(int i) {
			return GetRuleContext<StrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggbContext aggb() {
			return GetRuleContext<AggbContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 148, RULE_boolean);
		try {
			int _alt;
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 813;
				Match(OPEN);
				State = 843;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 814;
					Match(BOOLOP);
					State = 815;
					boolean();
					State = 817;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 816;
							boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 819;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 2:
					{
					State = 821;
					intop();
					State = 822;
					@int();
					State = 823;
					@int();
					}
					break;
				case 3:
					{
					State = 825;
					Match(EQOP);
					State = 826;
					str();
					State = 827;
					str();
					}
					break;
				case 4:
					{
					State = 829;
					Match(EQOP);
					State = 830;
					card();
					State = 831;
					card();
					}
					break;
				case 5:
					{
					State = 833;
					Match(UNOP);
					State = 834;
					boolean();
					}
					break;
				case 6:
					{
					State = 835;
					Match(EQOP);
					State = 836;
					whop();
					State = 837;
					whop();
					}
					break;
				case 7:
					{
					State = 839;
					Match(EQOP);
					State = 840;
					whot();
					State = 841;
					whot();
					}
					break;
				}
				State = 845;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 847;
				aggb();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 150, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			_la = TokenStream.LA(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAggb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAggb(this);
		}
	}

	[RuleVersion(0)]
	public AggbContext aggb() {
		AggbContext _localctx = new AggbContext(Context, State);
		EnterRule(_localctx, 152, RULE_aggb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 852;
			Match(OPEN);
			State = 853;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 854;
			collection();
			State = 855;
			var();
			State = 856;
			boolean();
			State = 857;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariContext vari() {
			return GetRuleContext<VariContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriangularContext triangular() {
			return GetRuleContext<TriangularContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FibonacciContext fibonacci() {
			return GetRuleContext<FibonacciContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomContext random() {
			return GetRuleContext<RandomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 154, RULE_int);
		try {
			int _alt;
			State = 878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 859;
				vari();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 860;
				@sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 861;
				mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 862;
				subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 863;
				mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 864;
				add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 865;
				divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 866;
				exponent();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 867;
				triangular();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 868;
				fibonacci();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 869;
				random();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 870;
				sum();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 871;
				rawstorage();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 872;
				score();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 874;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 873;
						Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 876;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 156, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880;
			Match(OPEN);
			State = 881;
			Match(T__60);
			State = 882;
			cstorage();
			State = 883;
			Match(T__41);
			State = 884;
			pointstorage();
			State = 885;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 158, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			Match(OPEN);
			State = 888;
			Match(T__61);
			State = 889;
			card();
			State = 890;
			Match(T__41);
			State = 891;
			pointstorage();
			State = 892;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 160, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 894;
			Match(OPEN);
			State = 895;
			Match(T__62);
			State = 896;
			@int();
			State = 897;
			@int();
			State = 898;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 162, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			Match(OPEN);
			State = 901;
			Match(T__63);
			State = 902;
			@int();
			State = 903;
			@int();
			State = 904;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 164, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906;
			Match(OPEN);
			State = 907;
			Match(T__64);
			State = 908;
			@int();
			State = 909;
			@int();
			State = 910;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 166, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912;
			Match(OPEN);
			State = 913;
			Match(T__65);
			State = 914;
			@int();
			State = 915;
			@int();
			State = 916;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 168, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(OPEN);
			State = 919;
			Match(T__66);
			State = 920;
			@int();
			State = 921;
			@int();
			State = 922;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 170, RULE_exponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924;
			Match(OPEN);
			State = 925;
			Match(T__67);
			State = 926;
			@int();
			State = 927;
			@int();
			State = 928;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriangularContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TriangularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triangular; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTriangular(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTriangular(this);
		}
	}

	[RuleVersion(0)]
	public TriangularContext triangular() {
		TriangularContext _localctx = new TriangularContext(Context, State);
		EnterRule(_localctx, 172, RULE_triangular);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(OPEN);
			State = 931;
			Match(T__68);
			State = 932;
			@int();
			State = 933;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FibonacciContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FibonacciContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fibonacci; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFibonacci(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFibonacci(this);
		}
	}

	[RuleVersion(0)]
	public FibonacciContext fibonacci() {
		FibonacciContext _localctx = new FibonacciContext(Context, State);
		EnterRule(_localctx, 174, RULE_fibonacci);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 935;
			Match(OPEN);
			State = 936;
			Match(T__69);
			State = 937;
			@int();
			State = 938;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RandomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_random; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRandom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRandom(this);
		}
	}

	[RuleVersion(0)]
	public RandomContext random() {
		RandomContext _localctx = new RandomContext(Context, State);
		EnterRule(_localctx, 176, RULE_random);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 940;
			Match(OPEN);
			State = 941;
			Match(T__70);
			State = 942;
			@int();
			State = 945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__49) {
				{
				State = 943;
				Match(T__49);
				State = 944;
				@int();
				}
			}

			State = 947;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 178, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949;
			Match(OPEN);
			State = 950;
			Match(T__71);
			State = 951;
			collection();
			State = 952;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAggi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAggi(this);
		}
	}

	[RuleVersion(0)]
	public AggiContext aggi() {
		AggiContext _localctx = new AggiContext(Context, State);
		EnterRule(_localctx, 180, RULE_aggi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954;
			Match(OPEN);
			State = 955;
			Match(T__14);
			State = 956;
			collection();
			State = 957;
			var();
			State = 958;
			rawstorage();
			State = 959;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 182, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			Match(OPEN);
			State = 965;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 962;
				varo();
				}
				break;
			case T__1:
				{
				State = 963;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 964;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 967;
			Match(T__72);
			State = 968;
			str();
			State = 969;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarsContext vars() {
			return GetRuleContext<VarsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(Context, State);
		EnterRule(_localctx, 184, RULE_str);
		try {
			State = 975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 971;
				namegr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 972;
				strstorage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 973;
				vars();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 974;
				cardatt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public StrstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrstorage(this);
		}
	}

	[RuleVersion(0)]
	public StrstorageContext strstorage() {
		StrstorageContext _localctx = new StrstorageContext(Context, State);
		EnterRule(_localctx, 186, RULE_strstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977;
			Match(OPEN);
			State = 981;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 978;
				varo();
				}
				break;
			case T__1:
				{
				State = 979;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 980;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 983;
			Match(T__73);
			State = 984;
			str();
			State = 985;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 188, RULE_cardatt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 987;
			Match(OPEN);
			State = 988;
			Match(T__74);
			State = 989;
			str();
			State = 990;
			card();
			State = 991;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 190, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 994;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 993;
					Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 996;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,85,999,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,
		2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,
		1,8,1,8,1,9,1,9,1,9,5,9,223,8,9,10,9,12,9,226,9,9,1,9,1,9,1,9,4,9,231,
		8,9,11,9,12,9,232,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
		1,11,1,11,3,11,248,8,11,1,11,1,11,1,11,3,11,253,8,11,1,11,1,11,4,11,257,
		8,11,11,11,12,11,258,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
		1,13,1,13,1,13,1,13,4,13,275,8,13,11,13,12,13,276,1,13,1,13,1,14,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,1,15,4,15,290,8,15,11,15,12,15,291,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,4,15,301,8,15,11,15,12,15,302,1,15,1,15,
		1,15,1,15,1,15,3,15,310,8,15,1,16,1,16,1,16,1,16,4,16,316,8,16,11,16,12,
		16,317,1,16,1,16,1,16,1,16,1,16,3,16,325,8,16,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,339,8,17,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,355,8,19,1,19,1,19,
		1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,3,20,374,8,20,1,20,1,20,1,20,3,20,379,8,20,1,21,1,21,1,21,1,21,1,
		21,1,21,1,22,1,22,1,22,1,22,4,22,391,8,22,11,22,12,22,392,1,22,1,22,1,
		23,1,23,1,23,5,23,400,8,23,10,23,12,23,403,9,23,1,23,1,23,5,23,407,8,23,
		10,23,12,23,410,9,23,1,23,1,23,1,24,1,24,1,24,3,24,417,8,24,1,24,1,24,
		1,24,1,25,1,25,1,25,4,25,425,8,25,11,25,12,25,426,1,25,1,25,1,26,1,26,
		1,26,1,26,5,26,435,8,26,10,26,12,26,438,9,26,1,26,1,26,5,26,442,8,26,10,
		26,12,26,445,9,26,1,26,1,26,1,27,1,27,1,27,1,27,4,27,453,8,27,11,27,12,
		27,454,1,27,1,27,1,28,1,28,4,28,461,8,28,11,28,12,28,462,1,28,1,28,1,28,
		1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,
		481,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
		34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,
		37,1,38,1,38,1,38,1,38,1,38,1,38,3,38,516,8,38,1,39,1,39,1,39,1,40,1,40,
		1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,531,8,40,1,40,1,40,3,40,535,
		8,40,1,41,1,41,1,41,1,41,3,41,541,8,41,1,41,1,41,1,41,1,41,1,42,1,42,1,
		42,1,42,1,42,1,42,1,42,1,42,3,42,555,8,42,1,42,1,42,1,42,3,42,560,8,42,
		1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,
		1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,584,8,46,1,47,1,47,1,48,1,
		48,3,48,590,8,48,1,49,1,49,1,49,1,49,1,49,1,49,3,49,598,8,49,1,50,1,50,
		1,50,1,50,1,50,1,50,3,50,606,8,50,1,51,1,51,1,51,1,51,3,51,612,8,51,1,
		52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,3,53,623,8,53,1,53,1,53,1,54,
		1,54,1,54,1,54,3,54,631,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
		55,1,55,3,55,643,8,55,1,56,1,56,1,56,1,56,5,56,649,8,56,10,56,12,56,652,
		9,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,
		1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
		1,59,1,59,3,59,683,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,
		61,1,61,4,61,696,8,61,11,61,12,61,697,3,61,700,8,61,1,61,1,61,1,62,1,62,
		1,62,1,62,4,62,708,8,62,11,62,12,62,709,3,62,712,8,62,1,62,1,62,1,63,1,
		63,1,63,1,63,4,63,720,8,63,11,63,12,63,721,3,63,724,8,63,1,63,1,63,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,3,65,739,8,65,1,65,1,
		65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,3,67,753,8,67,1,68,
		1,68,1,68,3,68,758,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,
		70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,
		72,1,72,4,72,785,8,72,11,72,12,72,786,3,72,789,8,72,1,72,1,72,1,72,4,72,
		794,8,72,11,72,12,72,795,3,72,798,8,72,1,72,1,72,1,72,3,72,803,8,72,1,
		72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,4,74,818,
		8,74,11,74,12,74,819,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,844,8,
		74,1,74,1,74,1,74,3,74,849,8,74,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,
		1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,4,77,875,8,77,11,77,12,77,876,3,77,879,8,77,1,78,1,78,1,78,1,
		78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,
		80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,
		82,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,
		85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,
		87,1,88,1,88,1,88,1,88,1,88,3,88,946,8,88,1,88,1,88,1,89,1,89,1,89,1,89,
		1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,3,91,966,8,
		91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,3,92,976,8,92,1,93,1,93,1,93,
		1,93,3,93,982,8,93,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,
		95,4,95,995,8,95,11,95,12,95,996,1,95,22,224,232,258,276,291,302,317,392,
		401,408,426,436,443,454,462,650,697,709,721,786,795,819,0,96,0,2,4,6,8,
		10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
		58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
		104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
		140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
		176,178,180,182,184,186,188,190,0,7,1,0,6,7,1,0,9,10,1,0,14,15,1,0,25,
		26,1,0,43,47,1,0,39,40,1,0,77,78,1041,0,192,1,0,0,0,2,195,1,0,0,0,4,198,
		1,0,0,0,6,201,1,0,0,0,8,204,1,0,0,0,10,207,1,0,0,0,12,210,1,0,0,0,14,213,
		1,0,0,0,16,216,1,0,0,0,18,219,1,0,0,0,20,237,1,0,0,0,22,243,1,0,0,0,24,
		262,1,0,0,0,26,268,1,0,0,0,28,280,1,0,0,0,30,309,1,0,0,0,32,324,1,0,0,
		0,34,338,1,0,0,0,36,340,1,0,0,0,38,347,1,0,0,0,40,378,1,0,0,0,42,380,1,
		0,0,0,44,386,1,0,0,0,46,396,1,0,0,0,48,413,1,0,0,0,50,421,1,0,0,0,52,430,
		1,0,0,0,54,448,1,0,0,0,56,458,1,0,0,0,58,467,1,0,0,0,60,473,1,0,0,0,62,
		482,1,0,0,0,64,486,1,0,0,0,66,490,1,0,0,0,68,494,1,0,0,0,70,498,1,0,0,
		0,72,502,1,0,0,0,74,506,1,0,0,0,76,509,1,0,0,0,78,517,1,0,0,0,80,534,1,
		0,0,0,82,536,1,0,0,0,84,559,1,0,0,0,86,561,1,0,0,0,88,566,1,0,0,0,90,573,
		1,0,0,0,92,583,1,0,0,0,94,585,1,0,0,0,96,589,1,0,0,0,98,597,1,0,0,0,100,
		605,1,0,0,0,102,611,1,0,0,0,104,613,1,0,0,0,106,618,1,0,0,0,108,630,1,
		0,0,0,110,642,1,0,0,0,112,644,1,0,0,0,114,656,1,0,0,0,116,663,1,0,0,0,
		118,682,1,0,0,0,120,684,1,0,0,0,122,691,1,0,0,0,124,703,1,0,0,0,126,715,
		1,0,0,0,128,727,1,0,0,0,130,734,1,0,0,0,132,743,1,0,0,0,134,752,1,0,0,
		0,136,757,1,0,0,0,138,759,1,0,0,0,140,766,1,0,0,0,142,771,1,0,0,0,144,
		779,1,0,0,0,146,806,1,0,0,0,148,848,1,0,0,0,150,850,1,0,0,0,152,852,1,
		0,0,0,154,878,1,0,0,0,156,880,1,0,0,0,158,887,1,0,0,0,160,894,1,0,0,0,
		162,900,1,0,0,0,164,906,1,0,0,0,166,912,1,0,0,0,168,918,1,0,0,0,170,924,
		1,0,0,0,172,930,1,0,0,0,174,935,1,0,0,0,176,940,1,0,0,0,178,949,1,0,0,
		0,180,954,1,0,0,0,182,961,1,0,0,0,184,975,1,0,0,0,186,977,1,0,0,0,188,
		987,1,0,0,0,190,994,1,0,0,0,192,193,5,1,0,0,193,194,3,190,95,0,194,1,1,
		0,0,0,195,196,5,1,0,0,196,197,3,190,95,0,197,3,1,0,0,0,198,199,5,1,0,0,
		199,200,3,190,95,0,200,5,1,0,0,0,201,202,5,1,0,0,202,203,3,190,95,0,203,
		7,1,0,0,0,204,205,5,1,0,0,205,206,3,190,95,0,206,9,1,0,0,0,207,208,5,1,
		0,0,208,209,3,190,95,0,209,11,1,0,0,0,210,211,5,1,0,0,211,212,3,190,95,
		0,212,13,1,0,0,0,213,214,5,1,0,0,214,215,3,190,95,0,215,15,1,0,0,0,216,
		217,5,1,0,0,217,218,3,190,95,0,218,17,1,0,0,0,219,220,5,82,0,0,220,224,
		5,2,0,0,221,223,3,20,10,0,222,221,1,0,0,0,223,226,1,0,0,0,224,225,1,0,
		0,0,224,222,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,230,3,22,11,0,
		228,231,3,30,15,0,229,231,3,26,13,0,230,228,1,0,0,0,230,229,1,0,0,0,231,
		232,1,0,0,0,232,233,1,0,0,0,232,230,1,0,0,0,233,234,1,0,0,0,234,235,3,
		24,12,0,235,236,5,83,0,0,236,19,1,0,0,0,237,238,5,82,0,0,238,239,5,3,0,
		0,239,240,3,108,54,0,240,241,3,0,0,0,241,242,5,83,0,0,242,21,1,0,0,0,243,
		244,5,82,0,0,244,245,5,4,0,0,245,247,3,42,21,0,246,248,3,44,22,0,247,246,
		1,0,0,0,247,248,1,0,0,0,248,256,1,0,0,0,249,252,5,82,0,0,250,253,3,48,
		24,0,251,253,3,80,40,0,252,250,1,0,0,0,252,251,1,0,0,0,253,254,1,0,0,0,
		254,255,5,83,0,0,255,257,1,0,0,0,256,249,1,0,0,0,257,258,1,0,0,0,258,259,
		1,0,0,0,258,256,1,0,0,0,259,260,1,0,0,0,260,261,5,83,0,0,261,23,1,0,0,
		0,262,263,5,82,0,0,263,264,5,5,0,0,264,265,7,0,0,0,265,266,3,154,77,0,
		266,267,5,83,0,0,267,25,1,0,0,0,268,269,5,82,0,0,269,270,5,8,0,0,270,271,
		7,1,0,0,271,274,3,28,14,0,272,275,3,30,15,0,273,275,3,26,13,0,274,272,
		1,0,0,0,274,273,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,276,274,1,0,0,
		0,277,278,1,0,0,0,278,279,5,83,0,0,279,27,1,0,0,0,280,281,5,82,0,0,281,
		282,5,11,0,0,282,283,3,148,74,0,283,284,5,83,0,0,284,29,1,0,0,0,285,286,
		5,82,0,0,286,287,5,12,0,0,287,289,5,82,0,0,288,290,3,34,17,0,289,288,1,
		0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,291,289,1,0,0,0,292,293,1,0,0,0,
		293,294,5,83,0,0,294,295,5,83,0,0,295,310,1,0,0,0,296,297,5,82,0,0,297,
		298,5,13,0,0,298,300,5,82,0,0,299,301,3,34,17,0,300,299,1,0,0,0,301,302,
		1,0,0,0,302,303,1,0,0,0,302,300,1,0,0,0,303,304,1,0,0,0,304,305,5,83,0,
		0,305,306,5,83,0,0,306,310,1,0,0,0,307,310,3,36,18,0,308,310,3,38,19,0,
		309,285,1,0,0,0,309,296,1,0,0,0,309,307,1,0,0,0,309,308,1,0,0,0,310,31,
		1,0,0,0,311,312,5,82,0,0,312,313,5,13,0,0,313,315,5,82,0,0,314,316,3,34,
		17,0,315,314,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,317,315,1,0,0,0,318,
		319,1,0,0,0,319,320,5,83,0,0,320,321,5,83,0,0,321,325,1,0,0,0,322,325,
		3,36,18,0,323,325,3,38,19,0,324,311,1,0,0,0,324,322,1,0,0,0,324,323,1,
		0,0,0,325,33,1,0,0,0,326,327,5,82,0,0,327,328,3,148,74,0,328,329,3,32,
		16,0,329,330,5,83,0,0,330,339,1,0,0,0,331,339,3,32,16,0,332,333,5,82,0,
		0,333,334,3,148,74,0,334,335,3,40,20,0,335,336,5,83,0,0,336,339,1,0,0,
		0,337,339,3,40,20,0,338,326,1,0,0,0,338,331,1,0,0,0,338,332,1,0,0,0,338,
		337,1,0,0,0,339,35,1,0,0,0,340,341,5,82,0,0,341,342,7,2,0,0,342,343,3,
		110,55,0,343,344,3,0,0,0,344,345,3,34,17,0,345,346,5,83,0,0,346,37,1,0,
		0,0,347,348,5,82,0,0,348,349,5,16,0,0,349,350,3,108,54,0,350,354,3,0,0,
		0,351,355,3,30,15,0,352,355,3,40,20,0,353,355,3,34,17,0,354,351,1,0,0,
		0,354,352,1,0,0,0,354,353,1,0,0,0,355,356,1,0,0,0,356,357,5,83,0,0,357,
		39,1,0,0,0,358,373,5,82,0,0,359,374,3,54,27,0,360,374,3,44,22,0,361,374,
		3,48,24,0,362,374,3,60,30,0,363,374,3,62,31,0,364,374,3,70,35,0,365,374,
		3,72,36,0,366,374,3,66,33,0,367,374,3,64,32,0,368,374,3,68,34,0,369,374,
		3,74,37,0,370,374,3,78,39,0,371,374,3,76,38,0,372,374,3,80,40,0,373,359,
		1,0,0,0,373,360,1,0,0,0,373,361,1,0,0,0,373,362,1,0,0,0,373,363,1,0,0,
		0,373,364,1,0,0,0,373,365,1,0,0,0,373,366,1,0,0,0,373,367,1,0,0,0,373,
		368,1,0,0,0,373,369,1,0,0,0,373,370,1,0,0,0,373,371,1,0,0,0,373,372,1,
		0,0,0,374,375,1,0,0,0,375,376,5,83,0,0,376,379,1,0,0,0,377,379,3,36,18,
		0,378,358,1,0,0,0,378,377,1,0,0,0,379,41,1,0,0,0,380,381,5,82,0,0,381,
		382,5,17,0,0,382,383,5,18,0,0,383,384,3,154,77,0,384,385,5,83,0,0,385,
		43,1,0,0,0,386,387,5,82,0,0,387,388,5,17,0,0,388,390,5,19,0,0,389,391,
		3,46,23,0,390,389,1,0,0,0,391,392,1,0,0,0,392,393,1,0,0,0,392,390,1,0,
		0,0,393,394,1,0,0,0,394,395,5,83,0,0,395,45,1,0,0,0,396,401,5,82,0,0,397,
		398,5,80,0,0,398,400,5,20,0,0,399,397,1,0,0,0,400,403,1,0,0,0,401,402,
		1,0,0,0,401,399,1,0,0,0,402,404,1,0,0,0,403,401,1,0,0,0,404,408,5,80,0,
		0,405,407,3,46,23,0,406,405,1,0,0,0,407,410,1,0,0,0,408,409,1,0,0,0,408,
		406,1,0,0,0,409,411,1,0,0,0,410,408,1,0,0,0,411,412,5,83,0,0,412,47,1,
		0,0,0,413,414,5,17,0,0,414,416,5,21,0,0,415,417,3,184,92,0,416,415,1,0,
		0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,3,118,59,0,419,420,3,50,25,
		0,420,49,1,0,0,0,421,422,5,82,0,0,422,424,5,21,0,0,423,425,3,52,26,0,424,
		423,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,426,424,1,0,0,0,427,428,1,
		0,0,0,428,429,5,83,0,0,429,51,1,0,0,0,430,436,5,82,0,0,431,432,3,190,95,
		0,432,433,5,20,0,0,433,435,1,0,0,0,434,431,1,0,0,0,435,438,1,0,0,0,436,
		437,1,0,0,0,436,434,1,0,0,0,437,439,1,0,0,0,438,436,1,0,0,0,439,443,3,
		190,95,0,440,442,3,52,26,0,441,440,1,0,0,0,442,445,1,0,0,0,443,444,1,0,
		0,0,443,441,1,0,0,0,444,446,1,0,0,0,445,443,1,0,0,0,446,447,5,83,0,0,447,
		53,1,0,0,0,448,449,5,22,0,0,449,450,3,82,41,0,450,452,5,82,0,0,451,453,
		3,56,28,0,452,451,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,454,452,1,0,
		0,0,455,456,1,0,0,0,456,457,5,83,0,0,457,55,1,0,0,0,458,460,5,82,0,0,459,
		461,3,58,29,0,460,459,1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,462,460,
		1,0,0,0,463,464,1,0,0,0,464,465,3,154,77,0,465,466,5,83,0,0,466,57,1,0,
		0,0,467,468,5,82,0,0,468,469,3,184,92,0,469,470,5,23,0,0,470,471,3,184,
		92,0,471,472,5,83,0,0,472,59,1,0,0,0,473,474,5,24,0,0,474,480,7,3,0,0,
		475,481,3,104,52,0,476,481,5,26,0,0,477,481,5,25,0,0,478,481,5,27,0,0,
		479,481,3,4,2,0,480,475,1,0,0,0,480,476,1,0,0,0,480,477,1,0,0,0,480,478,
		1,0,0,0,480,479,1,0,0,0,481,61,1,0,0,0,482,483,5,22,0,0,483,484,3,182,
		91,0,484,485,3,154,77,0,485,63,1,0,0,0,486,487,5,22,0,0,487,488,3,186,
		93,0,488,489,3,184,92,0,489,65,1,0,0,0,490,491,5,28,0,0,491,492,3,182,
		91,0,492,493,3,154,77,0,493,67,1,0,0,0,494,495,5,29,0,0,495,496,3,182,
		91,0,496,497,3,154,77,0,497,69,1,0,0,0,498,499,5,30,0,0,499,500,3,84,42,
		0,500,501,3,84,42,0,501,71,1,0,0,0,502,503,5,31,0,0,503,504,3,84,42,0,
		504,505,3,84,42,0,505,73,1,0,0,0,506,507,5,32,0,0,507,508,3,84,42,0,508,
		75,1,0,0,0,509,515,5,33,0,0,510,516,3,118,59,0,511,512,5,34,0,0,512,513,
		3,118,59,0,513,514,3,118,59,0,514,516,1,0,0,0,515,510,1,0,0,0,515,511,
		1,0,0,0,516,77,1,0,0,0,517,518,5,35,0,0,518,519,5,36,0,0,519,79,1,0,0,
		0,520,521,5,37,0,0,521,522,3,154,77,0,522,523,3,40,20,0,523,535,1,0,0,
		0,524,525,5,37,0,0,525,526,5,15,0,0,526,530,5,82,0,0,527,531,3,70,35,0,
		528,531,3,74,37,0,529,531,3,72,36,0,530,527,1,0,0,0,530,528,1,0,0,0,530,
		529,1,0,0,0,531,532,1,0,0,0,532,533,5,83,0,0,533,535,1,0,0,0,534,520,1,
		0,0,0,534,524,1,0,0,0,535,81,1,0,0,0,536,540,5,82,0,0,537,541,3,4,2,0,
		538,541,5,2,0,0,539,541,3,96,48,0,540,537,1,0,0,0,540,538,1,0,0,0,540,
		539,1,0,0,0,541,542,1,0,0,0,542,543,5,38,0,0,543,544,3,184,92,0,544,545,
		5,83,0,0,545,83,1,0,0,0,546,560,3,16,8,0,547,560,3,88,44,0,548,560,3,90,
		45,0,549,560,3,86,43,0,550,554,5,82,0,0,551,555,5,39,0,0,552,555,5,40,
		0,0,553,555,3,154,77,0,554,551,1,0,0,0,554,552,1,0,0,0,554,553,1,0,0,0,
		555,556,1,0,0,0,556,557,3,118,59,0,557,558,5,83,0,0,558,560,1,0,0,0,559,
		546,1,0,0,0,559,547,1,0,0,0,559,548,1,0,0,0,559,549,1,0,0,0,559,550,1,
		0,0,0,560,85,1,0,0,0,561,562,5,82,0,0,562,563,5,41,0,0,563,564,3,84,42,
		0,564,565,5,83,0,0,565,87,1,0,0,0,566,567,5,82,0,0,567,568,5,7,0,0,568,
		569,3,118,59,0,569,570,5,42,0,0,570,571,3,82,41,0,571,572,5,83,0,0,572,
		89,1,0,0,0,573,574,5,82,0,0,574,575,5,6,0,0,575,576,3,118,59,0,576,577,
		5,42,0,0,577,578,3,82,41,0,578,579,5,83,0,0,579,91,1,0,0,0,580,584,5,2,
		0,0,581,584,3,6,3,0,582,584,3,98,49,0,583,580,1,0,0,0,583,581,1,0,0,0,
		583,582,1,0,0,0,584,93,1,0,0,0,585,586,7,4,0,0,586,95,1,0,0,0,587,590,
		3,100,50,0,588,590,3,98,49,0,589,587,1,0,0,0,589,588,1,0,0,0,590,97,1,
		0,0,0,591,592,5,82,0,0,592,593,3,102,51,0,593,594,5,9,0,0,594,595,5,83,
		0,0,595,598,1,0,0,0,596,598,3,104,52,0,597,591,1,0,0,0,597,596,1,0,0,0,
		598,99,1,0,0,0,599,600,5,82,0,0,600,601,3,102,51,0,601,602,5,10,0,0,602,
		603,5,83,0,0,603,606,1,0,0,0,604,606,3,106,53,0,605,599,1,0,0,0,605,604,
		1,0,0,0,606,101,1,0,0,0,607,612,3,154,77,0,608,612,5,27,0,0,609,612,5,
		25,0,0,610,612,5,26,0,0,611,607,1,0,0,0,611,608,1,0,0,0,611,609,1,0,0,
		0,611,610,1,0,0,0,612,103,1,0,0,0,613,614,5,82,0,0,614,615,5,48,0,0,615,
		616,3,84,42,0,616,617,5,83,0,0,617,105,1,0,0,0,618,619,5,82,0,0,619,622,
		5,10,0,0,620,623,3,6,3,0,621,623,3,98,49,0,622,620,1,0,0,0,622,621,1,0,
		0,0,623,624,1,0,0,0,624,625,5,83,0,0,625,107,1,0,0,0,626,631,3,154,77,
		0,627,631,3,148,74,0,628,631,3,184,92,0,629,631,3,110,55,0,630,626,1,0,
		0,0,630,627,1,0,0,0,630,628,1,0,0,0,630,629,1,0,0,0,631,109,1,0,0,0,632,
		643,3,12,6,0,633,643,3,128,64,0,634,643,3,118,59,0,635,643,3,112,56,0,
		636,643,3,134,67,0,637,643,5,9,0,0,638,643,5,10,0,0,639,643,3,100,50,0,
		640,643,3,116,58,0,641,643,3,114,57,0,642,632,1,0,0,0,642,633,1,0,0,0,
		642,634,1,0,0,0,642,635,1,0,0,0,642,636,1,0,0,0,642,637,1,0,0,0,642,638,
		1,0,0,0,642,639,1,0,0,0,642,640,1,0,0,0,642,641,1,0,0,0,643,111,1,0,0,
		0,644,650,5,82,0,0,645,646,3,190,95,0,646,647,5,20,0,0,647,649,1,0,0,0,
		648,645,1,0,0,0,649,652,1,0,0,0,650,651,1,0,0,0,650,648,1,0,0,0,651,653,
		1,0,0,0,652,650,1,0,0,0,653,654,3,190,95,0,654,655,5,83,0,0,655,113,1,
		0,0,0,656,657,5,82,0,0,657,658,5,49,0,0,658,659,3,154,77,0,659,660,5,50,
		0,0,660,661,3,154,77,0,661,662,5,83,0,0,662,115,1,0,0,0,663,664,5,82,0,
		0,664,665,5,51,0,0,665,666,7,1,0,0,666,667,5,83,0,0,667,117,1,0,0,0,668,
		683,3,14,7,0,669,683,3,122,61,0,670,683,3,124,62,0,671,683,3,126,63,0,
		672,683,3,120,60,0,673,683,3,128,64,0,674,675,5,82,0,0,675,676,3,92,46,
		0,676,677,3,94,47,0,677,678,3,184,92,0,678,679,5,83,0,0,679,683,1,0,0,
		0,680,683,3,130,65,0,681,683,3,132,66,0,682,668,1,0,0,0,682,669,1,0,0,
		0,682,670,1,0,0,0,682,671,1,0,0,0,682,672,1,0,0,0,682,673,1,0,0,0,682,
		674,1,0,0,0,682,680,1,0,0,0,682,681,1,0,0,0,683,119,1,0,0,0,684,685,5,
		82,0,0,685,686,5,52,0,0,686,687,3,118,59,0,687,688,5,42,0,0,688,689,3,
		82,41,0,689,690,5,83,0,0,690,121,1,0,0,0,691,692,5,82,0,0,692,699,5,53,
		0,0,693,700,3,146,73,0,694,696,3,118,59,0,695,694,1,0,0,0,696,697,1,0,
		0,0,697,698,1,0,0,0,697,695,1,0,0,0,698,700,1,0,0,0,699,693,1,0,0,0,699,
		695,1,0,0,0,700,701,1,0,0,0,701,702,5,83,0,0,702,123,1,0,0,0,703,704,5,
		82,0,0,704,711,5,54,0,0,705,712,3,146,73,0,706,708,3,118,59,0,707,706,
		1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,709,707,1,0,0,0,710,712,1,0,0,
		0,711,705,1,0,0,0,711,707,1,0,0,0,712,713,1,0,0,0,713,714,5,83,0,0,714,
		125,1,0,0,0,715,716,5,82,0,0,716,723,5,55,0,0,717,724,3,146,73,0,718,720,
		3,118,59,0,719,718,1,0,0,0,720,721,1,0,0,0,721,722,1,0,0,0,721,719,1,0,
		0,0,722,724,1,0,0,0,723,717,1,0,0,0,723,719,1,0,0,0,724,725,1,0,0,0,725,
		726,5,83,0,0,726,127,1,0,0,0,727,728,5,82,0,0,728,729,5,56,0,0,729,730,
		3,110,55,0,730,731,3,0,0,0,731,732,3,148,74,0,732,733,5,83,0,0,733,129,
		1,0,0,0,734,738,5,82,0,0,735,739,5,39,0,0,736,739,5,40,0,0,737,739,3,154,
		77,0,738,735,1,0,0,0,738,736,1,0,0,0,738,737,1,0,0,0,739,740,1,0,0,0,740,
		741,3,136,68,0,741,742,5,83,0,0,742,131,1,0,0,0,743,744,5,82,0,0,744,745,
		7,5,0,0,745,746,3,154,77,0,746,747,3,118,59,0,747,748,5,83,0,0,748,133,
		1,0,0,0,749,753,3,136,68,0,750,753,3,146,73,0,751,753,3,38,19,0,752,749,
		1,0,0,0,752,750,1,0,0,0,752,751,1,0,0,0,753,135,1,0,0,0,754,758,3,142,
		71,0,755,758,3,144,72,0,756,758,3,140,70,0,757,754,1,0,0,0,757,755,1,0,
		0,0,757,756,1,0,0,0,758,137,1,0,0,0,759,760,5,82,0,0,760,761,5,57,0,0,
		761,762,3,118,59,0,762,763,5,42,0,0,763,764,3,82,41,0,764,765,5,83,0,0,
		765,139,1,0,0,0,766,767,5,82,0,0,767,768,5,58,0,0,768,769,3,118,59,0,769,
		770,5,83,0,0,770,141,1,0,0,0,771,772,5,82,0,0,772,773,5,59,0,0,773,774,
		3,154,77,0,774,775,3,118,59,0,775,776,5,42,0,0,776,777,3,82,41,0,777,778,
		5,83,0,0,778,143,1,0,0,0,779,780,5,82,0,0,780,802,5,60,0,0,781,788,3,184,
		92,0,782,789,3,146,73,0,783,785,3,118,59,0,784,783,1,0,0,0,785,786,1,0,
		0,0,786,787,1,0,0,0,786,784,1,0,0,0,787,789,1,0,0,0,788,782,1,0,0,0,788,
		784,1,0,0,0,789,803,1,0,0,0,790,797,5,57,0,0,791,798,3,146,73,0,792,794,
		3,118,59,0,793,792,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,795,793,1,0,
		0,0,796,798,1,0,0,0,797,791,1,0,0,0,797,793,1,0,0,0,798,799,1,0,0,0,799,
		800,5,42,0,0,800,801,3,82,41,0,801,803,1,0,0,0,802,781,1,0,0,0,802,790,
		1,0,0,0,803,804,1,0,0,0,804,805,5,83,0,0,805,145,1,0,0,0,806,807,5,82,
		0,0,807,808,5,15,0,0,808,809,3,110,55,0,809,810,3,0,0,0,810,811,3,118,
		59,0,811,812,5,83,0,0,812,147,1,0,0,0,813,843,5,82,0,0,814,815,5,76,0,
		0,815,817,3,148,74,0,816,818,3,148,74,0,817,816,1,0,0,0,818,819,1,0,0,
		0,819,820,1,0,0,0,819,817,1,0,0,0,820,844,1,0,0,0,821,822,3,150,75,0,822,
		823,3,154,77,0,823,824,3,154,77,0,824,844,1,0,0,0,825,826,5,78,0,0,826,
		827,3,184,92,0,827,828,3,184,92,0,828,844,1,0,0,0,829,830,5,78,0,0,830,
		831,3,84,42,0,831,832,3,84,42,0,832,844,1,0,0,0,833,834,5,79,0,0,834,844,
		3,148,74,0,835,836,5,78,0,0,836,837,3,98,49,0,837,838,3,98,49,0,838,844,
		1,0,0,0,839,840,5,78,0,0,840,841,3,100,50,0,841,842,3,100,50,0,842,844,
		1,0,0,0,843,814,1,0,0,0,843,821,1,0,0,0,843,825,1,0,0,0,843,829,1,0,0,
		0,843,833,1,0,0,0,843,835,1,0,0,0,843,839,1,0,0,0,844,845,1,0,0,0,845,
		846,5,83,0,0,846,849,1,0,0,0,847,849,3,152,76,0,848,813,1,0,0,0,848,847,
		1,0,0,0,849,149,1,0,0,0,850,851,7,6,0,0,851,151,1,0,0,0,852,853,5,82,0,
		0,853,854,7,2,0,0,854,855,3,110,55,0,855,856,3,0,0,0,856,857,3,148,74,
		0,857,858,5,83,0,0,858,153,1,0,0,0,859,879,3,8,4,0,860,879,3,178,89,0,
		861,879,3,162,81,0,862,879,3,164,82,0,863,879,3,166,83,0,864,879,3,160,
		80,0,865,879,3,168,84,0,866,879,3,170,85,0,867,879,3,172,86,0,868,879,
		3,174,87,0,869,879,3,176,88,0,870,879,3,156,78,0,871,879,3,182,91,0,872,
		879,3,158,79,0,873,875,5,80,0,0,874,873,1,0,0,0,875,876,1,0,0,0,876,874,
		1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,859,1,0,0,0,878,860,1,0,0,
		0,878,861,1,0,0,0,878,862,1,0,0,0,878,863,1,0,0,0,878,864,1,0,0,0,878,
		865,1,0,0,0,878,866,1,0,0,0,878,867,1,0,0,0,878,868,1,0,0,0,878,869,1,
		0,0,0,878,870,1,0,0,0,878,871,1,0,0,0,878,872,1,0,0,0,878,874,1,0,0,0,
		879,155,1,0,0,0,880,881,5,82,0,0,881,882,5,61,0,0,882,883,3,118,59,0,883,
		884,5,42,0,0,884,885,3,82,41,0,885,886,5,83,0,0,886,157,1,0,0,0,887,888,
		5,82,0,0,888,889,5,62,0,0,889,890,3,84,42,0,890,891,5,42,0,0,891,892,3,
		82,41,0,892,893,5,83,0,0,893,159,1,0,0,0,894,895,5,82,0,0,895,896,5,63,
		0,0,896,897,3,154,77,0,897,898,3,154,77,0,898,899,5,83,0,0,899,161,1,0,
		0,0,900,901,5,82,0,0,901,902,5,64,0,0,902,903,3,154,77,0,903,904,3,154,
		77,0,904,905,5,83,0,0,905,163,1,0,0,0,906,907,5,82,0,0,907,908,5,65,0,
		0,908,909,3,154,77,0,909,910,3,154,77,0,910,911,5,83,0,0,911,165,1,0,0,
		0,912,913,5,82,0,0,913,914,5,66,0,0,914,915,3,154,77,0,915,916,3,154,77,
		0,916,917,5,83,0,0,917,167,1,0,0,0,918,919,5,82,0,0,919,920,5,67,0,0,920,
		921,3,154,77,0,921,922,3,154,77,0,922,923,5,83,0,0,923,169,1,0,0,0,924,
		925,5,82,0,0,925,926,5,68,0,0,926,927,3,154,77,0,927,928,3,154,77,0,928,
		929,5,83,0,0,929,171,1,0,0,0,930,931,5,82,0,0,931,932,5,69,0,0,932,933,
		3,154,77,0,933,934,5,83,0,0,934,173,1,0,0,0,935,936,5,82,0,0,936,937,5,
		70,0,0,937,938,3,154,77,0,938,939,5,83,0,0,939,175,1,0,0,0,940,941,5,82,
		0,0,941,942,5,71,0,0,942,945,3,154,77,0,943,944,5,50,0,0,944,946,3,154,
		77,0,945,943,1,0,0,0,945,946,1,0,0,0,946,947,1,0,0,0,947,948,5,83,0,0,
		948,177,1,0,0,0,949,950,5,82,0,0,950,951,5,72,0,0,951,952,3,110,55,0,952,
		953,5,83,0,0,953,179,1,0,0,0,954,955,5,82,0,0,955,956,5,15,0,0,956,957,
		3,110,55,0,957,958,3,0,0,0,958,959,3,182,91,0,959,960,5,83,0,0,960,181,
		1,0,0,0,961,965,5,82,0,0,962,966,3,4,2,0,963,966,5,2,0,0,964,966,3,96,
		48,0,965,962,1,0,0,0,965,963,1,0,0,0,965,964,1,0,0,0,966,967,1,0,0,0,967,
		968,5,73,0,0,968,969,3,184,92,0,969,970,5,83,0,0,970,183,1,0,0,0,971,976,
		3,190,95,0,972,976,3,186,93,0,973,976,3,2,1,0,974,976,3,188,94,0,975,971,
		1,0,0,0,975,972,1,0,0,0,975,973,1,0,0,0,975,974,1,0,0,0,976,185,1,0,0,
		0,977,981,5,82,0,0,978,982,3,4,2,0,979,982,5,2,0,0,980,982,3,96,48,0,981,
		978,1,0,0,0,981,979,1,0,0,0,981,980,1,0,0,0,982,983,1,0,0,0,983,984,5,
		74,0,0,984,985,3,184,92,0,985,986,5,83,0,0,986,187,1,0,0,0,987,988,5,82,
		0,0,988,989,5,75,0,0,989,990,3,184,92,0,990,991,3,84,42,0,991,992,5,83,
		0,0,992,189,1,0,0,0,993,995,5,81,0,0,994,993,1,0,0,0,995,996,1,0,0,0,996,
		994,1,0,0,0,996,997,1,0,0,0,997,191,1,0,0,0,67,224,230,232,247,252,258,
		274,276,291,302,309,317,324,338,354,373,378,392,401,408,416,426,436,443,
		454,462,480,515,530,534,540,554,559,583,589,597,605,611,622,630,642,650,
		682,697,699,709,711,721,723,738,752,757,786,788,795,797,802,819,843,848,
		876,878,945,965,975,981,996
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
