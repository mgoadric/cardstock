//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/markgoadrich/Github/cardstock/CardStock/Recycle.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, BOOLOP=71, COMPOP=72, EQOP=73, 
		UNOP=74, INTNUM=75, LETT=76, OPEN=77, CLOSE=78, WS=79, ANY=80;
	public const int
		RULE_var = 0, RULE_vars = 1, RULE_varo = 2, RULE_varp = 3, RULE_vari = 4, 
		RULE_varb = 5, RULE_varc = 6, RULE_varcs = 7, RULE_varcard = 8, RULE_game = 9, 
		RULE_declare = 10, RULE_setup = 11, RULE_scoring = 12, RULE_stage = 13, 
		RULE_endcondition = 14, RULE_multiaction = 15, RULE_multiaction2 = 16, 
		RULE_condact = 17, RULE_agg = 18, RULE_let = 19, RULE_action = 20, RULE_playercreate = 21, 
		RULE_teamcreate = 22, RULE_teams = 23, RULE_deckcreate = 24, RULE_deck = 25, 
		RULE_attribute = 26, RULE_initpoints = 27, RULE_awards = 28, RULE_subaward = 29, 
		RULE_cycleaction = 30, RULE_setaction = 31, RULE_setstraction = 32, RULE_incaction = 33, 
		RULE_decaction = 34, RULE_moveaction = 35, RULE_shuffleaction = 36, RULE_turnaction = 37, 
		RULE_repeat = 38, RULE_pointstorage = 39, RULE_card = 40, RULE_actual = 41, 
		RULE_maxof = 42, RULE_minof = 43, RULE_locpre = 44, RULE_locdesc = 45, 
		RULE_who = 46, RULE_whop = 47, RULE_whot = 48, RULE_whodesc = 49, RULE_owner = 50, 
		RULE_teamp = 51, RULE_typed = 52, RULE_collection = 53, RULE_strcollection = 54, 
		RULE_range = 55, RULE_other = 56, RULE_cstorage = 57, RULE_sortof = 58, 
		RULE_unionof = 59, RULE_intersectof = 60, RULE_disjunctionof = 61, RULE_filter = 62, 
		RULE_memstorage = 63, RULE_cstoragecollection = 64, RULE_memset = 65, 
		RULE_run = 66, RULE_subset = 67, RULE_tuple = 68, RULE_partition = 69, 
		RULE_aggcs = 70, RULE_boolean = 71, RULE_intop = 72, RULE_aggb = 73, RULE_int = 74, 
		RULE_sum = 75, RULE_score = 76, RULE_add = 77, RULE_mult = 78, RULE_subtract = 79, 
		RULE_mod = 80, RULE_divide = 81, RULE_exponent = 82, RULE_triangular = 83, 
		RULE_fibonacci = 84, RULE_random = 85, RULE_sizeof = 86, RULE_aggi = 87, 
		RULE_rawstorage = 88, RULE_str = 89, RULE_strstorage = 90, RULE_cardatt = 91, 
		RULE_namegr = 92;
	public static readonly string[] ruleNames = {
		"var", "vars", "varo", "varp", "vari", "varb", "varc", "varcs", "varcard", 
		"game", "declare", "setup", "scoring", "stage", "endcondition", "multiaction", 
		"multiaction2", "condact", "agg", "let", "action", "playercreate", "teamcreate", 
		"teams", "deckcreate", "deck", "attribute", "initpoints", "awards", "subaward", 
		"cycleaction", "setaction", "setstraction", "incaction", "decaction", 
		"moveaction", "shuffleaction", "turnaction", "repeat", "pointstorage", 
		"card", "actual", "maxof", "minof", "locpre", "locdesc", "who", "whop", 
		"whot", "whodesc", "owner", "teamp", "typed", "collection", "strcollection", 
		"range", "other", "cstorage", "sortof", "unionof", "intersectof", "disjunctionof", 
		"filter", "memstorage", "cstoragecollection", "memset", "run", "subset", 
		"tuple", "partition", "aggcs", "boolean", "intop", "aggb", "int", "sum", 
		"score", "add", "mult", "subtract", "mod", "divide", "exponent", "triangular", 
		"fibonacci", "random", "sizeof", "aggi", "rawstorage", "str", "strstorage", 
		"cardatt", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'game'", "'declare'", "'setup'", "'scoring'", "'min'", "'max'", 
		"'stage'", "'player'", "'team'", "'end'", "'choice'", "'do'", "'any'", 
		"'all'", "'let'", "'create'", "'players'", "'teams'", "','", "'deck'", 
		"'set'", "':'", "'cycle'", "'next'", "'current'", "'previous'", "'inc'", 
		"'dec'", "'move'", "'shuffle'", "'turn'", "'pass'", "'repeat'", "'points'", 
		"'top'", "'bottom'", "'actual'", "'using'", "'vloc'", "'iloc'", "'hloc'", 
		"'owner'", "'range'", "'..'", "'other'", "'sort'", "'union'", "'intersect'", 
		"'disjunction'", "'filter'", "'runs'", "'subsets'", "'tuples'", "'partition'", 
		"'sum'", "'score'", "'+'", "'*'", "'-'", "'%'", "'//'", "'^'", "'tri'", 
		"'fib'", "'random'", "'size'", "'sto'", "'str'", "'cardatt'", null, null, 
		null, "'not'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "BOOLOP", 
		"COMPOP", "EQOP", "UNOP", "INTNUM", "LETT", "OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecycleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RecycleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RecycleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			Match(T__0);
			State = 187;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vars; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVars(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVars(this);
		}
	}

	[RuleVersion(0)]
	public VarsContext vars() {
		VarsContext _localctx = new VarsContext(Context, State);
		EnterRule(_localctx, 2, RULE_vars);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(T__0);
			State = 190;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VaroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVaro(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVaro(this);
		}
	}

	[RuleVersion(0)]
	public VaroContext varo() {
		VaroContext _localctx = new VaroContext(Context, State);
		EnterRule(_localctx, 4, RULE_varo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			Match(T__0);
			State = 193;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarp(this);
		}
	}

	[RuleVersion(0)]
	public VarpContext varp() {
		VarpContext _localctx = new VarpContext(Context, State);
		EnterRule(_localctx, 6, RULE_varp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(T__0);
			State = 196;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VariContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vari; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVari(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVari(this);
		}
	}

	[RuleVersion(0)]
	public VariContext vari() {
		VariContext _localctx = new VariContext(Context, State);
		EnterRule(_localctx, 8, RULE_vari);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(T__0);
			State = 199;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarb(this);
		}
	}

	[RuleVersion(0)]
	public VarbContext varb() {
		VarbContext _localctx = new VarbContext(Context, State);
		EnterRule(_localctx, 10, RULE_varb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(T__0);
			State = 202;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarc(this);
		}
	}

	[RuleVersion(0)]
	public VarcContext varc() {
		VarcContext _localctx = new VarcContext(Context, State);
		EnterRule(_localctx, 12, RULE_varc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(T__0);
			State = 205;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarcsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varcs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarcs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarcs(this);
		}
	}

	[RuleVersion(0)]
	public VarcsContext varcs() {
		VarcsContext _localctx = new VarcsContext(Context, State);
		EnterRule(_localctx, 14, RULE_varcs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			Match(T__0);
			State = 208;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVarcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVarcard(this);
		}
	}

	[RuleVersion(0)]
	public VarcardContext varcard() {
		VarcardContext _localctx = new VarcardContext(Context, State);
		EnterRule(_localctx, 16, RULE_varcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(T__0);
			State = 211;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 18, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(OPEN);
			State = 214;
			Match(T__1);
			State = 218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 215;
					declare();
					}
					} 
				}
				State = 220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 221;
			setup();
			State = 224;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 224;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 222;
						multiaction();
						}
						break;
					case 2:
						{
						State = 223;
						stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 226;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 228;
			scoring();
			State = 229;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 20, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(OPEN);
			State = 232;
			Match(T__2);
			State = 233;
			typed();
			State = 234;
			var();
			State = 235;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 22, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(OPEN);
			State = 238;
			Match(T__3);
			State = 239;
			playercreate();
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 240;
				teamcreate();
				}
				break;
			}
			State = 250;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 243;
					Match(OPEN);
					State = 246;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__16:
						{
						State = 244;
						deckcreate();
						}
						break;
					case T__33:
						{
						State = 245;
						repeat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 248;
					Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 252;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 254;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 24, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(OPEN);
			State = 257;
			Match(T__4);
			State = 258;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__6) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 259;
			@int();
			State = 260;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 26, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(OPEN);
			State = 263;
			Match(T__7);
			State = 264;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 265;
			endcondition();
			State = 268;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 268;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 266;
						multiaction();
						}
						break;
					case 2:
						{
						State = 267;
						stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 270;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 272;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 28, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			Match(OPEN);
			State = 275;
			Match(T__10);
			State = 276;
			boolean();
			State = 277;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 30, RULE_multiaction);
		try {
			int _alt;
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				Match(OPEN);
				State = 280;
				Match(T__11);
				State = 281;
				Match(OPEN);
				State = 283;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 282;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 285;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 287;
				Match(CLOSE);
				State = 288;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				Match(OPEN);
				State = 291;
				Match(T__12);
				State = 292;
				Match(OPEN);
				State = 294;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 293;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 296;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 298;
				Match(CLOSE);
				State = 299;
				Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 301;
				agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 302;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction2(this);
		}
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 32, RULE_multiaction2);
		try {
			int _alt;
			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305;
				Match(OPEN);
				State = 306;
				Match(T__12);
				State = 307;
				Match(OPEN);
				State = 309;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 308;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 311;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 313;
				Match(CLOSE);
				State = 314;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316;
				agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 317;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 34, RULE_condact);
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				Match(OPEN);
				State = 321;
				boolean();
				State = 322;
				multiaction2();
				State = 323;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 325;
				multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 326;
				Match(OPEN);
				State = 327;
				boolean();
				State = 328;
				action();
				State = 329;
				Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 331;
				action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 36, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			Match(OPEN);
			State = 335;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 336;
			collection();
			State = 337;
			var();
			State = 338;
			condact();
			State = 339;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 38, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			Match(OPEN);
			State = 342;
			Match(T__15);
			State = 343;
			typed();
			State = 344;
			var();
			State = 348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 345;
				multiaction();
				}
				break;
			case 2:
				{
				State = 346;
				action();
				}
				break;
			case 3:
				{
				State = 347;
				condact();
				}
				break;
			}
			State = 350;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetstractionContext setstraction() {
			return GetRuleContext<SetstractionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 40, RULE_action);
		try {
			State = 370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				Match(OPEN);
				State = 365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 353;
					initpoints();
					}
					break;
				case 2:
					{
					State = 354;
					teamcreate();
					}
					break;
				case 3:
					{
					State = 355;
					deckcreate();
					}
					break;
				case 4:
					{
					State = 356;
					cycleaction();
					}
					break;
				case 5:
					{
					State = 357;
					setaction();
					}
					break;
				case 6:
					{
					State = 358;
					moveaction();
					}
					break;
				case 7:
					{
					State = 359;
					incaction();
					}
					break;
				case 8:
					{
					State = 360;
					setstraction();
					}
					break;
				case 9:
					{
					State = 361;
					decaction();
					}
					break;
				case 10:
					{
					State = 362;
					turnaction();
					}
					break;
				case 11:
					{
					State = 363;
					shuffleaction();
					}
					break;
				case 12:
					{
					State = 364;
					repeat();
					}
					break;
				}
				State = 367;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369;
				agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 42, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(OPEN);
			State = 373;
			Match(T__16);
			State = 374;
			Match(T__17);
			State = 375;
			@int();
			State = 376;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 44, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 378;
			Match(OPEN);
			State = 379;
			Match(T__16);
			State = 380;
			Match(T__18);
			State = 382;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 381;
					teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 384;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 386;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 46, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			Match(OPEN);
			State = 393;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 389;
					Match(INTNUM);
					State = 390;
					Match(T__19);
					}
					} 
				}
				State = 395;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			State = 396;
			Match(INTNUM);
			State = 400;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 397;
					teams();
					}
					} 
				}
				State = 402;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			State = 403;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 48, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(T__16);
			State = 406;
			Match(T__20);
			State = 408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 407;
				str();
				}
				break;
			}
			State = 410;
			cstorage();
			State = 411;
			deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 50, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(OPEN);
			State = 414;
			Match(T__20);
			State = 416;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 415;
					attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 418;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 420;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 52, RULE_attribute);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			Match(OPEN);
			State = 428;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 423;
					namegr();
					State = 424;
					Match(T__19);
					}
					} 
				}
				State = 430;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 431;
			namegr();
			State = 435;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 432;
					attribute();
					}
					} 
				}
				State = 437;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 438;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 54, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 440;
			Match(T__21);
			State = 441;
			pointstorage();
			State = 442;
			Match(OPEN);
			State = 444;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 443;
					awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 446;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 448;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 56, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(OPEN);
			State = 452;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 451;
					subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 454;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 456;
			@int();
			State = 457;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext[] str() {
			return GetRuleContexts<StrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str(int i) {
			return GetRuleContext<StrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 58, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			Match(OPEN);
			State = 460;
			str();
			State = 461;
			Match(T__22);
			State = 462;
			str();
			State = 463;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 60, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(T__23);
			State = 466;
			_la = TokenStream.LA(1);
			if ( !(_la==T__24 || _la==T__25) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN:
				{
				State = 467;
				owner();
				}
				break;
			case T__25:
				{
				State = 468;
				Match(T__25);
				}
				break;
			case T__24:
				{
				State = 469;
				Match(T__24);
				}
				break;
			case T__26:
				{
				State = 470;
				Match(T__26);
				}
				break;
			case T__0:
				{
				State = 471;
				varo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 62, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			Match(T__21);
			State = 475;
			rawstorage();
			State = 476;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetstractionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public SetstractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setstraction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetstraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetstraction(this);
		}
	}

	[RuleVersion(0)]
	public SetstractionContext setstraction() {
		SetstractionContext _localctx = new SetstractionContext(Context, State);
		EnterRule(_localctx, 64, RULE_setstraction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			Match(T__21);
			State = 479;
			strstorage();
			State = 480;
			str();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 66, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(T__27);
			State = 483;
			rawstorage();
			State = 484;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 68, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(T__28);
			State = 487;
			rawstorage();
			State = 488;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 70, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(T__29);
			State = 491;
			card();
			State = 492;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 72, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			Match(T__30);
			State = 495;
			cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 74, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497;
			Match(T__31);
			State = 498;
			Match(T__32);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 76, RULE_repeat);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 500;
				Match(T__33);
				State = 501;
				@int();
				State = 502;
				action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504;
				Match(T__33);
				State = 505;
				Match(T__14);
				State = 506;
				Match(OPEN);
				State = 507;
				moveaction();
				State = 508;
				Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public PointstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPointstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPointstorage(this);
		}
	}

	[RuleVersion(0)]
	public PointstorageContext pointstorage() {
		PointstorageContext _localctx = new PointstorageContext(Context, State);
		EnterRule(_localctx, 78, RULE_pointstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(OPEN);
			State = 516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 513;
				varo();
				}
				break;
			case T__1:
				{
				State = 514;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 515;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 518;
			Match(T__34);
			State = 519;
			str();
			State = 520;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarcardContext varcard() {
			return GetRuleContext<VarcardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 80, RULE_card);
		try {
			State = 535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 522;
				varcard();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 523;
				maxof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 524;
				minof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 525;
				actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 526;
				Match(OPEN);
				State = 530;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
					{
					State = 527;
					Match(T__35);
					}
					break;
				case T__36:
					{
					State = 528;
					Match(T__36);
					}
					break;
				case T__0:
				case INTNUM:
				case OPEN:
					{
					State = 529;
					@int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 532;
				cstorage();
				State = 533;
				Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 82, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537;
			Match(OPEN);
			State = 538;
			Match(T__37);
			State = 539;
			card();
			State = 540;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 84, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542;
			Match(OPEN);
			State = 543;
			Match(T__6);
			State = 544;
			cstorage();
			State = 545;
			Match(T__38);
			State = 546;
			pointstorage();
			State = 547;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 86, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549;
			Match(OPEN);
			State = 550;
			Match(T__5);
			State = 551;
			cstorage();
			State = 552;
			Match(T__38);
			State = 553;
			pointstorage();
			State = 554;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarpContext varp() {
			return GetRuleContext<VarpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 88, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 556;
				Match(T__1);
				}
				break;
			case T__0:
				{
				State = 557;
				varp();
				}
				break;
			case OPEN:
				{
				State = 558;
				whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 90, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7696581394432L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 92, RULE_who);
		try {
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 563;
				whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 564;
				whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 94, RULE_whop);
		try {
			State = 573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				Match(OPEN);
				State = 568;
				whodesc();
				State = 569;
				Match(T__8);
				State = 570;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 572;
				owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 96, RULE_whot);
		try {
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 575;
				Match(OPEN);
				State = 576;
				whodesc();
				State = 577;
				Match(T__9);
				State = 578;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 580;
				teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 98, RULE_whodesc);
		try {
			State = 587;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 583;
				@int();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 584;
				Match(T__26);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 585;
				Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 586;
				Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 100, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(OPEN);
			State = 590;
			Match(T__42);
			State = 591;
			card();
			State = 592;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarpContext varp() {
			return GetRuleContext<VarpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 102, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 594;
			Match(OPEN);
			State = 595;
			Match(T__9);
			State = 598;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 596;
				varp();
				}
				break;
			case OPEN:
				{
				State = 597;
				whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 600;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 104, RULE_typed);
		try {
			State = 606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602;
				@int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 603;
				boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 604;
				str();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 605;
				collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarcContext varc() {
			return GetRuleContext<VarcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 106, RULE_collection);
		try {
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 608;
				varc();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 609;
				filter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 610;
				cstorage();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 611;
				strcollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 612;
				cstoragecollection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 613;
				Match(T__8);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 614;
				Match(T__9);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 615;
				whot();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 616;
				other();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 617;
				range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 108, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 620;
			Match(OPEN);
			State = 626;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 621;
					namegr();
					State = 622;
					Match(T__19);
					}
					} 
				}
				State = 628;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			State = 629;
			namegr();
			State = 630;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 110, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			Match(OPEN);
			State = 633;
			Match(T__43);
			State = 634;
			@int();
			State = 635;
			Match(T__44);
			State = 636;
			@int();
			State = 637;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 112, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(OPEN);
			State = 640;
			Match(T__45);
			State = 641;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 642;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarcsContext varcs() {
			return GetRuleContext<VarcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntersectofContext intersectof() {
			return GetRuleContext<IntersectofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionofContext disjunctionof() {
			return GetRuleContext<DisjunctionofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortofContext sortof() {
			return GetRuleContext<SortofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 114, RULE_cstorage);
		try {
			State = 657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644;
				varcs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 645;
				unionof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 646;
				intersectof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 647;
				disjunctionof();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 648;
				sortof();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 649;
				filter();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 650;
				Match(OPEN);
				State = 651;
				locpre();
				State = 652;
				locdesc();
				State = 653;
				str();
				State = 654;
				Match(CLOSE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 656;
				memstorage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SortofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSortof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSortof(this);
		}
	}

	[RuleVersion(0)]
	public SortofContext sortof() {
		SortofContext _localctx = new SortofContext(Context, State);
		EnterRule(_localctx, 116, RULE_sortof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(OPEN);
			State = 660;
			Match(T__46);
			State = 661;
			cstorage();
			State = 662;
			Match(T__38);
			State = 663;
			pointstorage();
			State = 664;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 118, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 666;
			Match(OPEN);
			State = 667;
			Match(T__47);
			State = 674;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 668;
				aggcs();
				}
				break;
			case 2:
				{
				State = 670;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 669;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 672;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 676;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntersectofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public IntersectofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intersectof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntersectof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntersectof(this);
		}
	}

	[RuleVersion(0)]
	public IntersectofContext intersectof() {
		IntersectofContext _localctx = new IntersectofContext(Context, State);
		EnterRule(_localctx, 120, RULE_intersectof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(OPEN);
			State = 679;
			Match(T__48);
			State = 686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 680;
				aggcs();
				}
				break;
			case 2:
				{
				State = 682;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 681;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 684;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 688;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public DisjunctionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunctionof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDisjunctionof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDisjunctionof(this);
		}
	}

	[RuleVersion(0)]
	public DisjunctionofContext disjunctionof() {
		DisjunctionofContext _localctx = new DisjunctionofContext(Context, State);
		EnterRule(_localctx, 122, RULE_disjunctionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 690;
			Match(OPEN);
			State = 691;
			Match(T__49);
			State = 698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 692;
				aggcs();
				}
				break;
			case 2:
				{
				State = 694;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 693;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 696;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 700;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 124, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			Match(OPEN);
			State = 703;
			Match(T__50);
			State = 704;
			collection();
			State = 705;
			var();
			State = 706;
			boolean();
			State = 707;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 126, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			Match(OPEN);
			State = 713;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__35:
				{
				State = 710;
				Match(T__35);
				}
				break;
			case T__36:
				{
				State = 711;
				Match(T__36);
				}
				break;
			case T__0:
			case INTNUM:
			case OPEN:
				{
				State = 712;
				@int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 715;
			memset();
			State = 716;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 128, RULE_cstoragecollection);
		try {
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 718;
				memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 719;
				aggcs();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 720;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionContext partition() {
			return GetRuleContext<PartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubsetContext subset() {
			return GetRuleContext<SubsetContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 130, RULE_memset);
		try {
			State = 726;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723;
				tuple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 724;
				partition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 725;
				subset();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_run; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRun(this);
		}
	}

	[RuleVersion(0)]
	public RunContext run() {
		RunContext _localctx = new RunContext(Context, State);
		EnterRule(_localctx, 132, RULE_run);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			Match(OPEN);
			State = 729;
			Match(T__51);
			State = 730;
			cstorage();
			State = 731;
			Match(T__38);
			State = 732;
			pointstorage();
			State = 733;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubset(this);
		}
	}

	[RuleVersion(0)]
	public SubsetContext subset() {
		SubsetContext _localctx = new SubsetContext(Context, State);
		EnterRule(_localctx, 134, RULE_subset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			Match(OPEN);
			State = 736;
			Match(T__52);
			State = 737;
			cstorage();
			State = 738;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 136, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(OPEN);
			State = 741;
			Match(T__53);
			State = 742;
			@int();
			State = 743;
			cstorage();
			State = 744;
			Match(T__38);
			State = 745;
			pointstorage();
			State = 746;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public PartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPartition(this);
		}
	}

	[RuleVersion(0)]
	public PartitionContext partition() {
		PartitionContext _localctx = new PartitionContext(Context, State);
		EnterRule(_localctx, 138, RULE_partition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			Match(OPEN);
			State = 749;
			Match(T__54);
			State = 771;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case LETT:
			case OPEN:
				{
				{
				State = 750;
				str();
				State = 757;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 751;
					aggcs();
					}
					break;
				case 2:
					{
					State = 753;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 752;
							cstorage();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 755;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				}
				break;
			case T__51:
				{
				{
				State = 759;
				Match(T__51);
				State = 766;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 760;
					aggcs();
					}
					break;
				case 2:
					{
					State = 762;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 761;
							cstorage();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 764;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				State = 768;
				Match(T__38);
				State = 769;
				pointstorage();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 773;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggcsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggcsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggcs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAggcs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAggcs(this);
		}
	}

	[RuleVersion(0)]
	public AggcsContext aggcs() {
		AggcsContext _localctx = new AggcsContext(Context, State);
		EnterRule(_localctx, 140, RULE_aggcs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			Match(OPEN);
			State = 776;
			Match(T__14);
			State = 777;
			collection();
			State = 778;
			var();
			State = 779;
			cstorage();
			State = 780;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext[] str() {
			return GetRuleContexts<StrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str(int i) {
			return GetRuleContext<StrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggbContext aggb() {
			return GetRuleContext<AggbContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 142, RULE_boolean);
		try {
			int _alt;
			State = 817;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 782;
				Match(OPEN);
				State = 812;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 783;
					Match(BOOLOP);
					State = 784;
					boolean();
					State = 786;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 785;
							boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 788;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 2:
					{
					State = 790;
					intop();
					State = 791;
					@int();
					State = 792;
					@int();
					}
					break;
				case 3:
					{
					State = 794;
					Match(EQOP);
					State = 795;
					str();
					State = 796;
					str();
					}
					break;
				case 4:
					{
					State = 798;
					Match(EQOP);
					State = 799;
					card();
					State = 800;
					card();
					}
					break;
				case 5:
					{
					State = 802;
					Match(UNOP);
					State = 803;
					boolean();
					}
					break;
				case 6:
					{
					State = 804;
					Match(EQOP);
					State = 805;
					whop();
					State = 806;
					whop();
					}
					break;
				case 7:
					{
					State = 808;
					Match(EQOP);
					State = 809;
					whot();
					State = 810;
					whot();
					}
					break;
				}
				State = 814;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 816;
				aggb();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 144, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			_la = TokenStream.LA(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAggb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAggb(this);
		}
	}

	[RuleVersion(0)]
	public AggbContext aggb() {
		AggbContext _localctx = new AggbContext(Context, State);
		EnterRule(_localctx, 146, RULE_aggb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			Match(OPEN);
			State = 822;
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 823;
			collection();
			State = 824;
			var();
			State = 825;
			boolean();
			State = 826;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariContext vari() {
			return GetRuleContext<VariContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriangularContext triangular() {
			return GetRuleContext<TriangularContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FibonacciContext fibonacci() {
			return GetRuleContext<FibonacciContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomContext random() {
			return GetRuleContext<RandomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 148, RULE_int);
		try {
			int _alt;
			State = 847;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 828;
				vari();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 829;
				@sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 830;
				mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 831;
				subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 832;
				mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 833;
				add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 834;
				divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 835;
				exponent();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 836;
				triangular();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 837;
				fibonacci();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 838;
				random();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 839;
				sum();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 840;
				rawstorage();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 841;
				score();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 843;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 842;
						Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 845;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 150, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(OPEN);
			State = 850;
			Match(T__55);
			State = 851;
			cstorage();
			State = 852;
			Match(T__38);
			State = 853;
			pointstorage();
			State = 854;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 152, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856;
			Match(OPEN);
			State = 857;
			Match(T__56);
			State = 858;
			card();
			State = 859;
			Match(T__38);
			State = 860;
			pointstorage();
			State = 861;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 154, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863;
			Match(OPEN);
			State = 864;
			Match(T__57);
			State = 865;
			@int();
			State = 866;
			@int();
			State = 867;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 156, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			Match(OPEN);
			State = 870;
			Match(T__58);
			State = 871;
			@int();
			State = 872;
			@int();
			State = 873;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 158, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			Match(OPEN);
			State = 876;
			Match(T__59);
			State = 877;
			@int();
			State = 878;
			@int();
			State = 879;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 160, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			Match(OPEN);
			State = 882;
			Match(T__60);
			State = 883;
			@int();
			State = 884;
			@int();
			State = 885;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 162, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			Match(OPEN);
			State = 888;
			Match(T__61);
			State = 889;
			@int();
			State = 890;
			@int();
			State = 891;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 164, RULE_exponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 893;
			Match(OPEN);
			State = 894;
			Match(T__62);
			State = 895;
			@int();
			State = 896;
			@int();
			State = 897;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriangularContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TriangularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triangular; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTriangular(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTriangular(this);
		}
	}

	[RuleVersion(0)]
	public TriangularContext triangular() {
		TriangularContext _localctx = new TriangularContext(Context, State);
		EnterRule(_localctx, 166, RULE_triangular);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			Match(OPEN);
			State = 900;
			Match(T__63);
			State = 901;
			@int();
			State = 902;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FibonacciContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FibonacciContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fibonacci; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFibonacci(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFibonacci(this);
		}
	}

	[RuleVersion(0)]
	public FibonacciContext fibonacci() {
		FibonacciContext _localctx = new FibonacciContext(Context, State);
		EnterRule(_localctx, 168, RULE_fibonacci);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			Match(OPEN);
			State = 905;
			Match(T__64);
			State = 906;
			@int();
			State = 907;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RandomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_random; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRandom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRandom(this);
		}
	}

	[RuleVersion(0)]
	public RandomContext random() {
		RandomContext _localctx = new RandomContext(Context, State);
		EnterRule(_localctx, 170, RULE_random);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 909;
			Match(OPEN);
			State = 910;
			Match(T__65);
			State = 911;
			@int();
			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__44) {
				{
				State = 912;
				Match(T__44);
				State = 913;
				@int();
				}
			}

			State = 916;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 172, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(OPEN);
			State = 919;
			Match(T__66);
			State = 920;
			collection();
			State = 921;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggi; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAggi(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAggi(this);
		}
	}

	[RuleVersion(0)]
	public AggiContext aggi() {
		AggiContext _localctx = new AggiContext(Context, State);
		EnterRule(_localctx, 174, RULE_aggi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 923;
			Match(OPEN);
			State = 924;
			Match(T__14);
			State = 925;
			collection();
			State = 926;
			var();
			State = 927;
			rawstorage();
			State = 928;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 176, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			Match(OPEN);
			State = 934;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 931;
				varo();
				}
				break;
			case T__1:
				{
				State = 932;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 933;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 936;
			Match(T__67);
			State = 937;
			str();
			State = 938;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarsContext vars() {
			return GetRuleContext<VarsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(Context, State);
		EnterRule(_localctx, 178, RULE_str);
		try {
			State = 944;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 940;
				namegr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 941;
				strstorage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 942;
				vars();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 943;
				cardatt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public StrstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strstorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrstorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrstorage(this);
		}
	}

	[RuleVersion(0)]
	public StrstorageContext strstorage() {
		StrstorageContext _localctx = new StrstorageContext(Context, State);
		EnterRule(_localctx, 180, RULE_strstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			Match(OPEN);
			State = 950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 947;
				varo();
				}
				break;
			case T__1:
				{
				State = 948;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 949;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 952;
			Match(T__68);
			State = 953;
			str();
			State = 954;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 182, RULE_cardatt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956;
			Match(OPEN);
			State = 957;
			Match(T__69);
			State = 958;
			str();
			State = 959;
			card();
			State = 960;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 184, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 962;
					Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 965;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,80,968,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,
		1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,5,9,217,8,
		9,10,9,12,9,220,9,9,1,9,1,9,1,9,4,9,225,8,9,11,9,12,9,226,1,9,1,9,1,9,
		1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,3,11,242,8,11,1,11,1,
		11,1,11,3,11,247,8,11,1,11,1,11,4,11,251,8,11,11,11,12,11,252,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,4,13,269,8,
		13,11,13,12,13,270,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
		15,4,15,284,8,15,11,15,12,15,285,1,15,1,15,1,15,1,15,1,15,1,15,1,15,4,
		15,295,8,15,11,15,12,15,296,1,15,1,15,1,15,1,15,1,15,3,15,304,8,15,1,16,
		1,16,1,16,1,16,4,16,310,8,16,11,16,12,16,311,1,16,1,16,1,16,1,16,1,16,
		3,16,319,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,3,17,333,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,3,19,349,8,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,366,8,20,1,20,1,20,1,20,3,20,371,
		8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,4,22,383,8,22,11,
		22,12,22,384,1,22,1,22,1,23,1,23,1,23,5,23,392,8,23,10,23,12,23,395,9,
		23,1,23,1,23,5,23,399,8,23,10,23,12,23,402,9,23,1,23,1,23,1,24,1,24,1,
		24,3,24,409,8,24,1,24,1,24,1,24,1,25,1,25,1,25,4,25,417,8,25,11,25,12,
		25,418,1,25,1,25,1,26,1,26,1,26,1,26,5,26,427,8,26,10,26,12,26,430,9,26,
		1,26,1,26,5,26,434,8,26,10,26,12,26,437,9,26,1,26,1,26,1,27,1,27,1,27,
		1,27,4,27,445,8,27,11,27,12,27,446,1,27,1,27,1,28,1,28,4,28,453,8,28,11,
		28,12,28,454,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,
		30,1,30,1,30,1,30,1,30,3,30,473,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
		1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
		1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
		1,38,3,38,511,8,38,1,39,1,39,1,39,1,39,3,39,517,8,39,1,39,1,39,1,39,1,
		39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,531,8,40,1,40,1,40,1,40,
		3,40,536,8,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,3,44,560,8,44,1,45,
		1,45,1,46,1,46,3,46,566,8,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,574,8,
		47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,582,8,48,1,49,1,49,1,49,1,49,3,49,
		588,8,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,3,51,599,8,51,1,
		51,1,51,1,52,1,52,1,52,1,52,3,52,607,8,52,1,53,1,53,1,53,1,53,1,53,1,53,
		1,53,1,53,1,53,1,53,3,53,619,8,53,1,54,1,54,1,54,1,54,5,54,625,8,54,10,
		54,12,54,628,9,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
		56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
		57,1,57,1,57,1,57,3,57,658,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,
		1,59,1,59,1,59,4,59,671,8,59,11,59,12,59,672,3,59,675,8,59,1,59,1,59,1,
		60,1,60,1,60,1,60,4,60,683,8,60,11,60,12,60,684,3,60,687,8,60,1,60,1,60,
		1,61,1,61,1,61,1,61,4,61,695,8,61,11,61,12,61,696,3,61,699,8,61,1,61,1,
		61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,3,63,714,8,63,
		1,63,1,63,1,63,1,64,1,64,1,64,3,64,722,8,64,1,65,1,65,1,65,3,65,727,8,
		65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,68,1,
		68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,4,69,754,8,69,
		11,69,12,69,755,3,69,758,8,69,1,69,1,69,1,69,4,69,763,8,69,11,69,12,69,
		764,3,69,767,8,69,1,69,1,69,1,69,3,69,772,8,69,1,69,1,69,1,70,1,70,1,70,
		1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,4,71,787,8,71,11,71,12,71,788,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
		1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,813,8,71,1,71,1,71,1,71,3,
		71,818,8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,4,74,844,8,
		74,11,74,12,74,845,3,74,848,8,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
		76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,78,1,
		78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,
		80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,
		82,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,
		85,1,85,3,85,915,8,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,
		1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,3,88,935,8,88,1,88,1,88,1,88,1,
		88,1,89,1,89,1,89,1,89,3,89,945,8,89,1,90,1,90,1,90,1,90,3,90,951,8,90,
		1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,92,4,92,964,8,92,11,
		92,12,92,965,1,92,22,218,226,252,270,285,296,311,384,393,400,418,428,435,
		446,454,626,672,684,696,755,764,788,0,93,0,2,4,6,8,10,12,14,16,18,20,22,
		24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
		72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
		0,6,1,0,6,7,1,0,9,10,1,0,14,15,1,0,25,26,1,0,40,42,1,0,72,73,1007,0,186,
		1,0,0,0,2,189,1,0,0,0,4,192,1,0,0,0,6,195,1,0,0,0,8,198,1,0,0,0,10,201,
		1,0,0,0,12,204,1,0,0,0,14,207,1,0,0,0,16,210,1,0,0,0,18,213,1,0,0,0,20,
		231,1,0,0,0,22,237,1,0,0,0,24,256,1,0,0,0,26,262,1,0,0,0,28,274,1,0,0,
		0,30,303,1,0,0,0,32,318,1,0,0,0,34,332,1,0,0,0,36,334,1,0,0,0,38,341,1,
		0,0,0,40,370,1,0,0,0,42,372,1,0,0,0,44,378,1,0,0,0,46,388,1,0,0,0,48,405,
		1,0,0,0,50,413,1,0,0,0,52,422,1,0,0,0,54,440,1,0,0,0,56,450,1,0,0,0,58,
		459,1,0,0,0,60,465,1,0,0,0,62,474,1,0,0,0,64,478,1,0,0,0,66,482,1,0,0,
		0,68,486,1,0,0,0,70,490,1,0,0,0,72,494,1,0,0,0,74,497,1,0,0,0,76,510,1,
		0,0,0,78,512,1,0,0,0,80,535,1,0,0,0,82,537,1,0,0,0,84,542,1,0,0,0,86,549,
		1,0,0,0,88,559,1,0,0,0,90,561,1,0,0,0,92,565,1,0,0,0,94,573,1,0,0,0,96,
		581,1,0,0,0,98,587,1,0,0,0,100,589,1,0,0,0,102,594,1,0,0,0,104,606,1,0,
		0,0,106,618,1,0,0,0,108,620,1,0,0,0,110,632,1,0,0,0,112,639,1,0,0,0,114,
		657,1,0,0,0,116,659,1,0,0,0,118,666,1,0,0,0,120,678,1,0,0,0,122,690,1,
		0,0,0,124,702,1,0,0,0,126,709,1,0,0,0,128,721,1,0,0,0,130,726,1,0,0,0,
		132,728,1,0,0,0,134,735,1,0,0,0,136,740,1,0,0,0,138,748,1,0,0,0,140,775,
		1,0,0,0,142,817,1,0,0,0,144,819,1,0,0,0,146,821,1,0,0,0,148,847,1,0,0,
		0,150,849,1,0,0,0,152,856,1,0,0,0,154,863,1,0,0,0,156,869,1,0,0,0,158,
		875,1,0,0,0,160,881,1,0,0,0,162,887,1,0,0,0,164,893,1,0,0,0,166,899,1,
		0,0,0,168,904,1,0,0,0,170,909,1,0,0,0,172,918,1,0,0,0,174,923,1,0,0,0,
		176,930,1,0,0,0,178,944,1,0,0,0,180,946,1,0,0,0,182,956,1,0,0,0,184,963,
		1,0,0,0,186,187,5,1,0,0,187,188,3,184,92,0,188,1,1,0,0,0,189,190,5,1,0,
		0,190,191,3,184,92,0,191,3,1,0,0,0,192,193,5,1,0,0,193,194,3,184,92,0,
		194,5,1,0,0,0,195,196,5,1,0,0,196,197,3,184,92,0,197,7,1,0,0,0,198,199,
		5,1,0,0,199,200,3,184,92,0,200,9,1,0,0,0,201,202,5,1,0,0,202,203,3,184,
		92,0,203,11,1,0,0,0,204,205,5,1,0,0,205,206,3,184,92,0,206,13,1,0,0,0,
		207,208,5,1,0,0,208,209,3,184,92,0,209,15,1,0,0,0,210,211,5,1,0,0,211,
		212,3,184,92,0,212,17,1,0,0,0,213,214,5,77,0,0,214,218,5,2,0,0,215,217,
		3,20,10,0,216,215,1,0,0,0,217,220,1,0,0,0,218,219,1,0,0,0,218,216,1,0,
		0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,224,3,22,11,0,222,225,3,30,15,
		0,223,225,3,26,13,0,224,222,1,0,0,0,224,223,1,0,0,0,225,226,1,0,0,0,226,
		227,1,0,0,0,226,224,1,0,0,0,227,228,1,0,0,0,228,229,3,24,12,0,229,230,
		5,78,0,0,230,19,1,0,0,0,231,232,5,77,0,0,232,233,5,3,0,0,233,234,3,104,
		52,0,234,235,3,0,0,0,235,236,5,78,0,0,236,21,1,0,0,0,237,238,5,77,0,0,
		238,239,5,4,0,0,239,241,3,42,21,0,240,242,3,44,22,0,241,240,1,0,0,0,241,
		242,1,0,0,0,242,250,1,0,0,0,243,246,5,77,0,0,244,247,3,48,24,0,245,247,
		3,76,38,0,246,244,1,0,0,0,246,245,1,0,0,0,247,248,1,0,0,0,248,249,5,78,
		0,0,249,251,1,0,0,0,250,243,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,252,
		250,1,0,0,0,253,254,1,0,0,0,254,255,5,78,0,0,255,23,1,0,0,0,256,257,5,
		77,0,0,257,258,5,5,0,0,258,259,7,0,0,0,259,260,3,148,74,0,260,261,5,78,
		0,0,261,25,1,0,0,0,262,263,5,77,0,0,263,264,5,8,0,0,264,265,7,1,0,0,265,
		268,3,28,14,0,266,269,3,30,15,0,267,269,3,26,13,0,268,266,1,0,0,0,268,
		267,1,0,0,0,269,270,1,0,0,0,270,271,1,0,0,0,270,268,1,0,0,0,271,272,1,
		0,0,0,272,273,5,78,0,0,273,27,1,0,0,0,274,275,5,77,0,0,275,276,5,11,0,
		0,276,277,3,142,71,0,277,278,5,78,0,0,278,29,1,0,0,0,279,280,5,77,0,0,
		280,281,5,12,0,0,281,283,5,77,0,0,282,284,3,34,17,0,283,282,1,0,0,0,284,
		285,1,0,0,0,285,286,1,0,0,0,285,283,1,0,0,0,286,287,1,0,0,0,287,288,5,
		78,0,0,288,289,5,78,0,0,289,304,1,0,0,0,290,291,5,77,0,0,291,292,5,13,
		0,0,292,294,5,77,0,0,293,295,3,34,17,0,294,293,1,0,0,0,295,296,1,0,0,0,
		296,297,1,0,0,0,296,294,1,0,0,0,297,298,1,0,0,0,298,299,5,78,0,0,299,300,
		5,78,0,0,300,304,1,0,0,0,301,304,3,36,18,0,302,304,3,38,19,0,303,279,1,
		0,0,0,303,290,1,0,0,0,303,301,1,0,0,0,303,302,1,0,0,0,304,31,1,0,0,0,305,
		306,5,77,0,0,306,307,5,13,0,0,307,309,5,77,0,0,308,310,3,34,17,0,309,308,
		1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,311,309,1,0,0,0,312,313,1,0,0,
		0,313,314,5,78,0,0,314,315,5,78,0,0,315,319,1,0,0,0,316,319,3,36,18,0,
		317,319,3,38,19,0,318,305,1,0,0,0,318,316,1,0,0,0,318,317,1,0,0,0,319,
		33,1,0,0,0,320,321,5,77,0,0,321,322,3,142,71,0,322,323,3,32,16,0,323,324,
		5,78,0,0,324,333,1,0,0,0,325,333,3,32,16,0,326,327,5,77,0,0,327,328,3,
		142,71,0,328,329,3,40,20,0,329,330,5,78,0,0,330,333,1,0,0,0,331,333,3,
		40,20,0,332,320,1,0,0,0,332,325,1,0,0,0,332,326,1,0,0,0,332,331,1,0,0,
		0,333,35,1,0,0,0,334,335,5,77,0,0,335,336,7,2,0,0,336,337,3,106,53,0,337,
		338,3,0,0,0,338,339,3,34,17,0,339,340,5,78,0,0,340,37,1,0,0,0,341,342,
		5,77,0,0,342,343,5,16,0,0,343,344,3,104,52,0,344,348,3,0,0,0,345,349,3,
		30,15,0,346,349,3,40,20,0,347,349,3,34,17,0,348,345,1,0,0,0,348,346,1,
		0,0,0,348,347,1,0,0,0,349,350,1,0,0,0,350,351,5,78,0,0,351,39,1,0,0,0,
		352,365,5,77,0,0,353,366,3,54,27,0,354,366,3,44,22,0,355,366,3,48,24,0,
		356,366,3,60,30,0,357,366,3,62,31,0,358,366,3,70,35,0,359,366,3,66,33,
		0,360,366,3,64,32,0,361,366,3,68,34,0,362,366,3,74,37,0,363,366,3,72,36,
		0,364,366,3,76,38,0,365,353,1,0,0,0,365,354,1,0,0,0,365,355,1,0,0,0,365,
		356,1,0,0,0,365,357,1,0,0,0,365,358,1,0,0,0,365,359,1,0,0,0,365,360,1,
		0,0,0,365,361,1,0,0,0,365,362,1,0,0,0,365,363,1,0,0,0,365,364,1,0,0,0,
		366,367,1,0,0,0,367,368,5,78,0,0,368,371,1,0,0,0,369,371,3,36,18,0,370,
		352,1,0,0,0,370,369,1,0,0,0,371,41,1,0,0,0,372,373,5,77,0,0,373,374,5,
		17,0,0,374,375,5,18,0,0,375,376,3,148,74,0,376,377,5,78,0,0,377,43,1,0,
		0,0,378,379,5,77,0,0,379,380,5,17,0,0,380,382,5,19,0,0,381,383,3,46,23,
		0,382,381,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,384,382,1,0,0,0,385,
		386,1,0,0,0,386,387,5,78,0,0,387,45,1,0,0,0,388,393,5,77,0,0,389,390,5,
		75,0,0,390,392,5,20,0,0,391,389,1,0,0,0,392,395,1,0,0,0,393,394,1,0,0,
		0,393,391,1,0,0,0,394,396,1,0,0,0,395,393,1,0,0,0,396,400,5,75,0,0,397,
		399,3,46,23,0,398,397,1,0,0,0,399,402,1,0,0,0,400,401,1,0,0,0,400,398,
		1,0,0,0,401,403,1,0,0,0,402,400,1,0,0,0,403,404,5,78,0,0,404,47,1,0,0,
		0,405,406,5,17,0,0,406,408,5,21,0,0,407,409,3,178,89,0,408,407,1,0,0,0,
		408,409,1,0,0,0,409,410,1,0,0,0,410,411,3,114,57,0,411,412,3,50,25,0,412,
		49,1,0,0,0,413,414,5,77,0,0,414,416,5,21,0,0,415,417,3,52,26,0,416,415,
		1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,418,416,1,0,0,0,419,420,1,0,0,
		0,420,421,5,78,0,0,421,51,1,0,0,0,422,428,5,77,0,0,423,424,3,184,92,0,
		424,425,5,20,0,0,425,427,1,0,0,0,426,423,1,0,0,0,427,430,1,0,0,0,428,429,
		1,0,0,0,428,426,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,435,3,184,
		92,0,432,434,3,52,26,0,433,432,1,0,0,0,434,437,1,0,0,0,435,436,1,0,0,0,
		435,433,1,0,0,0,436,438,1,0,0,0,437,435,1,0,0,0,438,439,5,78,0,0,439,53,
		1,0,0,0,440,441,5,22,0,0,441,442,3,78,39,0,442,444,5,77,0,0,443,445,3,
		56,28,0,444,443,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,446,444,1,0,0,
		0,447,448,1,0,0,0,448,449,5,78,0,0,449,55,1,0,0,0,450,452,5,77,0,0,451,
		453,3,58,29,0,452,451,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,454,452,
		1,0,0,0,455,456,1,0,0,0,456,457,3,148,74,0,457,458,5,78,0,0,458,57,1,0,
		0,0,459,460,5,77,0,0,460,461,3,178,89,0,461,462,5,23,0,0,462,463,3,178,
		89,0,463,464,5,78,0,0,464,59,1,0,0,0,465,466,5,24,0,0,466,472,7,3,0,0,
		467,473,3,100,50,0,468,473,5,26,0,0,469,473,5,25,0,0,470,473,5,27,0,0,
		471,473,3,4,2,0,472,467,1,0,0,0,472,468,1,0,0,0,472,469,1,0,0,0,472,470,
		1,0,0,0,472,471,1,0,0,0,473,61,1,0,0,0,474,475,5,22,0,0,475,476,3,176,
		88,0,476,477,3,148,74,0,477,63,1,0,0,0,478,479,5,22,0,0,479,480,3,180,
		90,0,480,481,3,178,89,0,481,65,1,0,0,0,482,483,5,28,0,0,483,484,3,176,
		88,0,484,485,3,148,74,0,485,67,1,0,0,0,486,487,5,29,0,0,487,488,3,176,
		88,0,488,489,3,148,74,0,489,69,1,0,0,0,490,491,5,30,0,0,491,492,3,80,40,
		0,492,493,3,80,40,0,493,71,1,0,0,0,494,495,5,31,0,0,495,496,3,114,57,0,
		496,73,1,0,0,0,497,498,5,32,0,0,498,499,5,33,0,0,499,75,1,0,0,0,500,501,
		5,34,0,0,501,502,3,148,74,0,502,503,3,40,20,0,503,511,1,0,0,0,504,505,
		5,34,0,0,505,506,5,15,0,0,506,507,5,77,0,0,507,508,3,70,35,0,508,509,5,
		78,0,0,509,511,1,0,0,0,510,500,1,0,0,0,510,504,1,0,0,0,511,77,1,0,0,0,
		512,516,5,77,0,0,513,517,3,4,2,0,514,517,5,2,0,0,515,517,3,92,46,0,516,
		513,1,0,0,0,516,514,1,0,0,0,516,515,1,0,0,0,517,518,1,0,0,0,518,519,5,
		35,0,0,519,520,3,178,89,0,520,521,5,78,0,0,521,79,1,0,0,0,522,536,3,16,
		8,0,523,536,3,84,42,0,524,536,3,86,43,0,525,536,3,82,41,0,526,530,5,77,
		0,0,527,531,5,36,0,0,528,531,5,37,0,0,529,531,3,148,74,0,530,527,1,0,0,
		0,530,528,1,0,0,0,530,529,1,0,0,0,531,532,1,0,0,0,532,533,3,114,57,0,533,
		534,5,78,0,0,534,536,1,0,0,0,535,522,1,0,0,0,535,523,1,0,0,0,535,524,1,
		0,0,0,535,525,1,0,0,0,535,526,1,0,0,0,536,81,1,0,0,0,537,538,5,77,0,0,
		538,539,5,38,0,0,539,540,3,80,40,0,540,541,5,78,0,0,541,83,1,0,0,0,542,
		543,5,77,0,0,543,544,5,7,0,0,544,545,3,114,57,0,545,546,5,39,0,0,546,547,
		3,78,39,0,547,548,5,78,0,0,548,85,1,0,0,0,549,550,5,77,0,0,550,551,5,6,
		0,0,551,552,3,114,57,0,552,553,5,39,0,0,553,554,3,78,39,0,554,555,5,78,
		0,0,555,87,1,0,0,0,556,560,5,2,0,0,557,560,3,6,3,0,558,560,3,94,47,0,559,
		556,1,0,0,0,559,557,1,0,0,0,559,558,1,0,0,0,560,89,1,0,0,0,561,562,7,4,
		0,0,562,91,1,0,0,0,563,566,3,96,48,0,564,566,3,94,47,0,565,563,1,0,0,0,
		565,564,1,0,0,0,566,93,1,0,0,0,567,568,5,77,0,0,568,569,3,98,49,0,569,
		570,5,9,0,0,570,571,5,78,0,0,571,574,1,0,0,0,572,574,3,100,50,0,573,567,
		1,0,0,0,573,572,1,0,0,0,574,95,1,0,0,0,575,576,5,77,0,0,576,577,3,98,49,
		0,577,578,5,10,0,0,578,579,5,78,0,0,579,582,1,0,0,0,580,582,3,102,51,0,
		581,575,1,0,0,0,581,580,1,0,0,0,582,97,1,0,0,0,583,588,3,148,74,0,584,
		588,5,27,0,0,585,588,5,25,0,0,586,588,5,26,0,0,587,583,1,0,0,0,587,584,
		1,0,0,0,587,585,1,0,0,0,587,586,1,0,0,0,588,99,1,0,0,0,589,590,5,77,0,
		0,590,591,5,43,0,0,591,592,3,80,40,0,592,593,5,78,0,0,593,101,1,0,0,0,
		594,595,5,77,0,0,595,598,5,10,0,0,596,599,3,6,3,0,597,599,3,94,47,0,598,
		596,1,0,0,0,598,597,1,0,0,0,599,600,1,0,0,0,600,601,5,78,0,0,601,103,1,
		0,0,0,602,607,3,148,74,0,603,607,3,142,71,0,604,607,3,178,89,0,605,607,
		3,106,53,0,606,602,1,0,0,0,606,603,1,0,0,0,606,604,1,0,0,0,606,605,1,0,
		0,0,607,105,1,0,0,0,608,619,3,12,6,0,609,619,3,124,62,0,610,619,3,114,
		57,0,611,619,3,108,54,0,612,619,3,128,64,0,613,619,5,9,0,0,614,619,5,10,
		0,0,615,619,3,96,48,0,616,619,3,112,56,0,617,619,3,110,55,0,618,608,1,
		0,0,0,618,609,1,0,0,0,618,610,1,0,0,0,618,611,1,0,0,0,618,612,1,0,0,0,
		618,613,1,0,0,0,618,614,1,0,0,0,618,615,1,0,0,0,618,616,1,0,0,0,618,617,
		1,0,0,0,619,107,1,0,0,0,620,626,5,77,0,0,621,622,3,184,92,0,622,623,5,
		20,0,0,623,625,1,0,0,0,624,621,1,0,0,0,625,628,1,0,0,0,626,627,1,0,0,0,
		626,624,1,0,0,0,627,629,1,0,0,0,628,626,1,0,0,0,629,630,3,184,92,0,630,
		631,5,78,0,0,631,109,1,0,0,0,632,633,5,77,0,0,633,634,5,44,0,0,634,635,
		3,148,74,0,635,636,5,45,0,0,636,637,3,148,74,0,637,638,5,78,0,0,638,111,
		1,0,0,0,639,640,5,77,0,0,640,641,5,46,0,0,641,642,7,1,0,0,642,643,5,78,
		0,0,643,113,1,0,0,0,644,658,3,14,7,0,645,658,3,118,59,0,646,658,3,120,
		60,0,647,658,3,122,61,0,648,658,3,116,58,0,649,658,3,124,62,0,650,651,
		5,77,0,0,651,652,3,88,44,0,652,653,3,90,45,0,653,654,3,178,89,0,654,655,
		5,78,0,0,655,658,1,0,0,0,656,658,3,126,63,0,657,644,1,0,0,0,657,645,1,
		0,0,0,657,646,1,0,0,0,657,647,1,0,0,0,657,648,1,0,0,0,657,649,1,0,0,0,
		657,650,1,0,0,0,657,656,1,0,0,0,658,115,1,0,0,0,659,660,5,77,0,0,660,661,
		5,47,0,0,661,662,3,114,57,0,662,663,5,39,0,0,663,664,3,78,39,0,664,665,
		5,78,0,0,665,117,1,0,0,0,666,667,5,77,0,0,667,674,5,48,0,0,668,675,3,140,
		70,0,669,671,3,114,57,0,670,669,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,
		0,672,670,1,0,0,0,673,675,1,0,0,0,674,668,1,0,0,0,674,670,1,0,0,0,675,
		676,1,0,0,0,676,677,5,78,0,0,677,119,1,0,0,0,678,679,5,77,0,0,679,686,
		5,49,0,0,680,687,3,140,70,0,681,683,3,114,57,0,682,681,1,0,0,0,683,684,
		1,0,0,0,684,685,1,0,0,0,684,682,1,0,0,0,685,687,1,0,0,0,686,680,1,0,0,
		0,686,682,1,0,0,0,687,688,1,0,0,0,688,689,5,78,0,0,689,121,1,0,0,0,690,
		691,5,77,0,0,691,698,5,50,0,0,692,699,3,140,70,0,693,695,3,114,57,0,694,
		693,1,0,0,0,695,696,1,0,0,0,696,697,1,0,0,0,696,694,1,0,0,0,697,699,1,
		0,0,0,698,692,1,0,0,0,698,694,1,0,0,0,699,700,1,0,0,0,700,701,5,78,0,0,
		701,123,1,0,0,0,702,703,5,77,0,0,703,704,5,51,0,0,704,705,3,106,53,0,705,
		706,3,0,0,0,706,707,3,142,71,0,707,708,5,78,0,0,708,125,1,0,0,0,709,713,
		5,77,0,0,710,714,5,36,0,0,711,714,5,37,0,0,712,714,3,148,74,0,713,710,
		1,0,0,0,713,711,1,0,0,0,713,712,1,0,0,0,714,715,1,0,0,0,715,716,3,130,
		65,0,716,717,5,78,0,0,717,127,1,0,0,0,718,722,3,130,65,0,719,722,3,140,
		70,0,720,722,3,38,19,0,721,718,1,0,0,0,721,719,1,0,0,0,721,720,1,0,0,0,
		722,129,1,0,0,0,723,727,3,136,68,0,724,727,3,138,69,0,725,727,3,134,67,
		0,726,723,1,0,0,0,726,724,1,0,0,0,726,725,1,0,0,0,727,131,1,0,0,0,728,
		729,5,77,0,0,729,730,5,52,0,0,730,731,3,114,57,0,731,732,5,39,0,0,732,
		733,3,78,39,0,733,734,5,78,0,0,734,133,1,0,0,0,735,736,5,77,0,0,736,737,
		5,53,0,0,737,738,3,114,57,0,738,739,5,78,0,0,739,135,1,0,0,0,740,741,5,
		77,0,0,741,742,5,54,0,0,742,743,3,148,74,0,743,744,3,114,57,0,744,745,
		5,39,0,0,745,746,3,78,39,0,746,747,5,78,0,0,747,137,1,0,0,0,748,749,5,
		77,0,0,749,771,5,55,0,0,750,757,3,178,89,0,751,758,3,140,70,0,752,754,
		3,114,57,0,753,752,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,755,753,1,0,
		0,0,756,758,1,0,0,0,757,751,1,0,0,0,757,753,1,0,0,0,758,772,1,0,0,0,759,
		766,5,52,0,0,760,767,3,140,70,0,761,763,3,114,57,0,762,761,1,0,0,0,763,
		764,1,0,0,0,764,765,1,0,0,0,764,762,1,0,0,0,765,767,1,0,0,0,766,760,1,
		0,0,0,766,762,1,0,0,0,767,768,1,0,0,0,768,769,5,39,0,0,769,770,3,78,39,
		0,770,772,1,0,0,0,771,750,1,0,0,0,771,759,1,0,0,0,772,773,1,0,0,0,773,
		774,5,78,0,0,774,139,1,0,0,0,775,776,5,77,0,0,776,777,5,15,0,0,777,778,
		3,106,53,0,778,779,3,0,0,0,779,780,3,114,57,0,780,781,5,78,0,0,781,141,
		1,0,0,0,782,812,5,77,0,0,783,784,5,71,0,0,784,786,3,142,71,0,785,787,3,
		142,71,0,786,785,1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,0,788,786,1,0,0,
		0,789,813,1,0,0,0,790,791,3,144,72,0,791,792,3,148,74,0,792,793,3,148,
		74,0,793,813,1,0,0,0,794,795,5,73,0,0,795,796,3,178,89,0,796,797,3,178,
		89,0,797,813,1,0,0,0,798,799,5,73,0,0,799,800,3,80,40,0,800,801,3,80,40,
		0,801,813,1,0,0,0,802,803,5,74,0,0,803,813,3,142,71,0,804,805,5,73,0,0,
		805,806,3,94,47,0,806,807,3,94,47,0,807,813,1,0,0,0,808,809,5,73,0,0,809,
		810,3,96,48,0,810,811,3,96,48,0,811,813,1,0,0,0,812,783,1,0,0,0,812,790,
		1,0,0,0,812,794,1,0,0,0,812,798,1,0,0,0,812,802,1,0,0,0,812,804,1,0,0,
		0,812,808,1,0,0,0,813,814,1,0,0,0,814,815,5,78,0,0,815,818,1,0,0,0,816,
		818,3,146,73,0,817,782,1,0,0,0,817,816,1,0,0,0,818,143,1,0,0,0,819,820,
		7,5,0,0,820,145,1,0,0,0,821,822,5,77,0,0,822,823,7,2,0,0,823,824,3,106,
		53,0,824,825,3,0,0,0,825,826,3,142,71,0,826,827,5,78,0,0,827,147,1,0,0,
		0,828,848,3,8,4,0,829,848,3,172,86,0,830,848,3,156,78,0,831,848,3,158,
		79,0,832,848,3,160,80,0,833,848,3,154,77,0,834,848,3,162,81,0,835,848,
		3,164,82,0,836,848,3,166,83,0,837,848,3,168,84,0,838,848,3,170,85,0,839,
		848,3,150,75,0,840,848,3,176,88,0,841,848,3,152,76,0,842,844,5,75,0,0,
		843,842,1,0,0,0,844,845,1,0,0,0,845,843,1,0,0,0,845,846,1,0,0,0,846,848,
		1,0,0,0,847,828,1,0,0,0,847,829,1,0,0,0,847,830,1,0,0,0,847,831,1,0,0,
		0,847,832,1,0,0,0,847,833,1,0,0,0,847,834,1,0,0,0,847,835,1,0,0,0,847,
		836,1,0,0,0,847,837,1,0,0,0,847,838,1,0,0,0,847,839,1,0,0,0,847,840,1,
		0,0,0,847,841,1,0,0,0,847,843,1,0,0,0,848,149,1,0,0,0,849,850,5,77,0,0,
		850,851,5,56,0,0,851,852,3,114,57,0,852,853,5,39,0,0,853,854,3,78,39,0,
		854,855,5,78,0,0,855,151,1,0,0,0,856,857,5,77,0,0,857,858,5,57,0,0,858,
		859,3,80,40,0,859,860,5,39,0,0,860,861,3,78,39,0,861,862,5,78,0,0,862,
		153,1,0,0,0,863,864,5,77,0,0,864,865,5,58,0,0,865,866,3,148,74,0,866,867,
		3,148,74,0,867,868,5,78,0,0,868,155,1,0,0,0,869,870,5,77,0,0,870,871,5,
		59,0,0,871,872,3,148,74,0,872,873,3,148,74,0,873,874,5,78,0,0,874,157,
		1,0,0,0,875,876,5,77,0,0,876,877,5,60,0,0,877,878,3,148,74,0,878,879,3,
		148,74,0,879,880,5,78,0,0,880,159,1,0,0,0,881,882,5,77,0,0,882,883,5,61,
		0,0,883,884,3,148,74,0,884,885,3,148,74,0,885,886,5,78,0,0,886,161,1,0,
		0,0,887,888,5,77,0,0,888,889,5,62,0,0,889,890,3,148,74,0,890,891,3,148,
		74,0,891,892,5,78,0,0,892,163,1,0,0,0,893,894,5,77,0,0,894,895,5,63,0,
		0,895,896,3,148,74,0,896,897,3,148,74,0,897,898,5,78,0,0,898,165,1,0,0,
		0,899,900,5,77,0,0,900,901,5,64,0,0,901,902,3,148,74,0,902,903,5,78,0,
		0,903,167,1,0,0,0,904,905,5,77,0,0,905,906,5,65,0,0,906,907,3,148,74,0,
		907,908,5,78,0,0,908,169,1,0,0,0,909,910,5,77,0,0,910,911,5,66,0,0,911,
		914,3,148,74,0,912,913,5,45,0,0,913,915,3,148,74,0,914,912,1,0,0,0,914,
		915,1,0,0,0,915,916,1,0,0,0,916,917,5,78,0,0,917,171,1,0,0,0,918,919,5,
		77,0,0,919,920,5,67,0,0,920,921,3,106,53,0,921,922,5,78,0,0,922,173,1,
		0,0,0,923,924,5,77,0,0,924,925,5,15,0,0,925,926,3,106,53,0,926,927,3,0,
		0,0,927,928,3,176,88,0,928,929,5,78,0,0,929,175,1,0,0,0,930,934,5,77,0,
		0,931,935,3,4,2,0,932,935,5,2,0,0,933,935,3,92,46,0,934,931,1,0,0,0,934,
		932,1,0,0,0,934,933,1,0,0,0,935,936,1,0,0,0,936,937,5,68,0,0,937,938,3,
		178,89,0,938,939,5,78,0,0,939,177,1,0,0,0,940,945,3,184,92,0,941,945,3,
		180,90,0,942,945,3,2,1,0,943,945,3,182,91,0,944,940,1,0,0,0,944,941,1,
		0,0,0,944,942,1,0,0,0,944,943,1,0,0,0,945,179,1,0,0,0,946,950,5,77,0,0,
		947,951,3,4,2,0,948,951,5,2,0,0,949,951,3,92,46,0,950,947,1,0,0,0,950,
		948,1,0,0,0,950,949,1,0,0,0,951,952,1,0,0,0,952,953,5,69,0,0,953,954,3,
		178,89,0,954,955,5,78,0,0,955,181,1,0,0,0,956,957,5,77,0,0,957,958,5,70,
		0,0,958,959,3,178,89,0,959,960,3,80,40,0,960,961,5,78,0,0,961,183,1,0,
		0,0,962,964,5,76,0,0,963,962,1,0,0,0,964,965,1,0,0,0,965,963,1,0,0,0,965,
		966,1,0,0,0,966,185,1,0,0,0,65,218,224,226,241,246,252,268,270,285,296,
		303,311,318,332,348,365,370,384,393,400,408,418,428,435,446,454,472,510,
		516,530,535,559,565,573,581,587,598,606,618,626,657,672,674,684,686,696,
		698,713,721,726,755,757,764,766,771,788,812,817,845,847,914,934,944,950,
		965
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
