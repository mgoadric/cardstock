//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/goadrich/Github/cardstock/CardStock/Recycle.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, BOOLOP=73, 
		COMPOP=74, EQOP=75, UNOP=76, INTNUM=77, LETT=78, OPEN=79, CLOSE=80, WS=81, 
		ANY=82;
	public const int
		RULE_var = 0, RULE_vars = 1, RULE_varo = 2, RULE_varp = 3, RULE_vari = 4, 
		RULE_varb = 5, RULE_varc = 6, RULE_varcs = 7, RULE_varcard = 8, RULE_game = 9, 
		RULE_setup = 10, RULE_stage = 11, RULE_scoring = 12, RULE_endcondition = 13, 
		RULE_action = 14, RULE_multiaction = 15, RULE_multiaction2 = 16, RULE_condact = 17, 
		RULE_agg = 18, RULE_aggb = 19, RULE_aggcs = 20, RULE_aggi = 21, RULE_let = 22, 
		RULE_declare = 23, RULE_playercreate = 24, RULE_teamcreate = 25, RULE_deckcreate = 26, 
		RULE_deck = 27, RULE_teams = 28, RULE_attribute = 29, RULE_initpoints = 30, 
		RULE_awards = 31, RULE_subaward = 32, RULE_cycleaction = 33, RULE_setaction = 34, 
		RULE_setstraction = 35, RULE_incaction = 36, RULE_decaction = 37, RULE_moveaction = 38, 
		RULE_copyaction = 39, RULE_removeaction = 40, RULE_shuffleaction = 41, 
		RULE_turnaction = 42, RULE_repeat = 43, RULE_card = 44, RULE_actual = 45, 
		RULE_rawstorage = 46, RULE_pointstorage = 47, RULE_strstorage = 48, RULE_cstorage = 49, 
		RULE_memstorage = 50, RULE_memset = 51, RULE_subset = 52, RULE_tuple = 53, 
		RULE_partition = 54, RULE_locpre = 55, RULE_locdesc = 56, RULE_who = 57, 
		RULE_whop = 58, RULE_whot = 59, RULE_whodesc = 60, RULE_owner = 61, RULE_teamp = 62, 
		RULE_other = 63, RULE_typed = 64, RULE_collection = 65, RULE_strcollection = 66, 
		RULE_cstoragecollection = 67, RULE_range = 68, RULE_filter = 69, RULE_cardatt = 70, 
		RULE_boolean = 71, RULE_intop = 72, RULE_add = 73, RULE_mult = 74, RULE_subtract = 75, 
		RULE_mod = 76, RULE_divide = 77, RULE_exponent = 78, RULE_triangular = 79, 
		RULE_fibonacci = 80, RULE_random = 81, RULE_sizeof = 82, RULE_maxof = 83, 
		RULE_minof = 84, RULE_sortof = 85, RULE_unionof = 86, RULE_intersectof = 87, 
		RULE_disjunctionof = 88, RULE_sum = 89, RULE_score = 90, RULE_int = 91, 
		RULE_str = 92, RULE_namegr = 93;
	public static readonly string[] ruleNames = {
		"var", "vars", "varo", "varp", "vari", "varb", "varc", "varcs", "varcard", 
		"game", "setup", "stage", "scoring", "endcondition", "action", "multiaction", 
		"multiaction2", "condact", "agg", "aggb", "aggcs", "aggi", "let", "declare", 
		"playercreate", "teamcreate", "deckcreate", "deck", "teams", "attribute", 
		"initpoints", "awards", "subaward", "cycleaction", "setaction", "setstraction", 
		"incaction", "decaction", "moveaction", "copyaction", "removeaction", 
		"shuffleaction", "turnaction", "repeat", "card", "actual", "rawstorage", 
		"pointstorage", "strstorage", "cstorage", "memstorage", "memset", "subset", 
		"tuple", "partition", "locpre", "locdesc", "who", "whop", "whot", "whodesc", 
		"owner", "teamp", "other", "typed", "collection", "strcollection", "cstoragecollection", 
		"range", "filter", "cardatt", "boolean", "intop", "add", "mult", "subtract", 
		"mod", "divide", "exponent", "triangular", "fibonacci", "random", "sizeof", 
		"maxof", "minof", "sortof", "unionof", "intersectof", "disjunctionof", 
		"sum", "score", "int", "str", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "','", "'set'", 
		"':'", "'cycle'", "'next'", "'current'", "'previous'", "'inc'", "'dec'", 
		"'move'", "'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", "'repeat'", 
		"'top'", "'bottom'", "'actual'", "'sto'", "'points'", "'str'", "'subsets'", 
		"'tuples'", "'using'", "'partition'", "'vloc'", "'iloc'", "'hloc'", "'mem'", 
		"'owner'", "'other'", "'range'", "'..'", "'filter'", "'cardatt'", "'+'", 
		"'*'", "'-'", "'%'", "'//'", "'^'", "'tri'", "'fib'", "'random'", "'size'", 
		"'sort'", "'union'", "'intersect'", "'disjunction'", "'sum'", "'score'", 
		null, null, null, "'not'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", "LETT", "OPEN", "CLOSE", 
		"WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecycleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RecycleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RecycleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(T__0);
			State = 189;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vars; } }
	}

	[RuleVersion(0)]
	public VarsContext vars() {
		VarsContext _localctx = new VarsContext(Context, State);
		EnterRule(_localctx, 2, RULE_vars);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__0);
			State = 192;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaroContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VaroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varo; } }
	}

	[RuleVersion(0)]
	public VaroContext varo() {
		VaroContext _localctx = new VaroContext(Context, State);
		EnterRule(_localctx, 4, RULE_varo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(T__0);
			State = 195;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varp; } }
	}

	[RuleVersion(0)]
	public VarpContext varp() {
		VarpContext _localctx = new VarpContext(Context, State);
		EnterRule(_localctx, 6, RULE_varp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__0);
			State = 198;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VariContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vari; } }
	}

	[RuleVersion(0)]
	public VariContext vari() {
		VariContext _localctx = new VariContext(Context, State);
		EnterRule(_localctx, 8, RULE_vari);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(T__0);
			State = 201;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varb; } }
	}

	[RuleVersion(0)]
	public VarbContext varb() {
		VarbContext _localctx = new VarbContext(Context, State);
		EnterRule(_localctx, 10, RULE_varb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(T__0);
			State = 204;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varc; } }
	}

	[RuleVersion(0)]
	public VarcContext varc() {
		VarcContext _localctx = new VarcContext(Context, State);
		EnterRule(_localctx, 12, RULE_varc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(T__0);
			State = 207;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarcsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varcs; } }
	}

	[RuleVersion(0)]
	public VarcsContext varcs() {
		VarcsContext _localctx = new VarcsContext(Context, State);
		EnterRule(_localctx, 14, RULE_varcs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(T__0);
			State = 210;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varcard; } }
	}

	[RuleVersion(0)]
	public VarcardContext varcard() {
		VarcardContext _localctx = new VarcardContext(Context, State);
		EnterRule(_localctx, 16, RULE_varcard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			Match(T__0);
			State = 213;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 18, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(OPEN);
			State = 216;
			Match(T__1);
			State = 220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 217;
					declare();
					}
					} 
				}
				State = 222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 223;
			setup();
			State = 226;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 226;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 224;
						multiaction();
						}
						break;
					case 2:
						{
						State = 225;
						stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 230;
			scoring();
			State = 231;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 20, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(OPEN);
			State = 234;
			Match(T__2);
			State = 235;
			playercreate();
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 236;
				teamcreate();
				}
				break;
			}
			State = 246;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 239;
					Match(OPEN);
					State = 242;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__16:
						{
						State = 240;
						deckcreate();
						}
						break;
					case T__35:
						{
						State = 241;
						repeat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 244;
					Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 248;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 250;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 22, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(OPEN);
			State = 253;
			Match(T__3);
			State = 254;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 255;
			endcondition();
			State = 258;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 258;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 256;
						multiaction();
						}
						break;
					case 2:
						{
						State = 257;
						stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 262;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 24, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			Match(OPEN);
			State = 265;
			Match(T__6);
			State = 266;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 267;
			@int();
			State = 268;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 26, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(OPEN);
			State = 271;
			Match(T__9);
			State = 272;
			boolean();
			State = 273;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetstractionContext setstraction() {
			return GetRuleContext<SetstractionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 28, RULE_action);
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				Match(OPEN);
				State = 290;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 276;
					initpoints();
					}
					break;
				case 2:
					{
					State = 277;
					teamcreate();
					}
					break;
				case 3:
					{
					State = 278;
					deckcreate();
					}
					break;
				case 4:
					{
					State = 279;
					cycleaction();
					}
					break;
				case 5:
					{
					State = 280;
					setaction();
					}
					break;
				case 6:
					{
					State = 281;
					moveaction();
					}
					break;
				case 7:
					{
					State = 282;
					copyaction();
					}
					break;
				case 8:
					{
					State = 283;
					incaction();
					}
					break;
				case 9:
					{
					State = 284;
					setstraction();
					}
					break;
				case 10:
					{
					State = 285;
					decaction();
					}
					break;
				case 11:
					{
					State = 286;
					removeaction();
					}
					break;
				case 12:
					{
					State = 287;
					turnaction();
					}
					break;
				case 13:
					{
					State = 288;
					shuffleaction();
					}
					break;
				case 14:
					{
					State = 289;
					repeat();
					}
					break;
				}
				State = 292;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294;
				agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 30, RULE_multiaction);
		try {
			int _alt;
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 297;
				Match(OPEN);
				State = 298;
				Match(T__10);
				State = 299;
				Match(OPEN);
				State = 301;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 300;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 303;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 305;
				Match(CLOSE);
				State = 306;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				Match(OPEN);
				State = 309;
				Match(T__11);
				State = 310;
				Match(OPEN);
				State = 312;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 311;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 314;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 316;
				Match(CLOSE);
				State = 317;
				Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 319;
				agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 320;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 32, RULE_multiaction2);
		try {
			int _alt;
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323;
				Match(OPEN);
				State = 324;
				Match(T__11);
				State = 325;
				Match(OPEN);
				State = 327;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 326;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 329;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 331;
				Match(CLOSE);
				State = 332;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 34, RULE_condact);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				Match(OPEN);
				State = 339;
				boolean();
				State = 340;
				multiaction2();
				State = 341;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 343;
				multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 344;
				Match(OPEN);
				State = 345;
				boolean();
				State = 346;
				action();
				State = 347;
				Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 349;
				action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 36, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			Match(OPEN);
			State = 353;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 354;
			collection();
			State = 355;
			var();
			State = 356;
			condact();
			State = 357;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggb; } }
	}

	[RuleVersion(0)]
	public AggbContext aggb() {
		AggbContext _localctx = new AggbContext(Context, State);
		EnterRule(_localctx, 38, RULE_aggb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(OPEN);
			State = 360;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 361;
			collection();
			State = 362;
			var();
			State = 363;
			boolean();
			State = 364;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggcsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggcsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggcs; } }
	}

	[RuleVersion(0)]
	public AggcsContext aggcs() {
		AggcsContext _localctx = new AggcsContext(Context, State);
		EnterRule(_localctx, 40, RULE_aggcs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(OPEN);
			State = 367;
			Match(T__13);
			State = 368;
			collection();
			State = 369;
			var();
			State = 370;
			cstorage();
			State = 371;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggi; } }
	}

	[RuleVersion(0)]
	public AggiContext aggi() {
		AggiContext _localctx = new AggiContext(Context, State);
		EnterRule(_localctx, 42, RULE_aggi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(OPEN);
			State = 374;
			Match(T__13);
			State = 375;
			collection();
			State = 376;
			var();
			State = 377;
			rawstorage();
			State = 378;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 44, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380;
			Match(OPEN);
			State = 381;
			Match(T__14);
			State = 382;
			typed();
			State = 383;
			var();
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 384;
				multiaction();
				}
				break;
			case 2:
				{
				State = 385;
				action();
				}
				break;
			case 3:
				{
				State = 386;
				condact();
				}
				break;
			}
			State = 389;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 46, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(OPEN);
			State = 392;
			Match(T__15);
			State = 393;
			typed();
			State = 394;
			var();
			State = 395;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 48, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(OPEN);
			State = 398;
			Match(T__16);
			State = 399;
			Match(T__17);
			State = 400;
			@int();
			State = 401;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 50, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(OPEN);
			State = 404;
			Match(T__16);
			State = 405;
			Match(T__18);
			State = 407;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 406;
					teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 409;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 411;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 52, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			Match(T__16);
			State = 414;
			Match(T__19);
			State = 416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 415;
				str();
				}
				break;
			}
			State = 418;
			cstorage();
			State = 419;
			deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 54, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(OPEN);
			State = 422;
			Match(T__19);
			State = 424;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 423;
					attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 426;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 428;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 56, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 430;
			Match(OPEN);
			State = 435;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 431;
					Match(INTNUM);
					State = 432;
					Match(T__20);
					}
					} 
				}
				State = 437;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 438;
			Match(INTNUM);
			State = 442;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 439;
					teams();
					}
					} 
				}
				State = 444;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 445;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 58, RULE_attribute);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 447;
			Match(OPEN);
			State = 453;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 448;
					namegr();
					State = 449;
					Match(T__20);
					}
					} 
				}
				State = 455;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 456;
			namegr();
			State = 460;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 457;
					attribute();
					}
					} 
				}
				State = 462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 463;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 60, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(T__21);
			State = 466;
			pointstorage();
			State = 467;
			Match(OPEN);
			State = 469;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 468;
					awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 473;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 62, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(OPEN);
			State = 477;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 476;
					subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 479;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 481;
			@int();
			State = 482;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext[] str() {
			return GetRuleContexts<StrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str(int i) {
			return GetRuleContext<StrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 64, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(OPEN);
			State = 485;
			str();
			State = 486;
			Match(T__22);
			State = 487;
			str();
			State = 488;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 66, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(T__23);
			State = 491;
			_la = TokenStream.LA(1);
			if ( !(_la==T__24 || _la==T__25) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 497;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN:
				{
				State = 492;
				owner();
				}
				break;
			case T__25:
				{
				State = 493;
				Match(T__25);
				}
				break;
			case T__24:
				{
				State = 494;
				Match(T__24);
				}
				break;
			case T__26:
				{
				State = 495;
				Match(T__26);
				}
				break;
			case T__0:
				{
				State = 496;
				varo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 68, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499;
			Match(T__21);
			State = 500;
			rawstorage();
			State = 501;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetstractionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public SetstractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setstraction; } }
	}

	[RuleVersion(0)]
	public SetstractionContext setstraction() {
		SetstractionContext _localctx = new SetstractionContext(Context, State);
		EnterRule(_localctx, 70, RULE_setstraction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(T__21);
			State = 504;
			strstorage();
			State = 505;
			str();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 72, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507;
			Match(T__27);
			State = 508;
			rawstorage();
			State = 509;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 74, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(T__28);
			State = 512;
			rawstorage();
			State = 513;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 76, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(T__29);
			State = 516;
			card();
			State = 517;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 78, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			Match(T__30);
			State = 520;
			card();
			State = 521;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 80, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			Match(T__31);
			State = 524;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 82, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			Match(T__32);
			State = 527;
			cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 84, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			Match(T__33);
			State = 530;
			Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 86, RULE_repeat);
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 532;
				Match(T__35);
				State = 533;
				@int();
				State = 534;
				action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 536;
				Match(T__35);
				State = 537;
				Match(T__13);
				State = 538;
				Match(OPEN);
				State = 539;
				moveaction();
				State = 540;
				Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarcardContext varcard() {
			return GetRuleContext<VarcardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 88, RULE_card);
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 544;
				varcard();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 545;
				maxof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 546;
				minof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 547;
				actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 548;
				Match(OPEN);
				State = 552;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__36:
					{
					State = 549;
					Match(T__36);
					}
					break;
				case T__37:
					{
					State = 550;
					Match(T__37);
					}
					break;
				case T__0:
				case INTNUM:
				case OPEN:
					{
					State = 551;
					@int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 554;
				cstorage();
				State = 555;
				Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 90, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(OPEN);
			State = 560;
			Match(T__38);
			State = 561;
			card();
			State = 562;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 92, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(OPEN);
			State = 568;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 565;
				varo();
				}
				break;
			case T__1:
				{
				State = 566;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 567;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 570;
			Match(T__39);
			State = 571;
			str();
			State = 572;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public PointstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointstorage; } }
	}

	[RuleVersion(0)]
	public PointstorageContext pointstorage() {
		PointstorageContext _localctx = new PointstorageContext(Context, State);
		EnterRule(_localctx, 94, RULE_pointstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(OPEN);
			State = 578;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 575;
				varo();
				}
				break;
			case T__1:
				{
				State = 576;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 577;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 580;
			Match(T__40);
			State = 581;
			str();
			State = 582;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VaroContext varo() {
			return GetRuleContext<VaroContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public StrstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strstorage; } }
	}

	[RuleVersion(0)]
	public StrstorageContext strstorage() {
		StrstorageContext _localctx = new StrstorageContext(Context, State);
		EnterRule(_localctx, 96, RULE_strstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 584;
			Match(OPEN);
			State = 588;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 585;
				varo();
				}
				break;
			case T__1:
				{
				State = 586;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 587;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 590;
			Match(T__41);
			State = 591;
			str();
			State = 592;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarcsContext varcs() {
			return GetRuleContext<VarcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntersectofContext intersectof() {
			return GetRuleContext<IntersectofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionofContext disjunctionof() {
			return GetRuleContext<DisjunctionofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortofContext sortof() {
			return GetRuleContext<SortofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 98, RULE_cstorage);
		try {
			State = 607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 594;
				varcs();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 595;
				unionof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 596;
				intersectof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 597;
				disjunctionof();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 598;
				sortof();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 599;
				filter();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 600;
				Match(OPEN);
				State = 601;
				locpre();
				State = 602;
				locdesc();
				State = 603;
				str();
				State = 604;
				Match(CLOSE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 606;
				memstorage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 100, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(OPEN);
			State = 613;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__36:
				{
				State = 610;
				Match(T__36);
				}
				break;
			case T__37:
				{
				State = 611;
				Match(T__37);
				}
				break;
			case T__0:
			case INTNUM:
			case OPEN:
				{
				State = 612;
				@int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 615;
			memset();
			State = 616;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionContext partition() {
			return GetRuleContext<PartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubsetContext subset() {
			return GetRuleContext<SubsetContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 102, RULE_memset);
		try {
			State = 621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 618;
				tuple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 619;
				partition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 620;
				subset();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subset; } }
	}

	[RuleVersion(0)]
	public SubsetContext subset() {
		SubsetContext _localctx = new SubsetContext(Context, State);
		EnterRule(_localctx, 104, RULE_subset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			Match(OPEN);
			State = 624;
			Match(T__42);
			State = 625;
			cstorage();
			State = 626;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 106, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			Match(OPEN);
			State = 629;
			Match(T__43);
			State = 630;
			@int();
			State = 631;
			cstorage();
			State = 632;
			Match(T__44);
			State = 633;
			pointstorage();
			State = 634;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public PartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition; } }
	}

	[RuleVersion(0)]
	public PartitionContext partition() {
		PartitionContext _localctx = new PartitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_partition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(OPEN);
			State = 637;
			Match(T__45);
			State = 644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 638;
				aggcs();
				}
				break;
			case 2:
				{
				State = 640;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 639;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 642;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 646;
			str();
			State = 647;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarpContext varp() {
			return GetRuleContext<VarpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 110, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 649;
				Match(T__1);
				}
				break;
			case T__0:
				{
				State = 650;
				varp();
				}
				break;
			case OPEN:
				{
				State = 651;
				whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 112, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 114, RULE_who);
		try {
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656;
				whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657;
				whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 116, RULE_whop);
		try {
			State = 666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 660;
				Match(OPEN);
				State = 661;
				whodesc();
				State = 662;
				Match(T__4);
				State = 663;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 665;
				owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 118, RULE_whot);
		try {
			State = 674;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 668;
				Match(OPEN);
				State = 669;
				whodesc();
				State = 670;
				Match(T__5);
				State = 671;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 673;
				teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 120, RULE_whodesc);
		try {
			State = 680;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 676;
				@int();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 677;
				Match(T__26);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 678;
				Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 679;
				Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 122, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			Match(OPEN);
			State = 683;
			Match(T__50);
			State = 684;
			card();
			State = 685;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarpContext varp() {
			return GetRuleContext<VarpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 124, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			Match(OPEN);
			State = 688;
			Match(T__5);
			State = 691;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 689;
				varp();
				}
				break;
			case OPEN:
				{
				State = 690;
				whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 693;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 126, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			Match(OPEN);
			State = 696;
			Match(T__51);
			State = 697;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 698;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 128, RULE_typed);
		try {
			State = 704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 700;
				@int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 701;
				boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 702;
				str();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 703;
				collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarcContext varc() {
			return GetRuleContext<VarcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 130, RULE_collection);
		try {
			State = 716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 706;
				varc();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 707;
				filter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 708;
				cstorage();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 709;
				strcollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 710;
				cstoragecollection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 711;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 712;
				Match(T__5);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 713;
				whot();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 714;
				other();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 715;
				range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 132, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(OPEN);
			State = 724;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 719;
					namegr();
					State = 720;
					Match(T__20);
					}
					} 
				}
				State = 726;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			State = 727;
			namegr();
			State = 728;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 134, RULE_cstoragecollection);
		try {
			State = 733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 730;
				memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 731;
				aggcs();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 732;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 136, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			Match(OPEN);
			State = 736;
			Match(T__52);
			State = 737;
			@int();
			State = 738;
			Match(T__53);
			State = 739;
			@int();
			State = 740;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 138, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 742;
			Match(OPEN);
			State = 743;
			Match(T__54);
			State = 744;
			collection();
			State = 745;
			var();
			State = 746;
			boolean();
			State = 747;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 140, RULE_cardatt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			Match(OPEN);
			State = 750;
			Match(T__55);
			State = 751;
			str();
			State = 752;
			card();
			State = 753;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext[] str() {
			return GetRuleContexts<StrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str(int i) {
			return GetRuleContext<StrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggbContext aggb() {
			return GetRuleContext<AggbContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 142, RULE_boolean);
		try {
			int _alt;
			State = 790;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 755;
				Match(OPEN);
				State = 785;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 756;
					Match(BOOLOP);
					State = 757;
					boolean();
					State = 759;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 758;
							boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 761;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 2:
					{
					State = 763;
					intop();
					State = 764;
					@int();
					State = 765;
					@int();
					}
					break;
				case 3:
					{
					State = 767;
					Match(EQOP);
					State = 768;
					str();
					State = 769;
					str();
					}
					break;
				case 4:
					{
					State = 771;
					Match(EQOP);
					State = 772;
					card();
					State = 773;
					card();
					}
					break;
				case 5:
					{
					State = 775;
					Match(UNOP);
					State = 776;
					boolean();
					}
					break;
				case 6:
					{
					State = 777;
					Match(EQOP);
					State = 778;
					whop();
					State = 779;
					whop();
					}
					break;
				case 7:
					{
					State = 781;
					Match(EQOP);
					State = 782;
					whot();
					State = 783;
					whot();
					}
					break;
				}
				State = 787;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 789;
				aggb();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 144, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 792;
			_la = TokenStream.LA(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 146, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794;
			Match(OPEN);
			State = 795;
			Match(T__56);
			State = 796;
			@int();
			State = 797;
			@int();
			State = 798;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 148, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(OPEN);
			State = 801;
			Match(T__57);
			State = 802;
			@int();
			State = 803;
			@int();
			State = 804;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 150, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			Match(OPEN);
			State = 807;
			Match(T__58);
			State = 808;
			@int();
			State = 809;
			@int();
			State = 810;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 152, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			Match(OPEN);
			State = 813;
			Match(T__59);
			State = 814;
			@int();
			State = 815;
			@int();
			State = 816;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 154, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			Match(OPEN);
			State = 819;
			Match(T__60);
			State = 820;
			@int();
			State = 821;
			@int();
			State = 822;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 156, RULE_exponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			Match(OPEN);
			State = 825;
			Match(T__61);
			State = 826;
			@int();
			State = 827;
			@int();
			State = 828;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriangularContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TriangularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triangular; } }
	}

	[RuleVersion(0)]
	public TriangularContext triangular() {
		TriangularContext _localctx = new TriangularContext(Context, State);
		EnterRule(_localctx, 158, RULE_triangular);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			Match(OPEN);
			State = 831;
			Match(T__62);
			State = 832;
			@int();
			State = 833;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FibonacciContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FibonacciContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fibonacci; } }
	}

	[RuleVersion(0)]
	public FibonacciContext fibonacci() {
		FibonacciContext _localctx = new FibonacciContext(Context, State);
		EnterRule(_localctx, 160, RULE_fibonacci);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835;
			Match(OPEN);
			State = 836;
			Match(T__63);
			State = 837;
			@int();
			State = 838;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RandomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_random; } }
	}

	[RuleVersion(0)]
	public RandomContext random() {
		RandomContext _localctx = new RandomContext(Context, State);
		EnterRule(_localctx, 162, RULE_random);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			Match(OPEN);
			State = 841;
			Match(T__64);
			State = 842;
			@int();
			State = 845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__53) {
				{
				State = 843;
				Match(T__53);
				State = 844;
				@int();
				}
			}

			State = 847;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 164, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(OPEN);
			State = 850;
			Match(T__65);
			State = 851;
			collection();
			State = 852;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 166, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 854;
			Match(OPEN);
			State = 855;
			Match(T__8);
			State = 856;
			cstorage();
			State = 857;
			Match(T__44);
			State = 858;
			pointstorage();
			State = 859;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 168, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			Match(OPEN);
			State = 862;
			Match(T__7);
			State = 863;
			cstorage();
			State = 864;
			Match(T__44);
			State = 865;
			pointstorage();
			State = 866;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SortofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortof; } }
	}

	[RuleVersion(0)]
	public SortofContext sortof() {
		SortofContext _localctx = new SortofContext(Context, State);
		EnterRule(_localctx, 170, RULE_sortof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 868;
			Match(OPEN);
			State = 869;
			Match(T__66);
			State = 870;
			cstorage();
			State = 871;
			Match(T__44);
			State = 872;
			pointstorage();
			State = 873;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 172, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 875;
			Match(OPEN);
			State = 876;
			Match(T__67);
			State = 883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 877;
				aggcs();
				}
				break;
			case 2:
				{
				State = 879;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 878;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 881;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 885;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntersectofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public IntersectofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intersectof; } }
	}

	[RuleVersion(0)]
	public IntersectofContext intersectof() {
		IntersectofContext _localctx = new IntersectofContext(Context, State);
		EnterRule(_localctx, 174, RULE_intersectof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 887;
			Match(OPEN);
			State = 888;
			Match(T__68);
			State = 895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 889;
				aggcs();
				}
				break;
			case 2:
				{
				State = 891;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 890;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 893;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 897;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggcsContext aggcs() {
			return GetRuleContext<AggcsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public DisjunctionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunctionof; } }
	}

	[RuleVersion(0)]
	public DisjunctionofContext disjunctionof() {
		DisjunctionofContext _localctx = new DisjunctionofContext(Context, State);
		EnterRule(_localctx, 176, RULE_disjunctionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			Match(OPEN);
			State = 900;
			Match(T__69);
			State = 907;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 901;
				aggcs();
				}
				break;
			case 2:
				{
				State = 903;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 902;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 905;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 909;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 178, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 911;
			Match(OPEN);
			State = 912;
			Match(T__70);
			State = 913;
			cstorage();
			State = 914;
			Match(T__44);
			State = 915;
			pointstorage();
			State = 916;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 180, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			Match(OPEN);
			State = 919;
			Match(T__71);
			State = 920;
			card();
			State = 921;
			Match(T__44);
			State = 922;
			pointstorage();
			State = 923;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariContext vari() {
			return GetRuleContext<VariContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriangularContext triangular() {
			return GetRuleContext<TriangularContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FibonacciContext fibonacci() {
			return GetRuleContext<FibonacciContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomContext random() {
			return GetRuleContext<RandomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 182, RULE_int);
		try {
			int _alt;
			State = 944;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 925;
				vari();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 926;
				@sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 927;
				mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 928;
				subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 929;
				mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 930;
				add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 931;
				divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 932;
				exponent();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 933;
				triangular();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 934;
				fibonacci();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 935;
				random();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 936;
				sum();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 937;
				rawstorage();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 938;
				score();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 940;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 939;
						Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 942;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarsContext vars() {
			return GetRuleContext<VarsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(Context, State);
		EnterRule(_localctx, 184, RULE_str);
		try {
			State = 950;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 946;
				namegr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 947;
				strstorage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 948;
				vars();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 949;
				cardatt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 186, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 953;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 952;
					Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 955;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,82,958,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
		4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,
		5,9,219,8,9,10,9,12,9,222,9,9,1,9,1,9,1,9,4,9,227,8,9,11,9,12,9,228,1,
		9,1,9,1,9,1,10,1,10,1,10,1,10,3,10,238,8,10,1,10,1,10,1,10,3,10,243,8,
		10,1,10,1,10,4,10,247,8,10,11,10,12,10,248,1,10,1,10,1,11,1,11,1,11,1,
		11,1,11,1,11,4,11,259,8,11,11,11,12,11,260,1,11,1,11,1,12,1,12,1,12,1,
		12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,291,8,14,1,14,1,14,1,14,
		3,14,296,8,14,1,15,1,15,1,15,1,15,4,15,302,8,15,11,15,12,15,303,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,4,15,313,8,15,11,15,12,15,314,1,15,1,15,1,
		15,1,15,1,15,3,15,322,8,15,1,16,1,16,1,16,1,16,4,16,328,8,16,11,16,12,
		16,329,1,16,1,16,1,16,1,16,1,16,3,16,337,8,16,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,351,8,17,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,3,22,388,8,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,
		1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,4,25,408,8,25,11,25,12,25,
		409,1,25,1,25,1,26,1,26,1,26,3,26,417,8,26,1,26,1,26,1,26,1,27,1,27,1,
		27,4,27,425,8,27,11,27,12,27,426,1,27,1,27,1,28,1,28,1,28,5,28,434,8,28,
		10,28,12,28,437,9,28,1,28,1,28,5,28,441,8,28,10,28,12,28,444,9,28,1,28,
		1,28,1,29,1,29,1,29,1,29,5,29,452,8,29,10,29,12,29,455,9,29,1,29,1,29,
		5,29,459,8,29,10,29,12,29,462,9,29,1,29,1,29,1,30,1,30,1,30,1,30,4,30,
		470,8,30,11,30,12,30,471,1,30,1,30,1,31,1,31,4,31,478,8,31,11,31,12,31,
		479,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,3,33,498,8,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
		1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,
		1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,43,1,43,1,43,3,43,543,8,43,1,44,1,44,1,44,1,44,1,44,1,
		44,1,44,1,44,3,44,553,8,44,1,44,1,44,1,44,3,44,558,8,44,1,45,1,45,1,45,
		1,45,1,45,1,46,1,46,1,46,1,46,3,46,569,8,46,1,46,1,46,1,46,1,46,1,47,1,
		47,1,47,1,47,3,47,579,8,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,
		589,8,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
		49,1,49,1,49,1,49,1,49,3,49,608,8,49,1,50,1,50,1,50,1,50,3,50,614,8,50,
		1,50,1,50,1,50,1,51,1,51,1,51,3,51,622,8,51,1,52,1,52,1,52,1,52,1,52,1,
		53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,4,54,641,8,54,
		11,54,12,54,642,3,54,645,8,54,1,54,1,54,1,54,1,55,1,55,1,55,3,55,653,8,
		55,1,56,1,56,1,57,1,57,3,57,659,8,57,1,58,1,58,1,58,1,58,1,58,1,58,3,58,
		667,8,58,1,59,1,59,1,59,1,59,1,59,1,59,3,59,675,8,59,1,60,1,60,1,60,1,
		60,3,60,681,8,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,692,
		8,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,3,64,705,8,
		64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,717,8,65,1,66,
		1,66,1,66,1,66,5,66,723,8,66,10,66,12,66,726,9,66,1,66,1,66,1,66,1,67,
		1,67,1,67,3,67,734,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,
		69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,
		71,4,71,760,8,71,11,71,12,71,761,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
		71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
		71,3,71,786,8,71,1,71,1,71,1,71,3,71,791,8,71,1,72,1,72,1,73,1,73,1,73,
		1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,
		1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,78,
		1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,
		1,80,1,81,1,81,1,81,1,81,1,81,3,81,846,8,81,1,81,1,81,1,82,1,82,1,82,1,
		82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,
		84,1,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,4,86,880,
		8,86,11,86,12,86,881,3,86,884,8,86,1,86,1,86,1,87,1,87,1,87,1,87,4,87,
		892,8,87,11,87,12,87,893,3,87,896,8,87,1,87,1,87,1,88,1,88,1,88,1,88,4,
		88,904,8,88,11,88,12,88,905,3,88,908,8,88,1,88,1,88,1,89,1,89,1,89,1,89,
		1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,
		1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,4,91,941,8,91,11,
		91,12,91,942,3,91,945,8,91,1,92,1,92,1,92,1,92,3,92,951,8,92,1,93,4,93,
		954,8,93,11,93,12,93,955,1,93,21,220,228,248,260,303,314,329,409,426,435,
		442,453,460,471,479,642,724,761,881,893,905,0,94,0,2,4,6,8,10,12,14,16,
		18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
		66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
		110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
		146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
		182,184,186,0,6,1,0,5,6,1,0,8,9,1,0,13,14,1,0,25,26,1,0,47,50,1,0,74,75,
		995,0,188,1,0,0,0,2,191,1,0,0,0,4,194,1,0,0,0,6,197,1,0,0,0,8,200,1,0,
		0,0,10,203,1,0,0,0,12,206,1,0,0,0,14,209,1,0,0,0,16,212,1,0,0,0,18,215,
		1,0,0,0,20,233,1,0,0,0,22,252,1,0,0,0,24,264,1,0,0,0,26,270,1,0,0,0,28,
		295,1,0,0,0,30,321,1,0,0,0,32,336,1,0,0,0,34,350,1,0,0,0,36,352,1,0,0,
		0,38,359,1,0,0,0,40,366,1,0,0,0,42,373,1,0,0,0,44,380,1,0,0,0,46,391,1,
		0,0,0,48,397,1,0,0,0,50,403,1,0,0,0,52,413,1,0,0,0,54,421,1,0,0,0,56,430,
		1,0,0,0,58,447,1,0,0,0,60,465,1,0,0,0,62,475,1,0,0,0,64,484,1,0,0,0,66,
		490,1,0,0,0,68,499,1,0,0,0,70,503,1,0,0,0,72,507,1,0,0,0,74,511,1,0,0,
		0,76,515,1,0,0,0,78,519,1,0,0,0,80,523,1,0,0,0,82,526,1,0,0,0,84,529,1,
		0,0,0,86,542,1,0,0,0,88,557,1,0,0,0,90,559,1,0,0,0,92,564,1,0,0,0,94,574,
		1,0,0,0,96,584,1,0,0,0,98,607,1,0,0,0,100,609,1,0,0,0,102,621,1,0,0,0,
		104,623,1,0,0,0,106,628,1,0,0,0,108,636,1,0,0,0,110,652,1,0,0,0,112,654,
		1,0,0,0,114,658,1,0,0,0,116,666,1,0,0,0,118,674,1,0,0,0,120,680,1,0,0,
		0,122,682,1,0,0,0,124,687,1,0,0,0,126,695,1,0,0,0,128,704,1,0,0,0,130,
		716,1,0,0,0,132,718,1,0,0,0,134,733,1,0,0,0,136,735,1,0,0,0,138,742,1,
		0,0,0,140,749,1,0,0,0,142,790,1,0,0,0,144,792,1,0,0,0,146,794,1,0,0,0,
		148,800,1,0,0,0,150,806,1,0,0,0,152,812,1,0,0,0,154,818,1,0,0,0,156,824,
		1,0,0,0,158,830,1,0,0,0,160,835,1,0,0,0,162,840,1,0,0,0,164,849,1,0,0,
		0,166,854,1,0,0,0,168,861,1,0,0,0,170,868,1,0,0,0,172,875,1,0,0,0,174,
		887,1,0,0,0,176,899,1,0,0,0,178,911,1,0,0,0,180,918,1,0,0,0,182,944,1,
		0,0,0,184,950,1,0,0,0,186,953,1,0,0,0,188,189,5,1,0,0,189,190,3,186,93,
		0,190,1,1,0,0,0,191,192,5,1,0,0,192,193,3,186,93,0,193,3,1,0,0,0,194,195,
		5,1,0,0,195,196,3,186,93,0,196,5,1,0,0,0,197,198,5,1,0,0,198,199,3,186,
		93,0,199,7,1,0,0,0,200,201,5,1,0,0,201,202,3,186,93,0,202,9,1,0,0,0,203,
		204,5,1,0,0,204,205,3,186,93,0,205,11,1,0,0,0,206,207,5,1,0,0,207,208,
		3,186,93,0,208,13,1,0,0,0,209,210,5,1,0,0,210,211,3,186,93,0,211,15,1,
		0,0,0,212,213,5,1,0,0,213,214,3,186,93,0,214,17,1,0,0,0,215,216,5,79,0,
		0,216,220,5,2,0,0,217,219,3,46,23,0,218,217,1,0,0,0,219,222,1,0,0,0,220,
		221,1,0,0,0,220,218,1,0,0,0,221,223,1,0,0,0,222,220,1,0,0,0,223,226,3,
		20,10,0,224,227,3,30,15,0,225,227,3,22,11,0,226,224,1,0,0,0,226,225,1,
		0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,228,226,1,0,0,0,229,230,1,0,0,0,
		230,231,3,24,12,0,231,232,5,80,0,0,232,19,1,0,0,0,233,234,5,79,0,0,234,
		235,5,3,0,0,235,237,3,48,24,0,236,238,3,50,25,0,237,236,1,0,0,0,237,238,
		1,0,0,0,238,246,1,0,0,0,239,242,5,79,0,0,240,243,3,52,26,0,241,243,3,86,
		43,0,242,240,1,0,0,0,242,241,1,0,0,0,243,244,1,0,0,0,244,245,5,80,0,0,
		245,247,1,0,0,0,246,239,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,248,246,
		1,0,0,0,249,250,1,0,0,0,250,251,5,80,0,0,251,21,1,0,0,0,252,253,5,79,0,
		0,253,254,5,4,0,0,254,255,7,0,0,0,255,258,3,26,13,0,256,259,3,30,15,0,
		257,259,3,22,11,0,258,256,1,0,0,0,258,257,1,0,0,0,259,260,1,0,0,0,260,
		261,1,0,0,0,260,258,1,0,0,0,261,262,1,0,0,0,262,263,5,80,0,0,263,23,1,
		0,0,0,264,265,5,79,0,0,265,266,5,7,0,0,266,267,7,1,0,0,267,268,3,182,91,
		0,268,269,5,80,0,0,269,25,1,0,0,0,270,271,5,79,0,0,271,272,5,10,0,0,272,
		273,3,142,71,0,273,274,5,80,0,0,274,27,1,0,0,0,275,290,5,79,0,0,276,291,
		3,60,30,0,277,291,3,50,25,0,278,291,3,52,26,0,279,291,3,66,33,0,280,291,
		3,68,34,0,281,291,3,76,38,0,282,291,3,78,39,0,283,291,3,72,36,0,284,291,
		3,70,35,0,285,291,3,74,37,0,286,291,3,80,40,0,287,291,3,84,42,0,288,291,
		3,82,41,0,289,291,3,86,43,0,290,276,1,0,0,0,290,277,1,0,0,0,290,278,1,
		0,0,0,290,279,1,0,0,0,290,280,1,0,0,0,290,281,1,0,0,0,290,282,1,0,0,0,
		290,283,1,0,0,0,290,284,1,0,0,0,290,285,1,0,0,0,290,286,1,0,0,0,290,287,
		1,0,0,0,290,288,1,0,0,0,290,289,1,0,0,0,291,292,1,0,0,0,292,293,5,80,0,
		0,293,296,1,0,0,0,294,296,3,36,18,0,295,275,1,0,0,0,295,294,1,0,0,0,296,
		29,1,0,0,0,297,298,5,79,0,0,298,299,5,11,0,0,299,301,5,79,0,0,300,302,
		3,34,17,0,301,300,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,303,301,1,0,
		0,0,304,305,1,0,0,0,305,306,5,80,0,0,306,307,5,80,0,0,307,322,1,0,0,0,
		308,309,5,79,0,0,309,310,5,12,0,0,310,312,5,79,0,0,311,313,3,34,17,0,312,
		311,1,0,0,0,313,314,1,0,0,0,314,315,1,0,0,0,314,312,1,0,0,0,315,316,1,
		0,0,0,316,317,5,80,0,0,317,318,5,80,0,0,318,322,1,0,0,0,319,322,3,36,18,
		0,320,322,3,44,22,0,321,297,1,0,0,0,321,308,1,0,0,0,321,319,1,0,0,0,321,
		320,1,0,0,0,322,31,1,0,0,0,323,324,5,79,0,0,324,325,5,12,0,0,325,327,5,
		79,0,0,326,328,3,34,17,0,327,326,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,
		0,329,327,1,0,0,0,330,331,1,0,0,0,331,332,5,80,0,0,332,333,5,80,0,0,333,
		337,1,0,0,0,334,337,3,36,18,0,335,337,3,44,22,0,336,323,1,0,0,0,336,334,
		1,0,0,0,336,335,1,0,0,0,337,33,1,0,0,0,338,339,5,79,0,0,339,340,3,142,
		71,0,340,341,3,32,16,0,341,342,5,80,0,0,342,351,1,0,0,0,343,351,3,32,16,
		0,344,345,5,79,0,0,345,346,3,142,71,0,346,347,3,28,14,0,347,348,5,80,0,
		0,348,351,1,0,0,0,349,351,3,28,14,0,350,338,1,0,0,0,350,343,1,0,0,0,350,
		344,1,0,0,0,350,349,1,0,0,0,351,35,1,0,0,0,352,353,5,79,0,0,353,354,7,
		2,0,0,354,355,3,130,65,0,355,356,3,0,0,0,356,357,3,34,17,0,357,358,5,80,
		0,0,358,37,1,0,0,0,359,360,5,79,0,0,360,361,7,2,0,0,361,362,3,130,65,0,
		362,363,3,0,0,0,363,364,3,142,71,0,364,365,5,80,0,0,365,39,1,0,0,0,366,
		367,5,79,0,0,367,368,5,14,0,0,368,369,3,130,65,0,369,370,3,0,0,0,370,371,
		3,98,49,0,371,372,5,80,0,0,372,41,1,0,0,0,373,374,5,79,0,0,374,375,5,14,
		0,0,375,376,3,130,65,0,376,377,3,0,0,0,377,378,3,92,46,0,378,379,5,80,
		0,0,379,43,1,0,0,0,380,381,5,79,0,0,381,382,5,15,0,0,382,383,3,128,64,
		0,383,387,3,0,0,0,384,388,3,30,15,0,385,388,3,28,14,0,386,388,3,34,17,
		0,387,384,1,0,0,0,387,385,1,0,0,0,387,386,1,0,0,0,388,389,1,0,0,0,389,
		390,5,80,0,0,390,45,1,0,0,0,391,392,5,79,0,0,392,393,5,16,0,0,393,394,
		3,128,64,0,394,395,3,0,0,0,395,396,5,80,0,0,396,47,1,0,0,0,397,398,5,79,
		0,0,398,399,5,17,0,0,399,400,5,18,0,0,400,401,3,182,91,0,401,402,5,80,
		0,0,402,49,1,0,0,0,403,404,5,79,0,0,404,405,5,17,0,0,405,407,5,19,0,0,
		406,408,3,56,28,0,407,406,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,409,
		407,1,0,0,0,410,411,1,0,0,0,411,412,5,80,0,0,412,51,1,0,0,0,413,414,5,
		17,0,0,414,416,5,20,0,0,415,417,3,184,92,0,416,415,1,0,0,0,416,417,1,0,
		0,0,417,418,1,0,0,0,418,419,3,98,49,0,419,420,3,54,27,0,420,53,1,0,0,0,
		421,422,5,79,0,0,422,424,5,20,0,0,423,425,3,58,29,0,424,423,1,0,0,0,425,
		426,1,0,0,0,426,427,1,0,0,0,426,424,1,0,0,0,427,428,1,0,0,0,428,429,5,
		80,0,0,429,55,1,0,0,0,430,435,5,79,0,0,431,432,5,77,0,0,432,434,5,21,0,
		0,433,431,1,0,0,0,434,437,1,0,0,0,435,436,1,0,0,0,435,433,1,0,0,0,436,
		438,1,0,0,0,437,435,1,0,0,0,438,442,5,77,0,0,439,441,3,56,28,0,440,439,
		1,0,0,0,441,444,1,0,0,0,442,443,1,0,0,0,442,440,1,0,0,0,443,445,1,0,0,
		0,444,442,1,0,0,0,445,446,5,80,0,0,446,57,1,0,0,0,447,453,5,79,0,0,448,
		449,3,186,93,0,449,450,5,21,0,0,450,452,1,0,0,0,451,448,1,0,0,0,452,455,
		1,0,0,0,453,454,1,0,0,0,453,451,1,0,0,0,454,456,1,0,0,0,455,453,1,0,0,
		0,456,460,3,186,93,0,457,459,3,58,29,0,458,457,1,0,0,0,459,462,1,0,0,0,
		460,461,1,0,0,0,460,458,1,0,0,0,461,463,1,0,0,0,462,460,1,0,0,0,463,464,
		5,80,0,0,464,59,1,0,0,0,465,466,5,22,0,0,466,467,3,94,47,0,467,469,5,79,
		0,0,468,470,3,62,31,0,469,468,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,
		471,469,1,0,0,0,472,473,1,0,0,0,473,474,5,80,0,0,474,61,1,0,0,0,475,477,
		5,79,0,0,476,478,3,64,32,0,477,476,1,0,0,0,478,479,1,0,0,0,479,480,1,0,
		0,0,479,477,1,0,0,0,480,481,1,0,0,0,481,482,3,182,91,0,482,483,5,80,0,
		0,483,63,1,0,0,0,484,485,5,79,0,0,485,486,3,184,92,0,486,487,5,23,0,0,
		487,488,3,184,92,0,488,489,5,80,0,0,489,65,1,0,0,0,490,491,5,24,0,0,491,
		497,7,3,0,0,492,498,3,122,61,0,493,498,5,26,0,0,494,498,5,25,0,0,495,498,
		5,27,0,0,496,498,3,4,2,0,497,492,1,0,0,0,497,493,1,0,0,0,497,494,1,0,0,
		0,497,495,1,0,0,0,497,496,1,0,0,0,498,67,1,0,0,0,499,500,5,22,0,0,500,
		501,3,92,46,0,501,502,3,182,91,0,502,69,1,0,0,0,503,504,5,22,0,0,504,505,
		3,96,48,0,505,506,3,184,92,0,506,71,1,0,0,0,507,508,5,28,0,0,508,509,3,
		92,46,0,509,510,3,182,91,0,510,73,1,0,0,0,511,512,5,29,0,0,512,513,3,92,
		46,0,513,514,3,182,91,0,514,75,1,0,0,0,515,516,5,30,0,0,516,517,3,88,44,
		0,517,518,3,88,44,0,518,77,1,0,0,0,519,520,5,31,0,0,520,521,3,88,44,0,
		521,522,3,88,44,0,522,79,1,0,0,0,523,524,5,32,0,0,524,525,3,88,44,0,525,
		81,1,0,0,0,526,527,5,33,0,0,527,528,3,98,49,0,528,83,1,0,0,0,529,530,5,
		34,0,0,530,531,5,35,0,0,531,85,1,0,0,0,532,533,5,36,0,0,533,534,3,182,
		91,0,534,535,3,28,14,0,535,543,1,0,0,0,536,537,5,36,0,0,537,538,5,14,0,
		0,538,539,5,79,0,0,539,540,3,76,38,0,540,541,5,80,0,0,541,543,1,0,0,0,
		542,532,1,0,0,0,542,536,1,0,0,0,543,87,1,0,0,0,544,558,3,16,8,0,545,558,
		3,166,83,0,546,558,3,168,84,0,547,558,3,90,45,0,548,552,5,79,0,0,549,553,
		5,37,0,0,550,553,5,38,0,0,551,553,3,182,91,0,552,549,1,0,0,0,552,550,1,
		0,0,0,552,551,1,0,0,0,553,554,1,0,0,0,554,555,3,98,49,0,555,556,5,80,0,
		0,556,558,1,0,0,0,557,544,1,0,0,0,557,545,1,0,0,0,557,546,1,0,0,0,557,
		547,1,0,0,0,557,548,1,0,0,0,558,89,1,0,0,0,559,560,5,79,0,0,560,561,5,
		39,0,0,561,562,3,88,44,0,562,563,5,80,0,0,563,91,1,0,0,0,564,568,5,79,
		0,0,565,569,3,4,2,0,566,569,5,2,0,0,567,569,3,114,57,0,568,565,1,0,0,0,
		568,566,1,0,0,0,568,567,1,0,0,0,569,570,1,0,0,0,570,571,5,40,0,0,571,572,
		3,184,92,0,572,573,5,80,0,0,573,93,1,0,0,0,574,578,5,79,0,0,575,579,3,
		4,2,0,576,579,5,2,0,0,577,579,3,114,57,0,578,575,1,0,0,0,578,576,1,0,0,
		0,578,577,1,0,0,0,579,580,1,0,0,0,580,581,5,41,0,0,581,582,3,184,92,0,
		582,583,5,80,0,0,583,95,1,0,0,0,584,588,5,79,0,0,585,589,3,4,2,0,586,589,
		5,2,0,0,587,589,3,114,57,0,588,585,1,0,0,0,588,586,1,0,0,0,588,587,1,0,
		0,0,589,590,1,0,0,0,590,591,5,42,0,0,591,592,3,184,92,0,592,593,5,80,0,
		0,593,97,1,0,0,0,594,608,3,14,7,0,595,608,3,172,86,0,596,608,3,174,87,
		0,597,608,3,176,88,0,598,608,3,170,85,0,599,608,3,138,69,0,600,601,5,79,
		0,0,601,602,3,110,55,0,602,603,3,112,56,0,603,604,3,184,92,0,604,605,5,
		80,0,0,605,608,1,0,0,0,606,608,3,100,50,0,607,594,1,0,0,0,607,595,1,0,
		0,0,607,596,1,0,0,0,607,597,1,0,0,0,607,598,1,0,0,0,607,599,1,0,0,0,607,
		600,1,0,0,0,607,606,1,0,0,0,608,99,1,0,0,0,609,613,5,79,0,0,610,614,5,
		37,0,0,611,614,5,38,0,0,612,614,3,182,91,0,613,610,1,0,0,0,613,611,1,0,
		0,0,613,612,1,0,0,0,614,615,1,0,0,0,615,616,3,102,51,0,616,617,5,80,0,
		0,617,101,1,0,0,0,618,622,3,106,53,0,619,622,3,108,54,0,620,622,3,104,
		52,0,621,618,1,0,0,0,621,619,1,0,0,0,621,620,1,0,0,0,622,103,1,0,0,0,623,
		624,5,79,0,0,624,625,5,43,0,0,625,626,3,98,49,0,626,627,5,80,0,0,627,105,
		1,0,0,0,628,629,5,79,0,0,629,630,5,44,0,0,630,631,3,182,91,0,631,632,3,
		98,49,0,632,633,5,45,0,0,633,634,3,94,47,0,634,635,5,80,0,0,635,107,1,
		0,0,0,636,637,5,79,0,0,637,644,5,46,0,0,638,645,3,40,20,0,639,641,3,98,
		49,0,640,639,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,642,640,1,0,0,0,643,
		645,1,0,0,0,644,638,1,0,0,0,644,640,1,0,0,0,645,646,1,0,0,0,646,647,3,
		184,92,0,647,648,5,80,0,0,648,109,1,0,0,0,649,653,5,2,0,0,650,653,3,6,
		3,0,651,653,3,116,58,0,652,649,1,0,0,0,652,650,1,0,0,0,652,651,1,0,0,0,
		653,111,1,0,0,0,654,655,7,4,0,0,655,113,1,0,0,0,656,659,3,118,59,0,657,
		659,3,116,58,0,658,656,1,0,0,0,658,657,1,0,0,0,659,115,1,0,0,0,660,661,
		5,79,0,0,661,662,3,120,60,0,662,663,5,5,0,0,663,664,5,80,0,0,664,667,1,
		0,0,0,665,667,3,122,61,0,666,660,1,0,0,0,666,665,1,0,0,0,667,117,1,0,0,
		0,668,669,5,79,0,0,669,670,3,120,60,0,670,671,5,6,0,0,671,672,5,80,0,0,
		672,675,1,0,0,0,673,675,3,124,62,0,674,668,1,0,0,0,674,673,1,0,0,0,675,
		119,1,0,0,0,676,681,3,182,91,0,677,681,5,27,0,0,678,681,5,25,0,0,679,681,
		5,26,0,0,680,676,1,0,0,0,680,677,1,0,0,0,680,678,1,0,0,0,680,679,1,0,0,
		0,681,121,1,0,0,0,682,683,5,79,0,0,683,684,5,51,0,0,684,685,3,88,44,0,
		685,686,5,80,0,0,686,123,1,0,0,0,687,688,5,79,0,0,688,691,5,6,0,0,689,
		692,3,6,3,0,690,692,3,116,58,0,691,689,1,0,0,0,691,690,1,0,0,0,692,693,
		1,0,0,0,693,694,5,80,0,0,694,125,1,0,0,0,695,696,5,79,0,0,696,697,5,52,
		0,0,697,698,7,0,0,0,698,699,5,80,0,0,699,127,1,0,0,0,700,705,3,182,91,
		0,701,705,3,142,71,0,702,705,3,184,92,0,703,705,3,130,65,0,704,700,1,0,
		0,0,704,701,1,0,0,0,704,702,1,0,0,0,704,703,1,0,0,0,705,129,1,0,0,0,706,
		717,3,12,6,0,707,717,3,138,69,0,708,717,3,98,49,0,709,717,3,132,66,0,710,
		717,3,134,67,0,711,717,5,5,0,0,712,717,5,6,0,0,713,717,3,118,59,0,714,
		717,3,126,63,0,715,717,3,136,68,0,716,706,1,0,0,0,716,707,1,0,0,0,716,
		708,1,0,0,0,716,709,1,0,0,0,716,710,1,0,0,0,716,711,1,0,0,0,716,712,1,
		0,0,0,716,713,1,0,0,0,716,714,1,0,0,0,716,715,1,0,0,0,717,131,1,0,0,0,
		718,724,5,79,0,0,719,720,3,186,93,0,720,721,5,21,0,0,721,723,1,0,0,0,722,
		719,1,0,0,0,723,726,1,0,0,0,724,725,1,0,0,0,724,722,1,0,0,0,725,727,1,
		0,0,0,726,724,1,0,0,0,727,728,3,186,93,0,728,729,5,80,0,0,729,133,1,0,
		0,0,730,734,3,102,51,0,731,734,3,40,20,0,732,734,3,44,22,0,733,730,1,0,
		0,0,733,731,1,0,0,0,733,732,1,0,0,0,734,135,1,0,0,0,735,736,5,79,0,0,736,
		737,5,53,0,0,737,738,3,182,91,0,738,739,5,54,0,0,739,740,3,182,91,0,740,
		741,5,80,0,0,741,137,1,0,0,0,742,743,5,79,0,0,743,744,5,55,0,0,744,745,
		3,130,65,0,745,746,3,0,0,0,746,747,3,142,71,0,747,748,5,80,0,0,748,139,
		1,0,0,0,749,750,5,79,0,0,750,751,5,56,0,0,751,752,3,184,92,0,752,753,3,
		88,44,0,753,754,5,80,0,0,754,141,1,0,0,0,755,785,5,79,0,0,756,757,5,73,
		0,0,757,759,3,142,71,0,758,760,3,142,71,0,759,758,1,0,0,0,760,761,1,0,
		0,0,761,762,1,0,0,0,761,759,1,0,0,0,762,786,1,0,0,0,763,764,3,144,72,0,
		764,765,3,182,91,0,765,766,3,182,91,0,766,786,1,0,0,0,767,768,5,75,0,0,
		768,769,3,184,92,0,769,770,3,184,92,0,770,786,1,0,0,0,771,772,5,75,0,0,
		772,773,3,88,44,0,773,774,3,88,44,0,774,786,1,0,0,0,775,776,5,76,0,0,776,
		786,3,142,71,0,777,778,5,75,0,0,778,779,3,116,58,0,779,780,3,116,58,0,
		780,786,1,0,0,0,781,782,5,75,0,0,782,783,3,118,59,0,783,784,3,118,59,0,
		784,786,1,0,0,0,785,756,1,0,0,0,785,763,1,0,0,0,785,767,1,0,0,0,785,771,
		1,0,0,0,785,775,1,0,0,0,785,777,1,0,0,0,785,781,1,0,0,0,786,787,1,0,0,
		0,787,788,5,80,0,0,788,791,1,0,0,0,789,791,3,38,19,0,790,755,1,0,0,0,790,
		789,1,0,0,0,791,143,1,0,0,0,792,793,7,5,0,0,793,145,1,0,0,0,794,795,5,
		79,0,0,795,796,5,57,0,0,796,797,3,182,91,0,797,798,3,182,91,0,798,799,
		5,80,0,0,799,147,1,0,0,0,800,801,5,79,0,0,801,802,5,58,0,0,802,803,3,182,
		91,0,803,804,3,182,91,0,804,805,5,80,0,0,805,149,1,0,0,0,806,807,5,79,
		0,0,807,808,5,59,0,0,808,809,3,182,91,0,809,810,3,182,91,0,810,811,5,80,
		0,0,811,151,1,0,0,0,812,813,5,79,0,0,813,814,5,60,0,0,814,815,3,182,91,
		0,815,816,3,182,91,0,816,817,5,80,0,0,817,153,1,0,0,0,818,819,5,79,0,0,
		819,820,5,61,0,0,820,821,3,182,91,0,821,822,3,182,91,0,822,823,5,80,0,
		0,823,155,1,0,0,0,824,825,5,79,0,0,825,826,5,62,0,0,826,827,3,182,91,0,
		827,828,3,182,91,0,828,829,5,80,0,0,829,157,1,0,0,0,830,831,5,79,0,0,831,
		832,5,63,0,0,832,833,3,182,91,0,833,834,5,80,0,0,834,159,1,0,0,0,835,836,
		5,79,0,0,836,837,5,64,0,0,837,838,3,182,91,0,838,839,5,80,0,0,839,161,
		1,0,0,0,840,841,5,79,0,0,841,842,5,65,0,0,842,845,3,182,91,0,843,844,5,
		54,0,0,844,846,3,182,91,0,845,843,1,0,0,0,845,846,1,0,0,0,846,847,1,0,
		0,0,847,848,5,80,0,0,848,163,1,0,0,0,849,850,5,79,0,0,850,851,5,66,0,0,
		851,852,3,130,65,0,852,853,5,80,0,0,853,165,1,0,0,0,854,855,5,79,0,0,855,
		856,5,9,0,0,856,857,3,98,49,0,857,858,5,45,0,0,858,859,3,94,47,0,859,860,
		5,80,0,0,860,167,1,0,0,0,861,862,5,79,0,0,862,863,5,8,0,0,863,864,3,98,
		49,0,864,865,5,45,0,0,865,866,3,94,47,0,866,867,5,80,0,0,867,169,1,0,0,
		0,868,869,5,79,0,0,869,870,5,67,0,0,870,871,3,98,49,0,871,872,5,45,0,0,
		872,873,3,94,47,0,873,874,5,80,0,0,874,171,1,0,0,0,875,876,5,79,0,0,876,
		883,5,68,0,0,877,884,3,40,20,0,878,880,3,98,49,0,879,878,1,0,0,0,880,881,
		1,0,0,0,881,882,1,0,0,0,881,879,1,0,0,0,882,884,1,0,0,0,883,877,1,0,0,
		0,883,879,1,0,0,0,884,885,1,0,0,0,885,886,5,80,0,0,886,173,1,0,0,0,887,
		888,5,79,0,0,888,895,5,69,0,0,889,896,3,40,20,0,890,892,3,98,49,0,891,
		890,1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,893,891,1,0,0,0,894,896,1,
		0,0,0,895,889,1,0,0,0,895,891,1,0,0,0,896,897,1,0,0,0,897,898,5,80,0,0,
		898,175,1,0,0,0,899,900,5,79,0,0,900,907,5,70,0,0,901,908,3,40,20,0,902,
		904,3,98,49,0,903,902,1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,0,905,903,
		1,0,0,0,906,908,1,0,0,0,907,901,1,0,0,0,907,903,1,0,0,0,908,909,1,0,0,
		0,909,910,5,80,0,0,910,177,1,0,0,0,911,912,5,79,0,0,912,913,5,71,0,0,913,
		914,3,98,49,0,914,915,5,45,0,0,915,916,3,94,47,0,916,917,5,80,0,0,917,
		179,1,0,0,0,918,919,5,79,0,0,919,920,5,72,0,0,920,921,3,88,44,0,921,922,
		5,45,0,0,922,923,3,94,47,0,923,924,5,80,0,0,924,181,1,0,0,0,925,945,3,
		8,4,0,926,945,3,164,82,0,927,945,3,148,74,0,928,945,3,150,75,0,929,945,
		3,152,76,0,930,945,3,146,73,0,931,945,3,154,77,0,932,945,3,156,78,0,933,
		945,3,158,79,0,934,945,3,160,80,0,935,945,3,162,81,0,936,945,3,178,89,
		0,937,945,3,92,46,0,938,945,3,180,90,0,939,941,5,77,0,0,940,939,1,0,0,
		0,941,942,1,0,0,0,942,940,1,0,0,0,942,943,1,0,0,0,943,945,1,0,0,0,944,
		925,1,0,0,0,944,926,1,0,0,0,944,927,1,0,0,0,944,928,1,0,0,0,944,929,1,
		0,0,0,944,930,1,0,0,0,944,931,1,0,0,0,944,932,1,0,0,0,944,933,1,0,0,0,
		944,934,1,0,0,0,944,935,1,0,0,0,944,936,1,0,0,0,944,937,1,0,0,0,944,938,
		1,0,0,0,944,940,1,0,0,0,945,183,1,0,0,0,946,951,3,186,93,0,947,951,3,96,
		48,0,948,951,3,2,1,0,949,951,3,140,70,0,950,946,1,0,0,0,950,947,1,0,0,
		0,950,948,1,0,0,0,950,949,1,0,0,0,951,185,1,0,0,0,952,954,5,78,0,0,953,
		952,1,0,0,0,954,955,1,0,0,0,955,953,1,0,0,0,955,956,1,0,0,0,956,187,1,
		0,0,0,62,220,226,228,237,242,248,258,260,290,295,303,314,321,329,336,350,
		387,409,416,426,435,442,453,460,471,479,497,542,552,557,568,578,588,607,
		613,621,642,644,652,658,666,674,680,691,704,716,724,733,761,785,790,845,
		881,883,893,895,905,907,942,944,950,955
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
