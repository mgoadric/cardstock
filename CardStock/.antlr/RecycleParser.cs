//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/goadrich/Github/cardstock/CardStock/Recycle.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, BOOLOP=73, 
		COMPOP=74, EQOP=75, UNOP=76, INTNUM=77, LETT=78, OPEN=79, CLOSE=80, WS=81, 
		ANY=82;
	public const int
		RULE_var = 0, RULE_game = 1, RULE_setup = 2, RULE_stage = 3, RULE_scoring = 4, 
		RULE_endcondition = 5, RULE_action = 6, RULE_multiaction = 7, RULE_multiaction2 = 8, 
		RULE_condact = 9, RULE_agg = 10, RULE_let = 11, RULE_declare = 12, RULE_playercreate = 13, 
		RULE_teamcreate = 14, RULE_deckcreate = 15, RULE_deck = 16, RULE_teams = 17, 
		RULE_attribute = 18, RULE_initpoints = 19, RULE_awards = 20, RULE_subaward = 21, 
		RULE_cycleaction = 22, RULE_setaction = 23, RULE_setstraction = 24, RULE_incaction = 25, 
		RULE_decaction = 26, RULE_moveaction = 27, RULE_copyaction = 28, RULE_removeaction = 29, 
		RULE_shuffleaction = 30, RULE_turnaction = 31, RULE_repeat = 32, RULE_card = 33, 
		RULE_actual = 34, RULE_rawstorage = 35, RULE_pointstorage = 36, RULE_strstorage = 37, 
		RULE_cstorage = 38, RULE_memstorage = 39, RULE_memset = 40, RULE_subset = 41, 
		RULE_tuple = 42, RULE_partition = 43, RULE_locpre = 44, RULE_locdesc = 45, 
		RULE_who = 46, RULE_whop = 47, RULE_whot = 48, RULE_whodesc = 49, RULE_owner = 50, 
		RULE_teamp = 51, RULE_other = 52, RULE_typed = 53, RULE_collection = 54, 
		RULE_strcollection = 55, RULE_cstoragecollection = 56, RULE_range = 57, 
		RULE_filter = 58, RULE_attrcomp = 59, RULE_cardatt = 60, RULE_boolean = 61, 
		RULE_intop = 62, RULE_add = 63, RULE_mult = 64, RULE_subtract = 65, RULE_mod = 66, 
		RULE_divide = 67, RULE_exponent = 68, RULE_triangular = 69, RULE_fibonacci = 70, 
		RULE_random = 71, RULE_sizeof = 72, RULE_maxof = 73, RULE_minof = 74, 
		RULE_sortof = 75, RULE_unionof = 76, RULE_intersectof = 77, RULE_disjunctionof = 78, 
		RULE_sum = 79, RULE_score = 80, RULE_int = 81, RULE_str = 82, RULE_namegr = 83;
	public static readonly string[] ruleNames = {
		"var", "game", "setup", "stage", "scoring", "endcondition", "action", 
		"multiaction", "multiaction2", "condact", "agg", "let", "declare", "playercreate", 
		"teamcreate", "deckcreate", "deck", "teams", "attribute", "initpoints", 
		"awards", "subaward", "cycleaction", "setaction", "setstraction", "incaction", 
		"decaction", "moveaction", "copyaction", "removeaction", "shuffleaction", 
		"turnaction", "repeat", "card", "actual", "rawstorage", "pointstorage", 
		"strstorage", "cstorage", "memstorage", "memset", "subset", "tuple", "partition", 
		"locpre", "locdesc", "who", "whop", "whot", "whodesc", "owner", "teamp", 
		"other", "typed", "collection", "strcollection", "cstoragecollection", 
		"range", "filter", "attrcomp", "cardatt", "boolean", "intop", "add", "mult", 
		"subtract", "mod", "divide", "exponent", "triangular", "fibonacci", "random", 
		"sizeof", "maxof", "minof", "sortof", "unionof", "intersectof", "disjunctionof", 
		"sum", "score", "int", "str", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "','", "'set'", 
		"':'", "'cycle'", "'next'", "'current'", "'previous'", "'inc'", "'dec'", 
		"'move'", "'remember'", "'forget'", "'shuffle'", "'turn'", "'pass'", "'repeat'", 
		"'top'", "'bottom'", "'actual'", "'sto'", "'points'", "'str'", "'subsets'", 
		"'tuples'", "'using'", "'partition'", "'vloc'", "'iloc'", "'hloc'", "'mem'", 
		"'owner'", "'other'", "'range'", "'..'", "'filter'", "'cardatt'", "'+'", 
		"'*'", "'-'", "'%'", "'//'", "'^'", "'tri'", "'fib'", "'random'", "'size'", 
		"'sort'", "'union'", "'intersect'", "'disjunction'", "'sum'", "'score'", 
		null, null, null, "'not'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", "LETT", "OPEN", "CLOSE", 
		"WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RecycleParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RecycleParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RecycleParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class VarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(T__0);
			State = 169;
			namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 2, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			Match(OPEN);
			State = 172;
			Match(T__1);
			State = 176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 173;
					declare();
					}
					} 
				}
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 179;
			setup();
			State = 182;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 182;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 180;
						multiaction();
						}
						break;
					case 2:
						{
						State = 181;
						stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 186;
			scoring();
			State = 187;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 4, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(OPEN);
			State = 190;
			Match(T__2);
			State = 191;
			playercreate();
			State = 193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 192;
				teamcreate();
				}
				break;
			}
			State = 202;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 195;
					Match(OPEN);
					State = 198;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__16:
						{
						State = 196;
						deckcreate();
						}
						break;
					case T__35:
						{
						State = 197;
						repeat();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 200;
					Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 206;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 6, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(OPEN);
			State = 209;
			Match(T__3);
			State = 210;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 211;
			endcondition();
			State = 214;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 214;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						State = 212;
						multiaction();
						}
						break;
					case 2:
						{
						State = 213;
						stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 218;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 8, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(OPEN);
			State = 221;
			Match(T__6);
			State = 222;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 223;
			@int();
			State = 224;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			Match(OPEN);
			State = 227;
			Match(T__9);
			State = 228;
			boolean();
			State = 229;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetstractionContext setstraction() {
			return GetRuleContext<SetstractionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_action);
		try {
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				Match(OPEN);
				State = 246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 232;
					initpoints();
					}
					break;
				case 2:
					{
					State = 233;
					teamcreate();
					}
					break;
				case 3:
					{
					State = 234;
					deckcreate();
					}
					break;
				case 4:
					{
					State = 235;
					cycleaction();
					}
					break;
				case 5:
					{
					State = 236;
					setaction();
					}
					break;
				case 6:
					{
					State = 237;
					moveaction();
					}
					break;
				case 7:
					{
					State = 238;
					copyaction();
					}
					break;
				case 8:
					{
					State = 239;
					incaction();
					}
					break;
				case 9:
					{
					State = 240;
					setstraction();
					}
					break;
				case 10:
					{
					State = 241;
					decaction();
					}
					break;
				case 11:
					{
					State = 242;
					removeaction();
					}
					break;
				case 12:
					{
					State = 243;
					turnaction();
					}
					break;
				case 13:
					{
					State = 244;
					shuffleaction();
					}
					break;
				case 14:
					{
					State = 245;
					repeat();
					}
					break;
				}
				State = 248;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multiaction);
		try {
			int _alt;
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 253;
				Match(OPEN);
				State = 254;
				Match(T__10);
				State = 255;
				Match(OPEN);
				State = 257;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 256;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 259;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 261;
				Match(CLOSE);
				State = 262;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				Match(OPEN);
				State = 265;
				Match(T__11);
				State = 266;
				Match(OPEN);
				State = 268;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 267;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 270;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 272;
				Match(CLOSE);
				State = 273;
				Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 275;
				agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 276;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 16, RULE_multiaction2);
		try {
			int _alt;
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279;
				Match(OPEN);
				State = 280;
				Match(T__11);
				State = 281;
				Match(OPEN);
				State = 283;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 282;
						condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 285;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 287;
				Match(CLOSE);
				State = 288;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 291;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 18, RULE_condact);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294;
				Match(OPEN);
				State = 295;
				boolean();
				State = 296;
				multiaction2();
				State = 297;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299;
				multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 300;
				Match(OPEN);
				State = 301;
				boolean();
				State = 302;
				action();
				State = 303;
				Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 305;
				action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 20, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(OPEN);
			State = 309;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 310;
			collection();
			State = 311;
			var();
			State = 316;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 312;
				condact();
				}
				break;
			case 2:
				{
				State = 313;
				boolean();
				}
				break;
			case 3:
				{
				State = 314;
				cstorage();
				}
				break;
			case 4:
				{
				State = 315;
				rawstorage();
				}
				break;
			}
			State = 318;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 22, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			Match(OPEN);
			State = 321;
			Match(T__14);
			State = 322;
			typed();
			State = 323;
			var();
			State = 327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 324;
				multiaction();
				}
				break;
			case 2:
				{
				State = 325;
				action();
				}
				break;
			case 3:
				{
				State = 326;
				condact();
				}
				break;
			}
			State = 329;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 24, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(OPEN);
			State = 332;
			Match(T__15);
			State = 333;
			typed();
			State = 334;
			var();
			State = 335;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			Match(OPEN);
			State = 338;
			Match(T__16);
			State = 339;
			Match(T__17);
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 340;
				var();
				}
				break;
			case 2:
				{
				State = 341;
				@int();
				}
				break;
			}
			State = 344;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 28, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			Match(OPEN);
			State = 347;
			Match(T__16);
			State = 348;
			Match(T__18);
			State = 350;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 349;
					teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 354;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 30, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			Match(T__16);
			State = 357;
			Match(T__19);
			State = 359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 358;
				str();
				}
				break;
			}
			State = 361;
			cstorage();
			State = 362;
			deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 32, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			Match(OPEN);
			State = 365;
			Match(T__19);
			State = 367;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 366;
					attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 371;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 34, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			Match(OPEN);
			State = 378;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 374;
					Match(INTNUM);
					State = 375;
					Match(T__20);
					}
					} 
				}
				State = 380;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 381;
			Match(INTNUM);
			State = 385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 382;
					teams();
					}
					} 
				}
				State = 387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 388;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 36, RULE_attribute);
		try {
			int _alt;
			State = 412;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 390;
				Match(OPEN);
				State = 391;
				var();
				State = 392;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				Match(OPEN);
				State = 400;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 395;
						namegr();
						State = 396;
						Match(T__20);
						}
						} 
					}
					State = 402;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 403;
				namegr();
				State = 407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 404;
						attribute();
						}
						} 
					}
					State = 409;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				State = 410;
				Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 38, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			Match(T__21);
			State = 415;
			pointstorage();
			State = 416;
			Match(OPEN);
			State = 418;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 417;
					awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 422;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 40, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			Match(OPEN);
			State = 426;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 425;
					subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 428;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 430;
			@int();
			State = 431;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext[] str() {
			return GetRuleContexts<StrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str(int i) {
			return GetRuleContext<StrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 42, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433;
			Match(OPEN);
			State = 434;
			str();
			State = 435;
			Match(T__22);
			State = 436;
			str();
			State = 437;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 44, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			Match(T__23);
			State = 440;
			_la = TokenStream.LA(1);
			if ( !(_la==T__24 || _la==T__25) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 446;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN:
				{
				State = 441;
				owner();
				}
				break;
			case T__25:
				{
				State = 442;
				Match(T__25);
				}
				break;
			case T__24:
				{
				State = 443;
				Match(T__24);
				}
				break;
			case T__26:
				{
				State = 444;
				Match(T__26);
				}
				break;
			case T__0:
				{
				State = 445;
				var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(T__21);
			State = 449;
			rawstorage();
			State = 450;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetstractionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		public SetstractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setstraction; } }
	}

	[RuleVersion(0)]
	public SetstractionContext setstraction() {
		SetstractionContext _localctx = new SetstractionContext(Context, State);
		EnterRule(_localctx, 48, RULE_setstraction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			Match(T__21);
			State = 453;
			strstorage();
			State = 454;
			str();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			Match(T__27);
			State = 457;
			rawstorage();
			State = 458;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(T__28);
			State = 461;
			rawstorage();
			State = 462;
			@int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(T__29);
			State = 465;
			card();
			State = 466;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			Match(T__30);
			State = 469;
			card();
			State = 470;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 58, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			Match(T__31);
			State = 473;
			card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 60, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			Match(T__32);
			State = 476;
			cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 62, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			Match(T__33);
			State = 479;
			Match(T__34);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 64, RULE_repeat);
		try {
			State = 491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 481;
				Match(T__35);
				State = 482;
				@int();
				State = 483;
				action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 485;
				Match(T__35);
				State = 486;
				Match(T__13);
				State = 487;
				Match(OPEN);
				State = 488;
				moveaction();
				State = 489;
				Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 66, RULE_card);
		try {
			State = 506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 493;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494;
				maxof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 495;
				minof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 496;
				actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 497;
				Match(OPEN);
				State = 501;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__36:
					{
					State = 498;
					Match(T__36);
					}
					break;
				case T__37:
					{
					State = 499;
					Match(T__37);
					}
					break;
				case T__0:
				case INTNUM:
				case OPEN:
					{
					State = 500;
					@int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 503;
				cstorage();
				State = 504;
				Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 68, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508;
			Match(OPEN);
			State = 509;
			Match(T__38);
			State = 510;
			card();
			State = 511;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 70, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			Match(OPEN);
			State = 517;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 514;
				var();
				}
				break;
			case T__1:
				{
				State = 515;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 516;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 519;
			Match(T__39);
			State = 520;
			str();
			State = 521;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public PointstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointstorage; } }
	}

	[RuleVersion(0)]
	public PointstorageContext pointstorage() {
		PointstorageContext _localctx = new PointstorageContext(Context, State);
		EnterRule(_localctx, 72, RULE_pointstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 523;
			Match(OPEN);
			State = 527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 524;
				var();
				}
				break;
			case T__1:
				{
				State = 525;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 526;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 529;
			Match(T__40);
			State = 530;
			str();
			State = 531;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public StrstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strstorage; } }
	}

	[RuleVersion(0)]
	public StrstorageContext strstorage() {
		StrstorageContext _localctx = new StrstorageContext(Context, State);
		EnterRule(_localctx, 74, RULE_strstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533;
			Match(OPEN);
			State = 537;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 534;
				var();
				}
				break;
			case T__1:
				{
				State = 535;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 536;
				who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 539;
			Match(T__41);
			State = 540;
			str();
			State = 541;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntersectofContext intersectof() {
			return GetRuleContext<IntersectofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisjunctionofContext disjunctionof() {
			return GetRuleContext<DisjunctionofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortofContext sortof() {
			return GetRuleContext<SortofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 76, RULE_cstorage);
		try {
			State = 556;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544;
				unionof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 545;
				intersectof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 546;
				disjunctionof();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 547;
				sortof();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 548;
				filter();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 549;
				Match(OPEN);
				State = 550;
				locpre();
				State = 551;
				locdesc();
				State = 552;
				str();
				State = 553;
				Match(CLOSE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 555;
				memstorage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 78, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558;
			Match(OPEN);
			State = 562;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__36:
				{
				State = 559;
				Match(T__36);
				}
				break;
			case T__37:
				{
				State = 560;
				Match(T__37);
				}
				break;
			case T__0:
			case INTNUM:
			case OPEN:
				{
				State = 561;
				@int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 564;
			memset();
			State = 565;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionContext partition() {
			return GetRuleContext<PartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubsetContext subset() {
			return GetRuleContext<SubsetContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 80, RULE_memset);
		try {
			State = 570;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567;
				tuple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 568;
				partition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 569;
				subset();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subset; } }
	}

	[RuleVersion(0)]
	public SubsetContext subset() {
		SubsetContext _localctx = new SubsetContext(Context, State);
		EnterRule(_localctx, 82, RULE_subset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572;
			Match(OPEN);
			State = 573;
			Match(T__42);
			State = 574;
			cstorage();
			State = 575;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 84, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(OPEN);
			State = 578;
			Match(T__43);
			State = 579;
			@int();
			State = 580;
			cstorage();
			State = 581;
			Match(T__44);
			State = 582;
			pointstorage();
			State = 583;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public PartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition; } }
	}

	[RuleVersion(0)]
	public PartitionContext partition() {
		PartitionContext _localctx = new PartitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_partition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			Match(OPEN);
			State = 586;
			Match(T__45);
			State = 593;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 587;
				agg();
				}
				break;
			case 2:
				{
				State = 589;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 588;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 591;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 595;
			str();
			State = 596;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 88, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 598;
				var();
				}
				break;
			case T__1:
				{
				State = 599;
				Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 600;
				whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 90, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2111062325329920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 92, RULE_who);
		try {
			State = 607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 605;
				whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 606;
				whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 94, RULE_whop);
		try {
			State = 615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609;
				Match(OPEN);
				State = 610;
				whodesc();
				State = 611;
				Match(T__4);
				State = 612;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 614;
				owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 96, RULE_whot);
		try {
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 617;
				Match(OPEN);
				State = 618;
				whodesc();
				State = 619;
				Match(T__5);
				State = 620;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622;
				teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 98, RULE_whodesc);
		try {
			State = 629;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 625;
				@int();
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 626;
				Match(T__26);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 627;
				Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 4);
				{
				State = 628;
				Match(T__25);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 100, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(OPEN);
			State = 632;
			Match(T__50);
			State = 633;
			card();
			State = 634;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 102, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(OPEN);
			State = 637;
			Match(T__5);
			State = 640;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 638;
				var();
				}
				break;
			case OPEN:
				{
				State = 639;
				whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 642;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 104, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(OPEN);
			State = 645;
			Match(T__51);
			State = 646;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 647;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 106, RULE_typed);
		try {
			State = 654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 649;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 650;
				@int();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 651;
				boolean();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 652;
				str();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 653;
				collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 108, RULE_collection);
		try {
			State = 666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 657;
				filter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 658;
				cstorage();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 659;
				strcollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 660;
				cstoragecollection();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 661;
				Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 662;
				Match(T__5);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 663;
				whot();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 664;
				other();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 665;
				range();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 110, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			Match(OPEN);
			State = 674;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 669;
					namegr();
					State = 670;
					Match(T__20);
					}
					} 
				}
				State = 676;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 677;
			namegr();
			State = 678;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 112, RULE_cstoragecollection);
		try {
			State = 683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 680;
				memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 681;
				agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 682;
				let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 114, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			Match(OPEN);
			State = 686;
			Match(T__52);
			State = 687;
			@int();
			State = 688;
			Match(T__53);
			State = 689;
			@int();
			State = 690;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 116, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			Match(OPEN);
			State = 693;
			Match(T__54);
			State = 694;
			collection();
			State = 695;
			var();
			State = 696;
			boolean();
			State = 697;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext[] str() {
			return GetRuleContexts<StrContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str(int i) {
			return GetRuleContext<StrContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 118, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(EQOP);
			State = 700;
			str();
			State = 701;
			str();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StrContext str() {
			return GetRuleContext<StrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 120, RULE_cardatt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(OPEN);
			State = 704;
			Match(T__55);
			State = 705;
			str();
			State = 706;
			card();
			State = 707;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 122, RULE_boolean);
		try {
			int _alt;
			State = 741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 709;
				Match(OPEN);
				State = 736;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 710;
					Match(BOOLOP);
					State = 711;
					boolean();
					State = 713;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 712;
							boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 715;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 2:
					{
					State = 717;
					intop();
					State = 718;
					@int();
					State = 719;
					@int();
					}
					break;
				case 3:
					{
					State = 721;
					attrcomp();
					}
					break;
				case 4:
					{
					State = 722;
					Match(EQOP);
					State = 723;
					card();
					State = 724;
					card();
					}
					break;
				case 5:
					{
					State = 726;
					Match(UNOP);
					State = 727;
					boolean();
					}
					break;
				case 6:
					{
					State = 728;
					Match(EQOP);
					State = 729;
					whop();
					State = 730;
					whop();
					}
					break;
				case 7:
					{
					State = 732;
					Match(EQOP);
					State = 733;
					whot();
					State = 734;
					whot();
					}
					break;
				}
				State = 738;
				Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 740;
				agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 124, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			_la = TokenStream.LA(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 126, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 745;
			Match(OPEN);
			State = 746;
			Match(T__56);
			State = 747;
			@int();
			State = 748;
			@int();
			State = 749;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 128, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751;
			Match(OPEN);
			State = 752;
			Match(T__57);
			State = 753;
			@int();
			State = 754;
			@int();
			State = 755;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 130, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			Match(OPEN);
			State = 758;
			Match(T__58);
			State = 759;
			@int();
			State = 760;
			@int();
			State = 761;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 132, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			Match(OPEN);
			State = 764;
			Match(T__59);
			State = 765;
			@int();
			State = 766;
			@int();
			State = 767;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 134, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			Match(OPEN);
			State = 770;
			Match(T__60);
			State = 771;
			@int();
			State = 772;
			@int();
			State = 773;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 136, RULE_exponent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 775;
			Match(OPEN);
			State = 776;
			Match(T__61);
			State = 777;
			@int();
			State = 778;
			@int();
			State = 779;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriangularContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TriangularContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triangular; } }
	}

	[RuleVersion(0)]
	public TriangularContext triangular() {
		TriangularContext _localctx = new TriangularContext(Context, State);
		EnterRule(_localctx, 138, RULE_triangular);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781;
			Match(OPEN);
			State = 782;
			Match(T__62);
			State = 783;
			@int();
			State = 784;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FibonacciContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FibonacciContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fibonacci; } }
	}

	[RuleVersion(0)]
	public FibonacciContext fibonacci() {
		FibonacciContext _localctx = new FibonacciContext(Context, State);
		EnterRule(_localctx, 140, RULE_fibonacci);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786;
			Match(OPEN);
			State = 787;
			Match(T__63);
			State = 788;
			@int();
			State = 789;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RandomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_random; } }
	}

	[RuleVersion(0)]
	public RandomContext random() {
		RandomContext _localctx = new RandomContext(Context, State);
		EnterRule(_localctx, 142, RULE_random);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 791;
			Match(OPEN);
			State = 792;
			Match(T__64);
			State = 793;
			@int();
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__53) {
				{
				State = 794;
				Match(T__53);
				State = 795;
				@int();
				}
			}

			State = 798;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 144, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(OPEN);
			State = 801;
			Match(T__65);
			State = 802;
			collection();
			State = 803;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 146, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			Match(OPEN);
			State = 806;
			Match(T__8);
			State = 807;
			cstorage();
			State = 808;
			Match(T__44);
			State = 809;
			pointstorage();
			State = 810;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 148, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			Match(OPEN);
			State = 813;
			Match(T__7);
			State = 814;
			cstorage();
			State = 815;
			Match(T__44);
			State = 816;
			pointstorage();
			State = 817;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SortofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortof; } }
	}

	[RuleVersion(0)]
	public SortofContext sortof() {
		SortofContext _localctx = new SortofContext(Context, State);
		EnterRule(_localctx, 150, RULE_sortof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			Match(OPEN);
			State = 820;
			Match(T__66);
			State = 821;
			cstorage();
			State = 822;
			Match(T__44);
			State = 823;
			pointstorage();
			State = 824;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 152, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 826;
			Match(OPEN);
			State = 827;
			Match(T__67);
			State = 834;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 828;
				agg();
				}
				break;
			case 2:
				{
				State = 830;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 829;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 832;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 836;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntersectofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public IntersectofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intersectof; } }
	}

	[RuleVersion(0)]
	public IntersectofContext intersectof() {
		IntersectofContext _localctx = new IntersectofContext(Context, State);
		EnterRule(_localctx, 154, RULE_intersectof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 838;
			Match(OPEN);
			State = 839;
			Match(T__68);
			State = 846;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 840;
				agg();
				}
				break;
			case 2:
				{
				State = 842;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 841;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 844;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 848;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisjunctionofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public DisjunctionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disjunctionof; } }
	}

	[RuleVersion(0)]
	public DisjunctionofContext disjunctionof() {
		DisjunctionofContext _localctx = new DisjunctionofContext(Context, State);
		EnterRule(_localctx, 156, RULE_disjunctionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			Match(OPEN);
			State = 851;
			Match(T__69);
			State = 858;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				{
				State = 852;
				agg();
				}
				break;
			case 2:
				{
				State = 854;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 853;
						cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 856;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			State = 860;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 158, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			Match(OPEN);
			State = 863;
			Match(T__70);
			State = 864;
			cstorage();
			State = 865;
			Match(T__44);
			State = 866;
			pointstorage();
			State = 867;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PointstorageContext pointstorage() {
			return GetRuleContext<PointstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 160, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 869;
			Match(OPEN);
			State = 870;
			Match(T__71);
			State = 871;
			card();
			State = 872;
			Match(T__44);
			State = 873;
			pointstorage();
			State = 874;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriangularContext triangular() {
			return GetRuleContext<TriangularContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FibonacciContext fibonacci() {
			return GetRuleContext<FibonacciContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RandomContext random() {
			return GetRuleContext<RandomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 162, RULE_int);
		try {
			int _alt;
			State = 895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 876;
				var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 877;
				@sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 878;
				mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 879;
				subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 880;
				mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 881;
				add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 882;
				divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 883;
				exponent();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 884;
				triangular();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 885;
				fibonacci();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 886;
				random();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 887;
				sum();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 888;
				rawstorage();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 889;
				score();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 891;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 890;
						Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 893;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StrstorageContext strstorage() {
			return GetRuleContext<StrstorageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public StrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_str; } }
	}

	[RuleVersion(0)]
	public StrContext str() {
		StrContext _localctx = new StrContext(Context, State);
		EnterRule(_localctx, 164, RULE_str);
		try {
			State = 901;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 897;
				namegr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 898;
				strstorage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 899;
				var();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 900;
				cardatt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 166, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 904;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 903;
					Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 906;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,82,909,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,1,0,1,
		0,1,1,1,1,1,1,5,1,175,8,1,10,1,12,1,178,9,1,1,1,1,1,1,1,4,1,183,8,1,11,
		1,12,1,184,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,2,194,8,2,1,2,1,2,1,2,3,2,199,
		8,2,1,2,1,2,4,2,203,8,2,11,2,12,2,204,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
		4,3,215,8,3,11,3,12,3,216,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,
		6,247,8,6,1,6,1,6,1,6,3,6,252,8,6,1,7,1,7,1,7,1,7,4,7,258,8,7,11,7,12,
		7,259,1,7,1,7,1,7,1,7,1,7,1,7,1,7,4,7,269,8,7,11,7,12,7,270,1,7,1,7,1,
		7,1,7,1,7,3,7,278,8,7,1,8,1,8,1,8,1,8,4,8,284,8,8,11,8,12,8,285,1,8,1,
		8,1,8,1,8,1,8,3,8,293,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,3,9,307,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,317,8,10,
		1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,328,8,11,1,11,1,11,1,
		12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,3,13,343,8,13,1,13,
		1,13,1,14,1,14,1,14,1,14,4,14,351,8,14,11,14,12,14,352,1,14,1,14,1,15,
		1,15,1,15,3,15,360,8,15,1,15,1,15,1,15,1,16,1,16,1,16,4,16,368,8,16,11,
		16,12,16,369,1,16,1,16,1,17,1,17,1,17,5,17,377,8,17,10,17,12,17,380,9,
		17,1,17,1,17,5,17,384,8,17,10,17,12,17,387,9,17,1,17,1,17,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,5,18,399,8,18,10,18,12,18,402,9,18,1,18,1,
		18,5,18,406,8,18,10,18,12,18,409,9,18,1,18,1,18,3,18,413,8,18,1,19,1,19,
		1,19,1,19,4,19,419,8,19,11,19,12,19,420,1,19,1,19,1,20,1,20,4,20,427,8,
		20,11,20,12,20,428,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,3,22,447,8,22,1,23,1,23,1,23,1,23,1,24,1,24,
		1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
		1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,
		1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,492,8,32,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,3,33,502,8,33,1,33,1,33,1,33,3,33,507,8,33,
		1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,3,35,518,8,35,1,35,1,35,1,
		35,1,35,1,36,1,36,1,36,1,36,3,36,528,8,36,1,36,1,36,1,36,1,36,1,37,1,37,
		1,37,1,37,3,37,538,8,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,
		38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,557,8,38,1,39,1,39,1,39,1,39,
		3,39,563,8,39,1,39,1,39,1,39,1,40,1,40,1,40,3,40,571,8,40,1,41,1,41,1,
		41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,
		43,4,43,590,8,43,11,43,12,43,591,3,43,594,8,43,1,43,1,43,1,43,1,44,1,44,
		1,44,3,44,602,8,44,1,45,1,45,1,46,1,46,3,46,608,8,46,1,47,1,47,1,47,1,
		47,1,47,1,47,3,47,616,8,47,1,48,1,48,1,48,1,48,1,48,1,48,3,48,624,8,48,
		1,49,1,49,1,49,1,49,3,49,630,8,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,
		51,1,51,3,51,641,8,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,
		1,53,1,53,3,53,655,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
		54,3,54,667,8,54,1,55,1,55,1,55,1,55,5,55,673,8,55,10,55,12,55,676,9,55,
		1,55,1,55,1,55,1,56,1,56,1,56,3,56,684,8,56,1,57,1,57,1,57,1,57,1,57,1,
		57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,
		60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,4,61,714,8,61,11,61,12,61,715,
		1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
		1,61,1,61,1,61,1,61,1,61,3,61,737,8,61,1,61,1,61,1,61,3,61,742,8,61,1,
		62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,
		65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,
		67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,
		69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,3,71,797,8,71,1,71,
		1,71,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,74,
		1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,
		1,76,1,76,1,76,4,76,831,8,76,11,76,12,76,832,3,76,835,8,76,1,76,1,76,1,
		77,1,77,1,77,1,77,4,77,843,8,77,11,77,12,77,844,3,77,847,8,77,1,77,1,77,
		1,78,1,78,1,78,1,78,4,78,855,8,78,11,78,12,78,856,3,78,859,8,78,1,78,1,
		78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,
		80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
		81,1,81,4,81,892,8,81,11,81,12,81,893,3,81,896,8,81,1,82,1,82,1,82,1,82,
		3,82,902,8,82,1,83,4,83,905,8,83,11,83,12,83,906,1,83,21,176,184,204,216,
		259,270,285,352,369,378,385,400,407,420,428,591,674,715,832,844,856,0,
		84,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
		0,6,1,0,5,6,1,0,8,9,1,0,13,14,1,0,25,26,1,0,47,50,1,0,74,75,962,0,168,
		1,0,0,0,2,171,1,0,0,0,4,189,1,0,0,0,6,208,1,0,0,0,8,220,1,0,0,0,10,226,
		1,0,0,0,12,251,1,0,0,0,14,277,1,0,0,0,16,292,1,0,0,0,18,306,1,0,0,0,20,
		308,1,0,0,0,22,320,1,0,0,0,24,331,1,0,0,0,26,337,1,0,0,0,28,346,1,0,0,
		0,30,356,1,0,0,0,32,364,1,0,0,0,34,373,1,0,0,0,36,412,1,0,0,0,38,414,1,
		0,0,0,40,424,1,0,0,0,42,433,1,0,0,0,44,439,1,0,0,0,46,448,1,0,0,0,48,452,
		1,0,0,0,50,456,1,0,0,0,52,460,1,0,0,0,54,464,1,0,0,0,56,468,1,0,0,0,58,
		472,1,0,0,0,60,475,1,0,0,0,62,478,1,0,0,0,64,491,1,0,0,0,66,506,1,0,0,
		0,68,508,1,0,0,0,70,513,1,0,0,0,72,523,1,0,0,0,74,533,1,0,0,0,76,556,1,
		0,0,0,78,558,1,0,0,0,80,570,1,0,0,0,82,572,1,0,0,0,84,577,1,0,0,0,86,585,
		1,0,0,0,88,601,1,0,0,0,90,603,1,0,0,0,92,607,1,0,0,0,94,615,1,0,0,0,96,
		623,1,0,0,0,98,629,1,0,0,0,100,631,1,0,0,0,102,636,1,0,0,0,104,644,1,0,
		0,0,106,654,1,0,0,0,108,666,1,0,0,0,110,668,1,0,0,0,112,683,1,0,0,0,114,
		685,1,0,0,0,116,692,1,0,0,0,118,699,1,0,0,0,120,703,1,0,0,0,122,741,1,
		0,0,0,124,743,1,0,0,0,126,745,1,0,0,0,128,751,1,0,0,0,130,757,1,0,0,0,
		132,763,1,0,0,0,134,769,1,0,0,0,136,775,1,0,0,0,138,781,1,0,0,0,140,786,
		1,0,0,0,142,791,1,0,0,0,144,800,1,0,0,0,146,805,1,0,0,0,148,812,1,0,0,
		0,150,819,1,0,0,0,152,826,1,0,0,0,154,838,1,0,0,0,156,850,1,0,0,0,158,
		862,1,0,0,0,160,869,1,0,0,0,162,895,1,0,0,0,164,901,1,0,0,0,166,904,1,
		0,0,0,168,169,5,1,0,0,169,170,3,166,83,0,170,1,1,0,0,0,171,172,5,79,0,
		0,172,176,5,2,0,0,173,175,3,24,12,0,174,173,1,0,0,0,175,178,1,0,0,0,176,
		177,1,0,0,0,176,174,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,182,3,
		4,2,0,180,183,3,14,7,0,181,183,3,6,3,0,182,180,1,0,0,0,182,181,1,0,0,0,
		183,184,1,0,0,0,184,185,1,0,0,0,184,182,1,0,0,0,185,186,1,0,0,0,186,187,
		3,8,4,0,187,188,5,80,0,0,188,3,1,0,0,0,189,190,5,79,0,0,190,191,5,3,0,
		0,191,193,3,26,13,0,192,194,3,28,14,0,193,192,1,0,0,0,193,194,1,0,0,0,
		194,202,1,0,0,0,195,198,5,79,0,0,196,199,3,30,15,0,197,199,3,64,32,0,198,
		196,1,0,0,0,198,197,1,0,0,0,199,200,1,0,0,0,200,201,5,80,0,0,201,203,1,
		0,0,0,202,195,1,0,0,0,203,204,1,0,0,0,204,205,1,0,0,0,204,202,1,0,0,0,
		205,206,1,0,0,0,206,207,5,80,0,0,207,5,1,0,0,0,208,209,5,79,0,0,209,210,
		5,4,0,0,210,211,7,0,0,0,211,214,3,10,5,0,212,215,3,14,7,0,213,215,3,6,
		3,0,214,212,1,0,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,216,
		214,1,0,0,0,217,218,1,0,0,0,218,219,5,80,0,0,219,7,1,0,0,0,220,221,5,79,
		0,0,221,222,5,7,0,0,222,223,7,1,0,0,223,224,3,162,81,0,224,225,5,80,0,
		0,225,9,1,0,0,0,226,227,5,79,0,0,227,228,5,10,0,0,228,229,3,122,61,0,229,
		230,5,80,0,0,230,11,1,0,0,0,231,246,5,79,0,0,232,247,3,38,19,0,233,247,
		3,28,14,0,234,247,3,30,15,0,235,247,3,44,22,0,236,247,3,46,23,0,237,247,
		3,54,27,0,238,247,3,56,28,0,239,247,3,50,25,0,240,247,3,48,24,0,241,247,
		3,52,26,0,242,247,3,58,29,0,243,247,3,62,31,0,244,247,3,60,30,0,245,247,
		3,64,32,0,246,232,1,0,0,0,246,233,1,0,0,0,246,234,1,0,0,0,246,235,1,0,
		0,0,246,236,1,0,0,0,246,237,1,0,0,0,246,238,1,0,0,0,246,239,1,0,0,0,246,
		240,1,0,0,0,246,241,1,0,0,0,246,242,1,0,0,0,246,243,1,0,0,0,246,244,1,
		0,0,0,246,245,1,0,0,0,247,248,1,0,0,0,248,249,5,80,0,0,249,252,1,0,0,0,
		250,252,3,20,10,0,251,231,1,0,0,0,251,250,1,0,0,0,252,13,1,0,0,0,253,254,
		5,79,0,0,254,255,5,11,0,0,255,257,5,79,0,0,256,258,3,18,9,0,257,256,1,
		0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,259,257,1,0,0,0,260,261,1,0,0,0,
		261,262,5,80,0,0,262,263,5,80,0,0,263,278,1,0,0,0,264,265,5,79,0,0,265,
		266,5,12,0,0,266,268,5,79,0,0,267,269,3,18,9,0,268,267,1,0,0,0,269,270,
		1,0,0,0,270,271,1,0,0,0,270,268,1,0,0,0,271,272,1,0,0,0,272,273,5,80,0,
		0,273,274,5,80,0,0,274,278,1,0,0,0,275,278,3,20,10,0,276,278,3,22,11,0,
		277,253,1,0,0,0,277,264,1,0,0,0,277,275,1,0,0,0,277,276,1,0,0,0,278,15,
		1,0,0,0,279,280,5,79,0,0,280,281,5,12,0,0,281,283,5,79,0,0,282,284,3,18,
		9,0,283,282,1,0,0,0,284,285,1,0,0,0,285,286,1,0,0,0,285,283,1,0,0,0,286,
		287,1,0,0,0,287,288,5,80,0,0,288,289,5,80,0,0,289,293,1,0,0,0,290,293,
		3,20,10,0,291,293,3,22,11,0,292,279,1,0,0,0,292,290,1,0,0,0,292,291,1,
		0,0,0,293,17,1,0,0,0,294,295,5,79,0,0,295,296,3,122,61,0,296,297,3,16,
		8,0,297,298,5,80,0,0,298,307,1,0,0,0,299,307,3,16,8,0,300,301,5,79,0,0,
		301,302,3,122,61,0,302,303,3,12,6,0,303,304,5,80,0,0,304,307,1,0,0,0,305,
		307,3,12,6,0,306,294,1,0,0,0,306,299,1,0,0,0,306,300,1,0,0,0,306,305,1,
		0,0,0,307,19,1,0,0,0,308,309,5,79,0,0,309,310,7,2,0,0,310,311,3,108,54,
		0,311,316,3,0,0,0,312,317,3,18,9,0,313,317,3,122,61,0,314,317,3,76,38,
		0,315,317,3,70,35,0,316,312,1,0,0,0,316,313,1,0,0,0,316,314,1,0,0,0,316,
		315,1,0,0,0,317,318,1,0,0,0,318,319,5,80,0,0,319,21,1,0,0,0,320,321,5,
		79,0,0,321,322,5,15,0,0,322,323,3,106,53,0,323,327,3,0,0,0,324,328,3,14,
		7,0,325,328,3,12,6,0,326,328,3,18,9,0,327,324,1,0,0,0,327,325,1,0,0,0,
		327,326,1,0,0,0,328,329,1,0,0,0,329,330,5,80,0,0,330,23,1,0,0,0,331,332,
		5,79,0,0,332,333,5,16,0,0,333,334,3,106,53,0,334,335,3,0,0,0,335,336,5,
		80,0,0,336,25,1,0,0,0,337,338,5,79,0,0,338,339,5,17,0,0,339,342,5,18,0,
		0,340,343,3,0,0,0,341,343,3,162,81,0,342,340,1,0,0,0,342,341,1,0,0,0,343,
		344,1,0,0,0,344,345,5,80,0,0,345,27,1,0,0,0,346,347,5,79,0,0,347,348,5,
		17,0,0,348,350,5,19,0,0,349,351,3,34,17,0,350,349,1,0,0,0,351,352,1,0,
		0,0,352,353,1,0,0,0,352,350,1,0,0,0,353,354,1,0,0,0,354,355,5,80,0,0,355,
		29,1,0,0,0,356,357,5,17,0,0,357,359,5,20,0,0,358,360,3,164,82,0,359,358,
		1,0,0,0,359,360,1,0,0,0,360,361,1,0,0,0,361,362,3,76,38,0,362,363,3,32,
		16,0,363,31,1,0,0,0,364,365,5,79,0,0,365,367,5,20,0,0,366,368,3,36,18,
		0,367,366,1,0,0,0,368,369,1,0,0,0,369,370,1,0,0,0,369,367,1,0,0,0,370,
		371,1,0,0,0,371,372,5,80,0,0,372,33,1,0,0,0,373,378,5,79,0,0,374,375,5,
		77,0,0,375,377,5,21,0,0,376,374,1,0,0,0,377,380,1,0,0,0,378,379,1,0,0,
		0,378,376,1,0,0,0,379,381,1,0,0,0,380,378,1,0,0,0,381,385,5,77,0,0,382,
		384,3,34,17,0,383,382,1,0,0,0,384,387,1,0,0,0,385,386,1,0,0,0,385,383,
		1,0,0,0,386,388,1,0,0,0,387,385,1,0,0,0,388,389,5,80,0,0,389,35,1,0,0,
		0,390,391,5,79,0,0,391,392,3,0,0,0,392,393,5,80,0,0,393,413,1,0,0,0,394,
		400,5,79,0,0,395,396,3,166,83,0,396,397,5,21,0,0,397,399,1,0,0,0,398,395,
		1,0,0,0,399,402,1,0,0,0,400,401,1,0,0,0,400,398,1,0,0,0,401,403,1,0,0,
		0,402,400,1,0,0,0,403,407,3,166,83,0,404,406,3,36,18,0,405,404,1,0,0,0,
		406,409,1,0,0,0,407,408,1,0,0,0,407,405,1,0,0,0,408,410,1,0,0,0,409,407,
		1,0,0,0,410,411,5,80,0,0,411,413,1,0,0,0,412,390,1,0,0,0,412,394,1,0,0,
		0,413,37,1,0,0,0,414,415,5,22,0,0,415,416,3,72,36,0,416,418,5,79,0,0,417,
		419,3,40,20,0,418,417,1,0,0,0,419,420,1,0,0,0,420,421,1,0,0,0,420,418,
		1,0,0,0,421,422,1,0,0,0,422,423,5,80,0,0,423,39,1,0,0,0,424,426,5,79,0,
		0,425,427,3,42,21,0,426,425,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,0,428,
		426,1,0,0,0,429,430,1,0,0,0,430,431,3,162,81,0,431,432,5,80,0,0,432,41,
		1,0,0,0,433,434,5,79,0,0,434,435,3,164,82,0,435,436,5,23,0,0,436,437,3,
		164,82,0,437,438,5,80,0,0,438,43,1,0,0,0,439,440,5,24,0,0,440,446,7,3,
		0,0,441,447,3,100,50,0,442,447,5,26,0,0,443,447,5,25,0,0,444,447,5,27,
		0,0,445,447,3,0,0,0,446,441,1,0,0,0,446,442,1,0,0,0,446,443,1,0,0,0,446,
		444,1,0,0,0,446,445,1,0,0,0,447,45,1,0,0,0,448,449,5,22,0,0,449,450,3,
		70,35,0,450,451,3,162,81,0,451,47,1,0,0,0,452,453,5,22,0,0,453,454,3,74,
		37,0,454,455,3,164,82,0,455,49,1,0,0,0,456,457,5,28,0,0,457,458,3,70,35,
		0,458,459,3,162,81,0,459,51,1,0,0,0,460,461,5,29,0,0,461,462,3,70,35,0,
		462,463,3,162,81,0,463,53,1,0,0,0,464,465,5,30,0,0,465,466,3,66,33,0,466,
		467,3,66,33,0,467,55,1,0,0,0,468,469,5,31,0,0,469,470,3,66,33,0,470,471,
		3,66,33,0,471,57,1,0,0,0,472,473,5,32,0,0,473,474,3,66,33,0,474,59,1,0,
		0,0,475,476,5,33,0,0,476,477,3,76,38,0,477,61,1,0,0,0,478,479,5,34,0,0,
		479,480,5,35,0,0,480,63,1,0,0,0,481,482,5,36,0,0,482,483,3,162,81,0,483,
		484,3,12,6,0,484,492,1,0,0,0,485,486,5,36,0,0,486,487,5,14,0,0,487,488,
		5,79,0,0,488,489,3,54,27,0,489,490,5,80,0,0,490,492,1,0,0,0,491,481,1,
		0,0,0,491,485,1,0,0,0,492,65,1,0,0,0,493,507,3,0,0,0,494,507,3,146,73,
		0,495,507,3,148,74,0,496,507,3,68,34,0,497,501,5,79,0,0,498,502,5,37,0,
		0,499,502,5,38,0,0,500,502,3,162,81,0,501,498,1,0,0,0,501,499,1,0,0,0,
		501,500,1,0,0,0,502,503,1,0,0,0,503,504,3,76,38,0,504,505,5,80,0,0,505,
		507,1,0,0,0,506,493,1,0,0,0,506,494,1,0,0,0,506,495,1,0,0,0,506,496,1,
		0,0,0,506,497,1,0,0,0,507,67,1,0,0,0,508,509,5,79,0,0,509,510,5,39,0,0,
		510,511,3,66,33,0,511,512,5,80,0,0,512,69,1,0,0,0,513,517,5,79,0,0,514,
		518,3,0,0,0,515,518,5,2,0,0,516,518,3,92,46,0,517,514,1,0,0,0,517,515,
		1,0,0,0,517,516,1,0,0,0,518,519,1,0,0,0,519,520,5,40,0,0,520,521,3,164,
		82,0,521,522,5,80,0,0,522,71,1,0,0,0,523,527,5,79,0,0,524,528,3,0,0,0,
		525,528,5,2,0,0,526,528,3,92,46,0,527,524,1,0,0,0,527,525,1,0,0,0,527,
		526,1,0,0,0,528,529,1,0,0,0,529,530,5,41,0,0,530,531,3,164,82,0,531,532,
		5,80,0,0,532,73,1,0,0,0,533,537,5,79,0,0,534,538,3,0,0,0,535,538,5,2,0,
		0,536,538,3,92,46,0,537,534,1,0,0,0,537,535,1,0,0,0,537,536,1,0,0,0,538,
		539,1,0,0,0,539,540,5,42,0,0,540,541,3,164,82,0,541,542,5,80,0,0,542,75,
		1,0,0,0,543,557,3,0,0,0,544,557,3,152,76,0,545,557,3,154,77,0,546,557,
		3,156,78,0,547,557,3,150,75,0,548,557,3,116,58,0,549,550,5,79,0,0,550,
		551,3,88,44,0,551,552,3,90,45,0,552,553,3,164,82,0,553,554,5,80,0,0,554,
		557,1,0,0,0,555,557,3,78,39,0,556,543,1,0,0,0,556,544,1,0,0,0,556,545,
		1,0,0,0,556,546,1,0,0,0,556,547,1,0,0,0,556,548,1,0,0,0,556,549,1,0,0,
		0,556,555,1,0,0,0,557,77,1,0,0,0,558,562,5,79,0,0,559,563,5,37,0,0,560,
		563,5,38,0,0,561,563,3,162,81,0,562,559,1,0,0,0,562,560,1,0,0,0,562,561,
		1,0,0,0,563,564,1,0,0,0,564,565,3,80,40,0,565,566,5,80,0,0,566,79,1,0,
		0,0,567,571,3,84,42,0,568,571,3,86,43,0,569,571,3,82,41,0,570,567,1,0,
		0,0,570,568,1,0,0,0,570,569,1,0,0,0,571,81,1,0,0,0,572,573,5,79,0,0,573,
		574,5,43,0,0,574,575,3,76,38,0,575,576,5,80,0,0,576,83,1,0,0,0,577,578,
		5,79,0,0,578,579,5,44,0,0,579,580,3,162,81,0,580,581,3,76,38,0,581,582,
		5,45,0,0,582,583,3,72,36,0,583,584,5,80,0,0,584,85,1,0,0,0,585,586,5,79,
		0,0,586,593,5,46,0,0,587,594,3,20,10,0,588,590,3,76,38,0,589,588,1,0,0,
		0,590,591,1,0,0,0,591,592,1,0,0,0,591,589,1,0,0,0,592,594,1,0,0,0,593,
		587,1,0,0,0,593,589,1,0,0,0,594,595,1,0,0,0,595,596,3,164,82,0,596,597,
		5,80,0,0,597,87,1,0,0,0,598,602,3,0,0,0,599,602,5,2,0,0,600,602,3,94,47,
		0,601,598,1,0,0,0,601,599,1,0,0,0,601,600,1,0,0,0,602,89,1,0,0,0,603,604,
		7,4,0,0,604,91,1,0,0,0,605,608,3,96,48,0,606,608,3,94,47,0,607,605,1,0,
		0,0,607,606,1,0,0,0,608,93,1,0,0,0,609,610,5,79,0,0,610,611,3,98,49,0,
		611,612,5,5,0,0,612,613,5,80,0,0,613,616,1,0,0,0,614,616,3,100,50,0,615,
		609,1,0,0,0,615,614,1,0,0,0,616,95,1,0,0,0,617,618,5,79,0,0,618,619,3,
		98,49,0,619,620,5,6,0,0,620,621,5,80,0,0,621,624,1,0,0,0,622,624,3,102,
		51,0,623,617,1,0,0,0,623,622,1,0,0,0,624,97,1,0,0,0,625,630,3,162,81,0,
		626,630,5,27,0,0,627,630,5,25,0,0,628,630,5,26,0,0,629,625,1,0,0,0,629,
		626,1,0,0,0,629,627,1,0,0,0,629,628,1,0,0,0,630,99,1,0,0,0,631,632,5,79,
		0,0,632,633,5,51,0,0,633,634,3,66,33,0,634,635,5,80,0,0,635,101,1,0,0,
		0,636,637,5,79,0,0,637,640,5,6,0,0,638,641,3,0,0,0,639,641,3,94,47,0,640,
		638,1,0,0,0,640,639,1,0,0,0,641,642,1,0,0,0,642,643,5,80,0,0,643,103,1,
		0,0,0,644,645,5,79,0,0,645,646,5,52,0,0,646,647,7,0,0,0,647,648,5,80,0,
		0,648,105,1,0,0,0,649,655,3,0,0,0,650,655,3,162,81,0,651,655,3,122,61,
		0,652,655,3,164,82,0,653,655,3,108,54,0,654,649,1,0,0,0,654,650,1,0,0,
		0,654,651,1,0,0,0,654,652,1,0,0,0,654,653,1,0,0,0,655,107,1,0,0,0,656,
		667,3,0,0,0,657,667,3,116,58,0,658,667,3,76,38,0,659,667,3,110,55,0,660,
		667,3,112,56,0,661,667,5,5,0,0,662,667,5,6,0,0,663,667,3,96,48,0,664,667,
		3,104,52,0,665,667,3,114,57,0,666,656,1,0,0,0,666,657,1,0,0,0,666,658,
		1,0,0,0,666,659,1,0,0,0,666,660,1,0,0,0,666,661,1,0,0,0,666,662,1,0,0,
		0,666,663,1,0,0,0,666,664,1,0,0,0,666,665,1,0,0,0,667,109,1,0,0,0,668,
		674,5,79,0,0,669,670,3,166,83,0,670,671,5,21,0,0,671,673,1,0,0,0,672,669,
		1,0,0,0,673,676,1,0,0,0,674,675,1,0,0,0,674,672,1,0,0,0,675,677,1,0,0,
		0,676,674,1,0,0,0,677,678,3,166,83,0,678,679,5,80,0,0,679,111,1,0,0,0,
		680,684,3,80,40,0,681,684,3,20,10,0,682,684,3,22,11,0,683,680,1,0,0,0,
		683,681,1,0,0,0,683,682,1,0,0,0,684,113,1,0,0,0,685,686,5,79,0,0,686,687,
		5,53,0,0,687,688,3,162,81,0,688,689,5,54,0,0,689,690,3,162,81,0,690,691,
		5,80,0,0,691,115,1,0,0,0,692,693,5,79,0,0,693,694,5,55,0,0,694,695,3,108,
		54,0,695,696,3,0,0,0,696,697,3,122,61,0,697,698,5,80,0,0,698,117,1,0,0,
		0,699,700,5,75,0,0,700,701,3,164,82,0,701,702,3,164,82,0,702,119,1,0,0,
		0,703,704,5,79,0,0,704,705,5,56,0,0,705,706,3,164,82,0,706,707,3,66,33,
		0,707,708,5,80,0,0,708,121,1,0,0,0,709,736,5,79,0,0,710,711,5,73,0,0,711,
		713,3,122,61,0,712,714,3,122,61,0,713,712,1,0,0,0,714,715,1,0,0,0,715,
		716,1,0,0,0,715,713,1,0,0,0,716,737,1,0,0,0,717,718,3,124,62,0,718,719,
		3,162,81,0,719,720,3,162,81,0,720,737,1,0,0,0,721,737,3,118,59,0,722,723,
		5,75,0,0,723,724,3,66,33,0,724,725,3,66,33,0,725,737,1,0,0,0,726,727,5,
		76,0,0,727,737,3,122,61,0,728,729,5,75,0,0,729,730,3,94,47,0,730,731,3,
		94,47,0,731,737,1,0,0,0,732,733,5,75,0,0,733,734,3,96,48,0,734,735,3,96,
		48,0,735,737,1,0,0,0,736,710,1,0,0,0,736,717,1,0,0,0,736,721,1,0,0,0,736,
		722,1,0,0,0,736,726,1,0,0,0,736,728,1,0,0,0,736,732,1,0,0,0,737,738,1,
		0,0,0,738,739,5,80,0,0,739,742,1,0,0,0,740,742,3,20,10,0,741,709,1,0,0,
		0,741,740,1,0,0,0,742,123,1,0,0,0,743,744,7,5,0,0,744,125,1,0,0,0,745,
		746,5,79,0,0,746,747,5,57,0,0,747,748,3,162,81,0,748,749,3,162,81,0,749,
		750,5,80,0,0,750,127,1,0,0,0,751,752,5,79,0,0,752,753,5,58,0,0,753,754,
		3,162,81,0,754,755,3,162,81,0,755,756,5,80,0,0,756,129,1,0,0,0,757,758,
		5,79,0,0,758,759,5,59,0,0,759,760,3,162,81,0,760,761,3,162,81,0,761,762,
		5,80,0,0,762,131,1,0,0,0,763,764,5,79,0,0,764,765,5,60,0,0,765,766,3,162,
		81,0,766,767,3,162,81,0,767,768,5,80,0,0,768,133,1,0,0,0,769,770,5,79,
		0,0,770,771,5,61,0,0,771,772,3,162,81,0,772,773,3,162,81,0,773,774,5,80,
		0,0,774,135,1,0,0,0,775,776,5,79,0,0,776,777,5,62,0,0,777,778,3,162,81,
		0,778,779,3,162,81,0,779,780,5,80,0,0,780,137,1,0,0,0,781,782,5,79,0,0,
		782,783,5,63,0,0,783,784,3,162,81,0,784,785,5,80,0,0,785,139,1,0,0,0,786,
		787,5,79,0,0,787,788,5,64,0,0,788,789,3,162,81,0,789,790,5,80,0,0,790,
		141,1,0,0,0,791,792,5,79,0,0,792,793,5,65,0,0,793,796,3,162,81,0,794,795,
		5,54,0,0,795,797,3,162,81,0,796,794,1,0,0,0,796,797,1,0,0,0,797,798,1,
		0,0,0,798,799,5,80,0,0,799,143,1,0,0,0,800,801,5,79,0,0,801,802,5,66,0,
		0,802,803,3,108,54,0,803,804,5,80,0,0,804,145,1,0,0,0,805,806,5,79,0,0,
		806,807,5,9,0,0,807,808,3,76,38,0,808,809,5,45,0,0,809,810,3,72,36,0,810,
		811,5,80,0,0,811,147,1,0,0,0,812,813,5,79,0,0,813,814,5,8,0,0,814,815,
		3,76,38,0,815,816,5,45,0,0,816,817,3,72,36,0,817,818,5,80,0,0,818,149,
		1,0,0,0,819,820,5,79,0,0,820,821,5,67,0,0,821,822,3,76,38,0,822,823,5,
		45,0,0,823,824,3,72,36,0,824,825,5,80,0,0,825,151,1,0,0,0,826,827,5,79,
		0,0,827,834,5,68,0,0,828,835,3,20,10,0,829,831,3,76,38,0,830,829,1,0,0,
		0,831,832,1,0,0,0,832,833,1,0,0,0,832,830,1,0,0,0,833,835,1,0,0,0,834,
		828,1,0,0,0,834,830,1,0,0,0,835,836,1,0,0,0,836,837,5,80,0,0,837,153,1,
		0,0,0,838,839,5,79,0,0,839,846,5,69,0,0,840,847,3,20,10,0,841,843,3,76,
		38,0,842,841,1,0,0,0,843,844,1,0,0,0,844,845,1,0,0,0,844,842,1,0,0,0,845,
		847,1,0,0,0,846,840,1,0,0,0,846,842,1,0,0,0,847,848,1,0,0,0,848,849,5,
		80,0,0,849,155,1,0,0,0,850,851,5,79,0,0,851,858,5,70,0,0,852,859,3,20,
		10,0,853,855,3,76,38,0,854,853,1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,
		856,854,1,0,0,0,857,859,1,0,0,0,858,852,1,0,0,0,858,854,1,0,0,0,859,860,
		1,0,0,0,860,861,5,80,0,0,861,157,1,0,0,0,862,863,5,79,0,0,863,864,5,71,
		0,0,864,865,3,76,38,0,865,866,5,45,0,0,866,867,3,72,36,0,867,868,5,80,
		0,0,868,159,1,0,0,0,869,870,5,79,0,0,870,871,5,72,0,0,871,872,3,66,33,
		0,872,873,5,45,0,0,873,874,3,72,36,0,874,875,5,80,0,0,875,161,1,0,0,0,
		876,896,3,0,0,0,877,896,3,144,72,0,878,896,3,128,64,0,879,896,3,130,65,
		0,880,896,3,132,66,0,881,896,3,126,63,0,882,896,3,134,67,0,883,896,3,136,
		68,0,884,896,3,138,69,0,885,896,3,140,70,0,886,896,3,142,71,0,887,896,
		3,158,79,0,888,896,3,70,35,0,889,896,3,160,80,0,890,892,5,77,0,0,891,890,
		1,0,0,0,892,893,1,0,0,0,893,891,1,0,0,0,893,894,1,0,0,0,894,896,1,0,0,
		0,895,876,1,0,0,0,895,877,1,0,0,0,895,878,1,0,0,0,895,879,1,0,0,0,895,
		880,1,0,0,0,895,881,1,0,0,0,895,882,1,0,0,0,895,883,1,0,0,0,895,884,1,
		0,0,0,895,885,1,0,0,0,895,886,1,0,0,0,895,887,1,0,0,0,895,888,1,0,0,0,
		895,889,1,0,0,0,895,891,1,0,0,0,896,163,1,0,0,0,897,902,3,166,83,0,898,
		902,3,74,37,0,899,902,3,0,0,0,900,902,3,120,60,0,901,897,1,0,0,0,901,898,
		1,0,0,0,901,899,1,0,0,0,901,900,1,0,0,0,902,165,1,0,0,0,903,905,5,78,0,
		0,904,903,1,0,0,0,905,906,1,0,0,0,906,904,1,0,0,0,906,907,1,0,0,0,907,
		167,1,0,0,0,65,176,182,184,193,198,204,214,216,246,251,259,270,277,285,
		292,306,316,327,342,352,359,369,378,385,400,407,412,420,428,446,491,501,
		506,517,527,537,556,562,570,591,593,601,607,615,623,629,640,654,666,674,
		683,715,736,741,796,832,834,844,846,856,858,893,895,901,906
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
